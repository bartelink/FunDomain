<?xml version="1.0"?>
<doc>
  <assembly>
    <name>NEventStore</name>
  </assembly>
  <members>
    <member name="M:NEventStore.AccessSnapshotsExtensions.GetSnapshot(NEventStore.IAccessSnapshots,System.Guid,System.Int32)">
      <summary>
                Gets the most recent snapshot which was taken on or before the revision indicated from the default bucket.
            </summary>
      <param name="accessSnapshots">The <see cref="T:NEventStore.IAccessSnapshots" /> instance.</param>
      <param name="streamId">The stream to be searched for a snapshot.</param>
      <param name="maxRevision">The maximum revision possible for the desired snapshot.</param>
      <returns>If found, it returns the snapshot; otherwise null is returned.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="M:NEventStore.AccessSnapshotsExtensions.GetSnapshot(NEventStore.IAccessSnapshots,System.String,System.Int32)">
      <summary>
                Gets the most recent snapshot which was taken on or before the revision indicated from the default bucket.
            </summary>
      <param name="accessSnapshots">The <see cref="T:NEventStore.IAccessSnapshots" /> instance.</param>
      <param name="streamId">The stream to be searched for a snapshot.</param>
      <param name="maxRevision">The maximum revision possible for the desired snapshot.</param>
      <returns>If found, it returns the snapshot; otherwise null is returned.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="M:NEventStore.AccessSnapshotsExtensions.GetSnapshot(NEventStore.IAccessSnapshots,System.String,System.Guid,System.Int32)">
      <summary>
                Gets the most recent snapshot which was taken on or before the revision indicated.
            </summary>
      <param name="accessSnapshots">The <see cref="T:NEventStore.IAccessSnapshots" /> instance.</param>
      <param name="bucketId">The value which uniquely identifies bucket the stream belongs to.</param>
      <param name="streamId">The stream to be searched for a snapshot.</param>
      <param name="maxRevision">The maximum revision possible for the desired snapshot.</param>
      <returns>If found, it returns the snapshot; otherwise null is returned.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="M:NEventStore.AccessSnapshotsExtensions.GetStreamsToSnapshot(NEventStore.IAccessSnapshots,System.Int32)">
      <summary>
                Gets identifiers for all streams whose head and last snapshot revisions differ by at least the threshold specified for the default bucket.
            </summary>
      <param name="accessSnapshots">The <see cref="T:NEventStore.IAccessSnapshots" /> instance.</param>
      <param name="maxThreshold">The maximum difference between the head and most recent snapshot revisions.</param>
      <returns>The streams for which the head and snapshot revisions differ by at least the threshold specified.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="F:NEventStore.Bucket.Default">
      <summary>
            The default bucket Id.
            </summary>
    </member>
    <member name="T:NEventStore.Client.Messages">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:NEventStore.Client.Messages.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:NEventStore.Client.Messages.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:NEventStore.Client.Messages.MustBeGreaterThanOrEqualToZero">
      <summary>
              Looks up a localized string similar to {0} must be greater than or equal to zero..
            </summary>
    </member>
    <member name="P:NEventStore.Client.Messages.MustBeGreaterThanZero">
      <summary>
              Looks up a localized string similar to {0} must be greater than zero..
            </summary>
    </member>
    <member name="M:NEventStore.Client.ClientBase.ObserveFrom(System.String)">
      <summary>
            Observe commits from the sepecified checkpoint token. If the token is null,
             all commits from the beginning will be observed.
            </summary>
      <param name="checkpointToken">The checkpoint token.</param>
      <returns>An <see cref="T:NEventStore.Client.IObserveCommits" /> instance.</returns>
    </member>
    <member name="T:NEventStore.Client.PollingClient">
      <summary>
            Represents a client that poll the storage for latest commits.
            </summary>
    </member>
    <member name="M:NEventStore.Client.PollingClient.ObserveFrom(System.String)">
      <summary>
            Observe commits from the sepecified checkpoint token. If the token is null,
            all commits from the beginning will be observed.
            </summary>
      <param name="checkpointToken">The checkpoint token.</param>
      <returns>
            An <see cref="T:NEventStore.Client.IObserveCommits" /> instance.
            </returns>
    </member>
    <member name="M:NEventStore.CommitEventsExtensions.GetFrom(NEventStore.ICommitEvents,System.String,System.Int32,System.Int32)">
      <summary>
                Gets the corresponding commits from the stream indicated starting at the revision specified until the
                end of the stream sorted in ascending order--from oldest to newest from the default bucket.
            </summary>
      <param name="commitEvents">The <see cref="T:NEventStore.ICommitEvents" /> instance.</param>
      <param name="streamId">The stream from which the events will be read.</param>
      <param name="minRevision">The minimum revision of the stream to be read.</param>
      <param name="maxRevision">The maximum revision of the stream to be read.</param>
      <returns>A series of committed events from the stream specified sorted in ascending order.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="T:CommonDomain.Core.ConflictDetector">
      <summary>
              The conflict detector is used to determine if the events to be committed represent
              a true business conflict as compared to events that have already been committed, thus
              allowing reconciliation of optimistic concurrency problems.
            </summary>
      <remarks>
              The implementation contains some internal lambda "magic" which allows casting between
              TCommitted, TUncommitted, and System.Object and in a completely type-safe way.
            </remarks>
    </member>
    <member name="M:CommonDomain.DetectConflictsExtensions.Register``2(CommonDomain.IDetectConflicts,CommonDomain.ConflictDelegate)">
      <summary>
              Provides backward compatibility for untyped ConflictDelegate users
            </summary>
    </member>
    <member name="T:CommonDomain.Persistence.ConflictingCommandException">
      <summary>
              Represents a command that could not be executed because it conflicted with the command of another user or actor.
            </summary>
    </member>
    <member name="M:CommonDomain.Persistence.ConflictingCommandException.#ctor">
      <summary>
              Initializes a new instance of the ConflictingCommandException class.
            </summary>
    </member>
    <member name="M:CommonDomain.Persistence.ConflictingCommandException.#ctor(System.String)">
      <summary>
              Initializes a new instance of the ConflictingCommandException class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:CommonDomain.Persistence.ConflictingCommandException.#ctor(System.String,System.Exception)">
      <summary>
              Initializes a new instance of the ConflictingCommandException class.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The message that is the cause of the current exception.</param>
    </member>
    <member name="M:CommonDomain.Persistence.ConflictingCommandException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              Initializes a new instance of the ConflictingCommandException class.
            </summary>
      <param name="info">The SerializationInfo that holds the serialized object data of the exception being thrown.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:CommonDomain.Persistence.EventStore.ExceptionMessages">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:CommonDomain.Persistence.EventStore.ExceptionMessages.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:CommonDomain.Persistence.EventStore.ExceptionMessages.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:CommonDomain.Persistence.EventStore.ExceptionMessages.ConflictingCommand">
      <summary>
              Looks up a localized string similar to The command issued conflicted with another command that was sent by another user, actor, or process in the system.  The change could not be automatically merged.  Please review the data that has changed and try your change again..
            </summary>
    </member>
    <member name="P:CommonDomain.Persistence.EventStore.ExceptionMessages.NoWork">
      <summary>
              Looks up a localized string similar to There were no uncommitted changes to persist.  When attempting to save an aggregate there must be at least one uncommitted event to persist..
            </summary>
    </member>
    <member name="P:CommonDomain.Persistence.EventStore.ExceptionMessages.NullArgument">
      <summary>
              Looks up a localized string similar to The argument cannot be null..
            </summary>
    </member>
    <member name="T:CommonDomain.Persistence.PersistenceException">
      <summary>
              Represents a general failure of the persistence infrastructure.
            </summary>
    </member>
    <member name="M:CommonDomain.Persistence.PersistenceException.#ctor">
      <summary>
              Initializes a new instance of the PersistenceException class.
            </summary>
    </member>
    <member name="M:CommonDomain.Persistence.PersistenceException.#ctor(System.String)">
      <summary>
              Initializes a new instance of the PersistenceException class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:CommonDomain.Persistence.PersistenceException.#ctor(System.String,System.Exception)">
      <summary>
              Initializes a new instance of the PersistenceException class.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The message that is the cause of the current exception.</param>
    </member>
    <member name="M:CommonDomain.Persistence.PersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              Initializes a new instance of the PersistenceException class.
            </summary>
      <param name="info">The SerializationInfo that holds the serialized object data of the exception being thrown.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:NEventStore.ConcurrencyException">
      <summary>
                Represents an optimistic concurrency conflict between multiple writers.
            </summary>
    </member>
    <member name="M:NEventStore.ConcurrencyException.#ctor">
      <summary>
                Initializes a new instance of the ConcurrencyException class.
            </summary>
    </member>
    <member name="M:NEventStore.ConcurrencyException.#ctor(System.String)">
      <summary>
                Initializes a new instance of the ConcurrencyException class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:NEventStore.ConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>
                Initializes a new instance of the ConcurrencyException class.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The message that is the cause of the current exception.</param>
    </member>
    <member name="M:NEventStore.ConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                Initializes a new instance of the ConcurrencyException class.
            </summary>
      <param name="info">The SerializationInfo that holds the serialized object data of the exception being thrown.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:NEventStore.IPipelineHook">
      <summary>
                Provides the ability to hook into the pipeline of persisting a commit.
            </summary>
      <remarks>
                Instances of this class must be designed to be multi-thread safe such that they can be shared between threads.
            </remarks>
    </member>
    <member name="M:NEventStore.IPipelineHook.Select(NEventStore.ICommit)">
      <summary>
                Hooks into the selection pipeline just prior to the commit being returned to the caller.
            </summary>
      <param name="committed">The commit to be filtered.</param>
      <returns>If successful, returns a populated commit; otherwise returns null.</returns>
    </member>
    <member name="M:NEventStore.IPipelineHook.PreCommit(NEventStore.CommitAttempt)">
      <summary>
                Hooks into the commit pipeline prior to persisting the commit to durable storage.
            </summary>
      <param name="attempt">The attempt to be committed.</param>
      <returns>If processing should continue, returns true; otherwise returns false.</returns>
    </member>
    <member name="M:NEventStore.IPipelineHook.PostCommit(NEventStore.ICommit)">
      <summary>
                Hooks into the commit pipeline just after the commit has been *successfully* committed to durable storage.
            </summary>
      <param name="committed">The commit which has been persisted.</param>
    </member>
    <member name="M:NEventStore.IPipelineHook.OnPurge(System.String)">
      <summary>
                Invoked when a bucket has been purged. If buckedId is null, then all buckets have been purged.
            </summary>
      <param name="bucketId">The bucket Id that has been purged. Null when all buckets have been purged.</param>
    </member>
    <member name="M:NEventStore.IPipelineHook.OnDeleteStream(System.String,System.String)">
      <summary>
                Invoked when a stream has been deleted.
            </summary>
      <param name="bucketId">The bucket Id from which the stream whch has been deleted.</param>
      <param name="streamId">The stream Id of the stream which has been deleted.</param>
    </member>
    <member name="T:NEventStore.ICommitEvents">
      <summary>
                Indicates the ability to commit events and access events to and from a given stream.
            </summary>
      <remarks>
                Instances of this class must be designed to be multi-thread safe such that they can be shared between threads.
            </remarks>
    </member>
    <member name="M:NEventStore.ICommitEvents.GetFrom(System.String,System.String,System.Int32,System.Int32)">
      <summary>
                Gets the corresponding commits from the stream indicated starting at the revision specified until the
                end of the stream sorted in ascending order--from oldest to newest.
            </summary>
      <param name="bucketId">The value which uniquely identifies bucket the stream belongs to.</param>
      <param name="streamId">The stream from which the events will be read.</param>
      <param name="minRevision">The minimum revision of the stream to be read.</param>
      <param name="maxRevision">The maximum revision of the stream to be read.</param>
      <returns>A series of committed events from the stream specified sorted in ascending order.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="M:NEventStore.ICommitEvents.Commit(NEventStore.CommitAttempt)">
      <summary>
                Writes the to-be-commited events provided to the underlying persistence mechanism.
            </summary>
      <param name="attempt">The series of events and associated metadata to be commited.</param>
      <exception cref="T:NEventStore.ConcurrencyException" />
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="T:NEventStore.IAccessSnapshots">
      <summary>
                Indicates the ability to get or retrieve a snapshot for a given stream.
            </summary>
      <remarks>
                Instances of this class must be designed to be multi-thread safe such that they can be shared between threads.
            </remarks>
    </member>
    <member name="M:NEventStore.IAccessSnapshots.GetSnapshot(System.String,System.String,System.Int32)">
      <summary>
                Gets the most recent snapshot which was taken on or before the revision indicated.
            </summary>
      <param name="bucketId">The value which uniquely identifies bucket the stream belongs to.</param>
      <param name="streamId">The stream to be searched for a snapshot.</param>
      <param name="maxRevision">The maximum revision possible for the desired snapshot.</param>
      <returns>If found, it returns the snapshot; otherwise null is returned.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="M:NEventStore.IAccessSnapshots.AddSnapshot(NEventStore.ISnapshot)">
      <summary>
                Adds the snapshot provided to the stream indicated.
            </summary>
      <param name="snapshot">The snapshot to save.</param>
      <returns>If the snapshot was added, returns true; otherwise false.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="M:NEventStore.IAccessSnapshots.GetStreamsToSnapshot(System.String,System.Int32)">
      <summary>
                Gets identifiers for all streams whose head and last snapshot revisions differ by at least the threshold specified.
            </summary>
      <param name="bucketId">The value which uniquely identifies bucket the stream belongs to.</param>
      <param name="maxThreshold">The maximum difference between the head and most recent snapshot revisions.</param>
      <returns>The streams for which the head and snapshot revisions differ by at least the threshold specified.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="T:NEventStore.Persistence.IPersistStreams">
      <summary>
                Indicates the ability to adapt the underlying persistence infrastructure to behave like a stream of events.
            </summary>
      <remarks>
                Instances of this class must be designed to be multi-thread safe such that they can be shared between threads.
            </remarks>
    </member>
    <member name="M:NEventStore.Persistence.IPersistStreams.Initialize">
      <summary>
                Initializes and prepares the storage for use, if not already performed.
            </summary>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="M:NEventStore.Persistence.IPersistStreams.GetFrom(System.String,System.DateTime)">
      <summary>
                Gets all commits on or after from the specified starting time.
            </summary>
      <param name="bucketId">The value which uniquely identifies bucket the stream belongs to.</param>
      <param name="start">The point in time at which to start.</param>
      <returns>All commits that have occurred on or after the specified starting time.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="M:NEventStore.Persistence.IPersistStreams.GetFrom(System.String)">
      <summary>
                Gets all commits after from the specified checkpoint. Use null to get from the beginning.
            </summary>
      <param name="checkpointToken">The checkpoint token.</param>
      <returns>An enumerable of Commits.</returns>
    </member>
    <member name="M:NEventStore.Persistence.IPersistStreams.GetCheckpoint(System.String)">
      <summary>
            Gets a checkpoint object that is comparable with other checkpoints from this storage engine.
            </summary>
      <param name="checkpointToken">The checkpoint token</param>
      <returns>A <see cref="T:NEventStore.ICheckpoint" /> instance.</returns>
    </member>
    <member name="M:NEventStore.Persistence.IPersistStreams.GetFromTo(System.String,System.DateTime,System.DateTime)">
      <summary>
                Gets all commits on or after from the specified starting time and before the specified end time.
            </summary>
      <param name="bucketId">The value which uniquely identifies bucket the stream belongs to.</param>
      <param name="start">The point in time at which to start.</param>
      <param name="end">The point in time at which to end.</param>
      <returns>All commits that have occurred on or after the specified starting time and before the end time.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="M:NEventStore.Persistence.IPersistStreams.GetUndispatchedCommits">
      <summary>
                Gets a set of commits that has not yet been dispatched.
            </summary>
      <returns>The set of commits to be dispatched.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="M:NEventStore.Persistence.IPersistStreams.MarkCommitAsDispatched(NEventStore.ICommit)">
      <summary>
                Marks the commit specified as dispatched.
            </summary>
      <param name="commit">The commit to be marked as dispatched.</param>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="M:NEventStore.Persistence.IPersistStreams.Purge">
      <summary>
                Completely DESTROYS the contents of ANY and ALL streams that have been successfully persisted.  Use with caution.
            </summary>
    </member>
    <member name="M:NEventStore.Persistence.IPersistStreams.Purge(System.String)">
      <summary>
                Completely DESTROYS the contents of ANY and ALL streams that have been successfully persisted
                in the specified bucket.  Use with caution.
            </summary>
    </member>
    <member name="M:NEventStore.Persistence.IPersistStreams.Drop">
      <summary>
                Completely DESTROYS the contents and schema (if applicable) containting ANY and ALL streams that have been
                successfully persisted
                in the specified bucket.  Use with caution.
            </summary>
    </member>
    <member name="M:NEventStore.Persistence.IPersistStreams.DeleteStream(System.String,System.String)">
      <summary>
            Deletes a stream.
            </summary>
      <param name="bucketId">The bucket Id from which the stream is to be deleted.</param>
      <param name="streamId">The stream Id of the stream that is to be deleted.</param>
    </member>
    <member name="P:NEventStore.Persistence.IPersistStreams.IsDisposed">
      <summary>
                Gets a value indicating whether this instance has been disposed of.
            </summary>
    </member>
    <member name="T:NEventStore.DispatcherSchedulerStartup">
      <summary>
            Dispatcher startup types.
            </summary>
    </member>
    <member name="F:NEventStore.DispatcherSchedulerStartup.Auto">
      <summary>
            Dispatcher will be started automatically.
            </summary>
    </member>
    <member name="F:NEventStore.DispatcherSchedulerStartup.Explicit">
      <summary>
            Dispather will be started explicitly.
            </summary>
    </member>
    <member name="T:NEventStore.Dispatcher.IScheduleDispatches">
      <summary>
                Indicates the ability to schedule the specified commit for delivery--either now or in the future.
            </summary>
      <remarks>
                Instances of this class must be designed to be multi-thread safe such that they can be shared between threads.
            </remarks>
    </member>
    <member name="M:NEventStore.Dispatcher.IScheduleDispatches.ScheduleDispatch(NEventStore.ICommit)">
      <summary>
                Schedules the series of messages contained within the commit provided for delivery to all interested parties.
            </summary>
      <param name="commit">The commit representing the series of messages to be dispatched.</param>
    </member>
    <member name="M:NEventStore.Dispatcher.IScheduleDispatches.Start">
      <summary>
            Start the dispatcher.
            </summary>
    </member>
    <member name="T:NEventStore.Dispatcher.IDispatchCommits">
      <summary>
                Indicates the ability to dispatch the specified commit to some kind of communications infrastructure.
            </summary>
      <remarks>
                Instances of this class must be designed to be multi-thread safe such that they can be shared between threads.
            </remarks>
    </member>
    <member name="M:NEventStore.Dispatcher.IDispatchCommits.Dispatch(NEventStore.ICommit)">
      <summary>
                Dispatches the commit specified to the messaging infrastructure.
            </summary>
      <param name="commit">The commmit to be dispatched.</param>
    </member>
    <member name="T:NEventStore.ExtensionMethods">
      <summary>
                A set of common methods used through the NEventStore.
            </summary>
    </member>
    <member name="M:NEventStore.ExtensionMethods.FormatWith(System.String,System.Object[])">
      <summary>
                Formats the string provided using the values specified.
            </summary>
      <param name="format">The string to be formated.</param>
      <param name="values">The values to be embedded into the string.</param>
      <returns>The formatted string.</returns>
    </member>
    <member name="T:NEventStore.Conversion.IUpconvertEvents`2">
      <summary>
                Provides the ability to upconvert an event from one type to another.
            </summary>
      <typeparam name="TSource">The source event type from which to convert.</typeparam>
      <typeparam name="TTarget">The target event type.</typeparam>
    </member>
    <member name="M:NEventStore.Conversion.IUpconvertEvents`2.Convert(`0)">
      <summary>
                Converts an event from one type to another.
            </summary>
      <param name="sourceEvent">The event to be converted.</param>
      <returns>The converted event.</returns>
    </member>
    <member name="T:NEventStore.ICheckpoint">
      <summary>
            Represents a storage level checkpoint to order commits.
            </summary>
    </member>
    <member name="T:NEventStore.ICommit">
      <summary>
                Represents a series of events which have been fully committed as a single unit and which apply to the stream indicated.
            </summary>
    </member>
    <member name="P:NEventStore.ICommit.BucketId">
      <summary>
                Gets the value which identifies bucket to which the the stream and the the commit belongs.
            </summary>
    </member>
    <member name="P:NEventStore.ICommit.StreamId">
      <summary>
                Gets the value which uniquely identifies the stream to which the commit belongs.
            </summary>
    </member>
    <member name="P:NEventStore.ICommit.StreamRevision">
      <summary>
                Gets the value which indicates the revision of the most recent event in the stream to which this commit applies.
            </summary>
    </member>
    <member name="P:NEventStore.ICommit.CommitId">
      <summary>
                Gets the value which uniquely identifies the commit within the stream.
            </summary>
    </member>
    <member name="P:NEventStore.ICommit.CommitSequence">
      <summary>
                Gets the value which indicates the sequence (or position) in the stream to which this commit applies.
            </summary>
    </member>
    <member name="P:NEventStore.ICommit.CommitStamp">
      <summary>
                Gets the point in time at which the commit was persisted.
            </summary>
    </member>
    <member name="P:NEventStore.ICommit.Headers">
      <summary>
                Gets the metadata which provides additional, unstructured information about this commit.
            </summary>
    </member>
    <member name="P:NEventStore.ICommit.Events">
      <summary>
                Gets the collection of event messages to be committed as a single unit.
            </summary>
    </member>
    <member name="P:NEventStore.ICommit.CheckpointToken">
      <summary>
            The checkpoint that represents the storage level order.
            </summary>
    </member>
    <member name="T:NEventStore.ISnapshot">
      <summary>
                Represents a materialized view of a stream at specific revision.
            </summary>
    </member>
    <member name="P:NEventStore.ISnapshot.BucketId">
      <summary>
            Gets the value which uniquely identifies the bucket to which the snapshot applies.
            </summary>
    </member>
    <member name="P:NEventStore.ISnapshot.StreamId">
      <summary>
                Gets the value which uniquely identifies the stream to which the snapshot applies.
            </summary>
    </member>
    <member name="P:NEventStore.ISnapshot.StreamRevision">
      <summary>
                Gets the position at which the snapshot applies.
            </summary>
    </member>
    <member name="P:NEventStore.ISnapshot.Payload">
      <summary>
                Gets the snapshot or materialized view of the stream at the revision indicated.
            </summary>
    </member>
    <member name="T:NEventStore.Logging.ILog">
      <summary>
                Indicates the ability to log diagnostic information.
            </summary>
      <remarks>
                Object instances which implement this interface must be designed to be multi-thread safe.
            </remarks>
    </member>
    <member name="M:NEventStore.Logging.ILog.Verbose(System.String,System.Object[])">
      <summary>
                Logs the most detailed level of diagnostic information.
            </summary>
      <param name="message">The diagnostic message to be logged.</param>
      <param name="values">All parameter to be formatted into the message, if any.</param>
    </member>
    <member name="M:NEventStore.Logging.ILog.Debug(System.String,System.Object[])">
      <summary>
                Logs the debug-level diagnostic information.
            </summary>
      <param name="message">The diagnostic message to be logged.</param>
      <param name="values">All parameter to be formatted into the message, if any.</param>
    </member>
    <member name="M:NEventStore.Logging.ILog.Info(System.String,System.Object[])">
      <summary>
                Logs important runtime diagnostic information.
            </summary>
      <param name="message">The diagnostic message to be logged.</param>
      <param name="values">All parameter to be formatted into the message, if any.</param>
    </member>
    <member name="M:NEventStore.Logging.ILog.Warn(System.String,System.Object[])">
      <summary>
                Logs diagnostic issues to which attention should be paid.
            </summary>
      <param name="message">The diagnostic message to be logged.</param>
      <param name="values">All parameter to be formatted into the message, if any.</param>
    </member>
    <member name="M:NEventStore.Logging.ILog.Error(System.String,System.Object[])">
      <summary>
                Logs application and infrastructure-level errors.
            </summary>
      <param name="message">The diagnostic message to be logged.</param>
      <param name="values">All parameter to be formatted into the message, if any.</param>
    </member>
    <member name="M:NEventStore.Logging.ILog.Fatal(System.String,System.Object[])">
      <summary>
                Logs fatal errors which result in process termination.
            </summary>
      <param name="message">The diagnostic message to be logged.</param>
      <param name="values">All parameter to be formatted into the message, if any.</param>
    </member>
    <member name="T:NEventStore.Logging.LogFactory">
      <summary>
                Provides the ability to get a new instance of the configured logger.
            </summary>
    </member>
    <member name="P:NEventStore.Logging.LogFactory.BuildLogger">
      <summary>
                Gets or sets the log builder of the configured logger.  This should be invoked to return a new logging instance.
            </summary>
    </member>
    <member name="T:NEventStore.Conversion.MultipleConvertersFoundException">
      <summary>
                Represents the failure that occurs when there are two or more event converters created for the same source type.
            </summary>
    </member>
    <member name="M:NEventStore.Conversion.MultipleConvertersFoundException.#ctor">
      <summary>
                Initializes a new instance of the MultipleConvertersFoundException class.
            </summary>
    </member>
    <member name="M:NEventStore.Conversion.MultipleConvertersFoundException.#ctor(System.String)">
      <summary>
                Initializes a new instance of the MultipleConvertersFoundException class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:NEventStore.Conversion.MultipleConvertersFoundException.#ctor(System.String,System.Exception)">
      <summary>
                Initializes a new instance of the MultipleConvertersFoundException class.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:NEventStore.Conversion.MultipleConvertersFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                Initializes a new instance of the MultipleConvertersFoundException class.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="T:NEventStore.Messages">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:NEventStore.Messages.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:NEventStore.Messages.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:NEventStore.Messages.AddingWireupCallback">
      <summary>
              Looks up a localized string similar to Adding wireup registration callback..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.AddingWireupRegistration">
      <summary>
              Looks up a localized string similar to Adding wireup registration for an object instance of type '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.AsyncDispatchSchedulerRegistered">
      <summary>
              Looks up a localized string similar to Configuring the store to dispatch messages asynchronously..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.AttemptingToResolveInstance">
      <summary>
              Looks up a localized string similar to Attempting to resolve existing instance..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.AutoDetectDialect">
      <summary>
              Looks up a localized string similar to Configuring SQL engine to auto-detect dialect..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.BuildingAndStoringNewInstance">
      <summary>
              Looks up a localized string similar to Building (and storing) new instance for later calls..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.BuildingEngine">
      <summary>
              Looks up a localized string similar to Building the persistence engine..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.BuildingNewInstance">
      <summary>
              Looks up a localized string similar to Building new instance..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.ConfiguringCompression">
      <summary>
              Looks up a localized string similar to Configuring serializer to compress the serialized payload..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.ConfiguringEncryption">
      <summary>
              Looks up a localized string similar to Configuring serializer to encrypt the serialized payload..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.ConfiguringEngineEnlistment">
      <summary>
              Looks up a localized string similar to Configuring persistence engine to enlist in ambient transactions using TransactionScope..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.ConfiguringEngineInitialization">
      <summary>
              Looks up a localized string similar to Configuring persistence engine to initialize..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.ConfiguringEnginePerformanceTracking">
      <summary>
              Looks up a localized string similar to Configuring persistence engine to track performance.
            </summary>
    </member>
    <member name="P:NEventStore.Messages.ConfiguringInstancePerCall">
      <summary>
              Looks up a localized string similar to Registration configured to resolve a new instance per call..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.ConnectionFactorySpecified">
      <summary>
              Looks up a localized string similar to Using SQL connection factory of type '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.DialectSpecified">
      <summary>
              Looks up a localized string similar to Registering SQL dialect of type '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.DispatcherRegistered">
      <summary>
              Looks up a localized string similar to Registering dispatcher of type '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.EventUpconverterRegistered">
      <summary>
              Looks up a localized string similar to Configuring the store to upconvert events when fetched..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.EventUpconvertersLoadedFrom">
      <summary>
              Looks up a localized string similar to Will scan for event upconverters from the following assemblies: '{0}'.
            </summary>
    </member>
    <member name="P:NEventStore.Messages.FailedToCompareCheckpoint">
      <summary>
              Looks up a localized string similar to Cannot only compare {0} with {1}..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.InitializingEngine">
      <summary>
              Looks up a localized string similar to Initializing the configured persistence engine..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.InstanceCannotBeNull">
      <summary>
              Looks up a localized string similar to The instance provided cannot be null..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.PagingSpecified">
      <summary>
              Looks up a localized string similar to Persistence engine configured to page every '{0}' records..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.RegisteringPersistenceEngine">
      <summary>
              Looks up a localized string similar to Registering persistence engine of type '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.RegisteringServiceInstance">
      <summary>
              Looks up a localized string similar to Registering wireup instance for service of type '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.RegisteringWireupCallback">
      <summary>
              Looks up a localized string similar to Registering wireup resolver for service of type '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.ResolvingInstance">
      <summary>
              Looks up a localized string similar to Resolving instance..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.ResolvingService">
      <summary>
              Looks up a localized string similar to Attempting to resolve instance for service of type '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.SchedulerNotStarted">
      <summary>
              Looks up a localized string similar to Scheduler not started..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.StreamIdHasherSpecified">
      <summary>
              Looks up a localized string similar to Registering stream ID hasher of type '{0}'.
            </summary>
    </member>
    <member name="P:NEventStore.Messages.SyncDispatchSchedulerRegistered">
      <summary>
              Looks up a localized string similar to Configuring the store to dispatch messages synchronously..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.SynchronousDispatcherTwoPhaseCommits">
      <summary>
              Looks up a localized string similar to Only the synchronous dispatcher can enlist in two-phase commits..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.TypeMustBeInterface">
      <summary>
              Looks up a localized string similar to The type provided must be registered as an interface rather than as a concrete type, e.g. "container.Register&lt;IDispatchCommits&gt;(instance);"..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.UnableToResolve">
      <summary>
              Looks up a localized string similar to Unable to resolve requested instance of type '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.WrappingSerializerEncryption">
      <summary>
              Looks up a localized string similar to Wrapping serializer of type '{0}' in RijndaelSerializer..
            </summary>
    </member>
    <member name="P:NEventStore.Messages.WrappingSerializerGZip">
      <summary>
              Looks up a localized string similar to Wrapping serializer of type '{0}' in GZipSerializer..
            </summary>
    </member>
    <member name="T:NEventStore.IStoreEvents">
      <summary>
                Indicates the ability to store and retreive a stream of events.
            </summary>
      <remarks>
                Instances of this class must be designed to be multi-thread safe such that they can be shared between threads.
            </remarks>
    </member>
    <member name="M:NEventStore.IStoreEvents.CreateStream(System.String,System.String)">
      <summary>
                Creates a new stream.
            </summary>
      <param name="bucketId">The value which uniquely identifies bucket the stream belongs to.</param>
      <param name="streamId">The value which uniquely identifies the stream within the bucket to be created.</param>
      <returns>An empty stream.</returns>
    </member>
    <member name="M:NEventStore.IStoreEvents.OpenStream(System.String,System.String,System.Int32,System.Int32)">
      <summary>
                Reads the stream indicated from the minimum revision specified up to the maximum revision specified or creates
                an empty stream if no commits are found and a minimum revision of zero is provided.
            </summary>
      <param name="bucketId">The value which uniquely identifies bucket the stream belongs to.</param>
      <param name="streamId">The value which uniquely identifies the stream in the bucket from which the events will be read.</param>
      <param name="minRevision">The minimum revision of the stream to be read.</param>
      <param name="maxRevision">The maximum revision of the stream to be read.</param>
      <returns>A series of committed events represented as a stream.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
      <exception cref="T:NEventStore.StreamNotFoundException" />
    </member>
    <member name="M:NEventStore.IStoreEvents.OpenStream(NEventStore.ISnapshot,System.Int32)">
      <summary>
                Reads the stream indicated from the point of the snapshot forward until the maximum revision specified.
            </summary>
      <param name="snapshot">The snapshot of the stream to be read.</param>
      <param name="maxRevision">The maximum revision of the stream to be read.</param>
      <returns>A series of committed events represented as a stream.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="M:NEventStore.IStoreEvents.StartDispatchScheduler">
      <summary>
               Starts the dispatch scheduler. If the dispatch scheduler is set to startup automatically, this will not have any affect.
            </summary>
    </member>
    <member name="P:NEventStore.IStoreEvents.Advanced">
      <summary>
                Gets a reference to the underlying persistence engine which allows direct access to persistence operations.
            </summary>
    </member>
    <member name="T:NEventStore.IEventStream">
      <summary>
                Indicates the ability to track a series of events and commit them to durable storage.
            </summary>
      <remarks>
                Instances of this class are single threaded and should not be shared between threads.
            </remarks>
    </member>
    <member name="M:NEventStore.IEventStream.Add(NEventStore.EventMessage)">
      <summary>
                Adds the event messages provided to the session to be tracked.
            </summary>
      <param name="uncommittedEvent">The event to be tracked.</param>
    </member>
    <member name="M:NEventStore.IEventStream.CommitChanges(System.Guid)">
      <summary>
                Commits the changes to durable storage.
            </summary>
      <param name="commitId">The value which uniquely identifies the commit.</param>
      <exception cref="T:NEventStore.DuplicateCommitException" />
      <exception cref="T:NEventStore.ConcurrencyException" />
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="M:NEventStore.IEventStream.ClearChanges">
      <summary>
                Clears the uncommitted changes.
            </summary>
    </member>
    <member name="P:NEventStore.IEventStream.StreamId">
      <summary>
                Gets the value which uniquely identifies the stream to which the stream belongs.
            </summary>
    </member>
    <member name="P:NEventStore.IEventStream.StreamRevision">
      <summary>
                Gets the value which indiciates the most recent committed revision of event stream.
            </summary>
    </member>
    <member name="P:NEventStore.IEventStream.CommitSequence">
      <summary>
                Gets the value which indicates the most recent committed sequence identifier of the event stream.
            </summary>
    </member>
    <member name="P:NEventStore.IEventStream.CommittedEvents">
      <summary>
                Gets the collection of events which have been successfully persisted to durable storage.
            </summary>
    </member>
    <member name="P:NEventStore.IEventStream.CommittedHeaders">
      <summary>
                Gets the collection of committed headers associated with the stream.
            </summary>
    </member>
    <member name="P:NEventStore.IEventStream.UncommittedEvents">
      <summary>
                Gets the collection of yet-to-be-committed events that have not yet been persisted to durable storage.
            </summary>
    </member>
    <member name="P:NEventStore.IEventStream.UncommittedHeaders">
      <summary>
                Gets the collection of yet-to-be-committed headers associated with the uncommitted events.
            </summary>
    </member>
    <member name="T:NEventStore.OptimisticPipelineHook">
      <summary>
                Tracks the heads of streams to reduce latency by avoiding roundtrips to storage.
            </summary>
    </member>
    <member name="T:NEventStore.Persistence.IPersistenceFactory">
      <summary>
                Indicates the ability to build a ready-to-use persistence engine.
            </summary>
      <remarks>
                Instances of this class must be designed to be multi-thread safe such that they can be shared between threads.
            </remarks>
    </member>
    <member name="M:NEventStore.Persistence.IPersistenceFactory.Build">
      <summary>
                Builds a persistence engine.
            </summary>
      <returns>A ready-to-use persistence engine.</returns>
    </member>
    <member name="T:NEventStore.Persistence.IStreamHead">
      <summary>
                Indicates the most recent information representing the head of a given stream.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.IStreamHead.BucketId">
      <summary>
                Gets the value which uniquely identifies the stream where the last snapshot exceeds the allowed threshold.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.IStreamHead.StreamId">
      <summary>
                Gets the value which uniquely identifies the stream where the last snapshot exceeds the allowed threshold.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.IStreamHead.HeadRevision">
      <summary>
                Gets the value which indicates the revision, length, or number of events committed to the stream.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.IStreamHead.SnapshotRevision">
      <summary>
                Gets the value which indicates the revision at which the last snapshot was taken.
            </summary>
    </member>
    <member name="M:NEventStore.Persistence.PersistStreamsExtensions.GetFrom(NEventStore.Persistence.IPersistStreams,System.DateTime)">
      <summary>
                Gets all commits on or after from the specified starting time from the default bucket.
            </summary>
      <param name="persistStreams">The IPersistStreams instance.</param>
      <param name="start">The point in time at which to start.</param>
      <returns>All commits that have occurred on or after the specified starting time.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="M:NEventStore.Persistence.PersistStreamsExtensions.GetFromTo(NEventStore.Persistence.IPersistStreams,System.DateTime,System.DateTime)">
      <summary>
                Gets all commits on or after from the specified starting time and before the specified end time from the default bucket.
            </summary>
      <param name="persistStreams">The IPersistStreams instance.</param>
      <param name="start">The point in time at which to start.</param>
      <param name="end">The point in time at which to end.</param>
      <returns>All commits that have occurred on or after the specified starting time and before the end time.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
    </member>
    <member name="M:NEventStore.Persistence.PersistStreamsExtensions.DeleteStream(NEventStore.Persistence.IPersistStreams,System.String)">
      <summary>
            Deletes a stream from the default bucket.
            </summary>
      <param name="persistStreams">The IPersistStreams instance.</param>
      <param name="streamId">The stream id to be deleted.</param>
    </member>
    <member name="M:NEventStore.Persistence.PersistStreamsExtensions.GetFromStart(NEventStore.Persistence.IPersistStreams)">
      <summary>
                Gets all commits after from start checkpoint.
            </summary>
      <param name="persistStreams">The IPersistStreams instance.</param>
    </member>
    <member name="T:NEventStore.Persistence.Sql.IStreamIdHasher">
      <summary>
            Defines a method to generate a hash of a stream ID.
            </summary>
    </member>
    <member name="M:NEventStore.Persistence.Sql.IStreamIdHasher.GetHash(System.String)">
      <summary>
            Gets a hash of the stream ID. Hash length must be less than or equal to 40 characters.
            </summary>
      <param name="streamId">The stream ID to be hashed.</param>
      <returns>A hash of the stream Id.</returns>
    </member>
    <member name="T:NEventStore.Persistence.Sql.Messages">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.AddingParameter">
      <summary>
              Looks up a localized string similar to Adding parameter named '{0}' to statement..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.AddingSnapshot">
      <summary>
              Looks up a localized string similar to Adding snapshot to stream '{0}' at position {1}..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.AlreadyDisposed">
      <summary>
              Looks up a localized string similar to Attempt to use storage after it has been disposed..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.AttemptingToCommit">
      <summary>
              Looks up a localized string similar to Attempting to commit {0} events on stream '{1}' at sequence {2} in bucket '{3}'..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.BadConnectionName">
      <summary>
              Looks up a localized string similar to A connection could not be created for the specified named connection..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.BadFactoryResult">
      <summary>
              Looks up a localized string similar to The factory provided was unable to create an object to store..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.BindingParameter">
      <summary>
              Looks up a localized string similar to Binding parameter '{0}' with value: {1}.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.CleaningRootThreadScope">
      <summary>
              Looks up a localized string similar to Cleaning up root threaded scope.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.ClientControlledTransaction">
      <summary>
              Looks up a localized string similar to Command has client-controlled transaction: {0}..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.CommandExecuted">
      <summary>
              Looks up a localized string similar to Command executed, {0} rows affected..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.CommandTextToExecute">
      <summary>
              Looks up a localized string similar to Command text to be executed: {0}.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.CommandThrewException">
      <summary>
              Looks up a localized string similar to Non-query statement threw an exception of type '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.CommitPersisted">
      <summary>
              Looks up a localized string similar to Commit '{0}' persisted successfully..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.ConcurrentWriteDetected">
      <summary>
              Looks up a localized string similar to Concurrent write detected..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.ConfiguringConnections">
      <summary>
              Looks up a localized string similar to Configuring connections: master '{0}'; replica '{1}', shards: {2}..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.ConnectionNotFound">
      <summary>
              Looks up a localized string similar to Could not find connection name '{0}' in the configuration file..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.CreatingCommand">
      <summary>
              Looks up a localized string similar to Creating command..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.DeletingStream">
      <summary>
              Looks up a localized string similar to Deleting stream '{0}' from bucket '{1}'..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.DeserializingCommit">
      <summary>
              Looks up a localized string similar to Deserializing commit from record using serializer of type '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.DeserializingSnapshot">
      <summary>
              Looks up a localized string similar to Deserializing snapshot from data record..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.DiscoveredConnectionProvider">
      <summary>
              Looks up a localized string similar to Discovered DB provider factory settings for '{0}', using '{1}'..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.DiscoveringConnectionSettings">
      <summary>
              Looks up a localized string similar to Discovering connection settings for '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.DisposingRootThreadScopeResources">
      <summary>
              Looks up a localized string similar to Disposing underlying thread-scoped resource..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.DisposingStatement">
      <summary>
              Looks up a localized string similar to Disposing SQL statement resources, including any transactions and connections..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.DisposingThreadScope">
      <summary>
              Looks up a localized string similar to Disposing threaded scope; scope is root: {0}.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.DroppingTables">
      <summary>
              Looks up a localized string similar to Dropping tables..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.DuplicateCommit">
      <summary>
              Looks up a localized string similar to Duplicate commit detected; throwing..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.EnumeratedRowCount">
      <summary>
              Looks up a localized string similar to Enumerated {0} rows, re-querying for next page..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.EnumerationThrewException">
      <summary>
              Looks up a localized string similar to Enumeration of paged results threw exception of type '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.ExceptionSuppressed">
      <summary>
              Looks up a localized string similar to Executed statement threw an exception, but the exception was suppressed..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.ExecutingCommand">
      <summary>
              Looks up a localized string similar to Executing command..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.ExecutingQuery">
      <summary>
              Looks up a localized string similar to Executing query..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.GettingAllCommitsBetween">
      <summary>
              Looks up a localized string similar to Getting all commits for stream '{0}' between revisions '{1}' and '{2}'..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.GettingAllCommitsFrom">
      <summary>
              Looks up a localized string similar to Getting all commits from '{0}' forward from bucket '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.GettingAllCommitsFromCheckpoint">
      <summary>
              Looks up a localized string similar to Getting all commits from checkpoint '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.GettingAllCommitsFromTo">
      <summary>
              Looks up a localized string similar to Getting all commits from '{0}' to '{1}'..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.GettingRevision">
      <summary>
              Looks up a localized string similar to Getting snapshot for stream '{0}' on or before revision {1}..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.GettingStreamsToSnapshot">
      <summary>
              Looks up a localized string similar to Getting a list of streams to snapshot..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.GettingUndispatchedCommits">
      <summary>
              Looks up a localized string similar to Getting the list of all undispatched commits..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.InitializingStorage">
      <summary>
              Looks up a localized string similar to Initializing storage engine..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.MarkingCommitAsDispatched">
      <summary>
              Looks up a localized string similar to Marking commit '{0}' as dispatched..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.MaxPageSize">
      <summary>
              Looks up a localized string similar to Executing query with max page size of {0}..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.MissingConnectionString">
      <summary>
              Looks up a localized string similar to Could not find the required attribute 'connection string' on the connection name '{0}' in the configuration file..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.MissingProviderName">
      <summary>
              Looks up a localized string similar to Could not find the required attribute 'providerName' on the connection name '{0}' in the configuration file..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.ObjectAlreadyDisposed">
      <summary>
              Looks up a localized string similar to The object has been disposed and cannot be used..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.OpenFailed">
      <summary>
              Looks up a localized string similar to Unable to open connection '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.OpeningConnection">
      <summary>
              Looks up a localized string similar to Opening connection '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.OpeningMasterConnection">
      <summary>
              Looks up a localized string similar to Opening master connection '{0}'.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.OpeningThreadScope">
      <summary>
              Looks up a localized string similar to Opening new threaded scope for key '{0}'; scope is root: {1}..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.PurgingBucket">
      <summary>
              Looks up a localized string similar to Purging all stored data for bucket '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.PurgingStorage">
      <summary>
              Looks up a localized string similar to Purging all stored data..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.QueryCompleted">
      <summary>
              Looks up a localized string similar to Enumeration of result set completed, completing associated transaction scope..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.RecoverableExceptionCompletesScope">
      <summary>
              Looks up a localized string similar to Exception is recoverable, completing scope..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.ShuttingDownPersistence">
      <summary>
              Looks up a localized string similar to Shutting down persistence..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.StorageThrewException">
      <summary>
              Looks up a localized string similar to Storage threw exception of type '{0}', wrapping and re-throwing..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.StreamIdHashIsNullEmptyOrWhiteSpace">
      <summary>
              Looks up a localized string similar to The Stream ID hash function returned is null, empty or whitespace..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.StreamIdHashTooLong">
      <summary>
              Looks up a localized string similar to The Stream ID hash function returned as string of invalid length. The StreamId supplied was '{0}'. The hash was '{1}', whose length is {2}. The maxium length allowed is {3}..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.StreamIdIsNullEmptyOrWhiteSpace">
      <summary>
              Looks up a localized string similar to streamId is null, empty, or whitespace..
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.Messages.UsingScope">
      <summary>
              Looks up a localized string similar to Participating in connection with ambient transaction scope of .
            </summary>
    </member>
    <member name="T:NEventStore.Persistence.Sql.SqlDialects.CommonSqlStatements">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.CommonSqlStatements.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.CommonSqlStatements.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.CommonSqlStatements.DeleteStream">
      <summary>
               Looks up a localized string similar to DELETE FROM Snapshots WHERE BucketId =@BucketId AND StreamId = @StreamId;
            DELETE FROM Commits WHERE BucketId = @BucketId AND StreamId = @StreamId;.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.CommonSqlStatements.DropTables">
      <summary>
               Looks up a localized string similar to DROP TABLE Snapshots;
            DROP TABLE Commits;.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.CommonSqlStatements.DuplicateCommit">
      <summary>
              Looks up a localized string similar to SELECT COUNT(*)
             FROM Commits
            WHERE BucketId = @BucketId 
              AND StreamId = @StreamId
              AND CommitSequence = @CommitSequence
              AND CommitId = @CommitId;.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.CommonSqlStatements.GetCommitsFromCheckpoint">
      <summary>
               Looks up a localized string similar to SELECT BucketId, StreamId, StreamIdOriginal, StreamRevision, CommitId, CommitSequence, CommitStamp, CheckpointNumber, Headers, Payload
            FROM Commits
            WHERE  CheckpointNumber &gt; @CheckpointNumber
            ORDER BY CheckpointNumber
             LIMIT @Limit OFFSET @Skip;.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.CommonSqlStatements.GetCommitsFromInstant">
      <summary>
              Looks up a localized string similar to SELECT BucketId, StreamId, StreamIdOriginal, StreamRevision, CommitId, CommitSequence, CommitStamp, CheckpointNumber, Headers, Payload
             FROM Commits
            WHERE BucketId = @BucketId AND CommitStamp &gt;= @CommitStamp
            ORDER BY CommitStamp, StreamId, CommitSequence
            LIMIT @Limit OFFSET @Skip;.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.CommonSqlStatements.GetCommitsFromStartingRevision">
      <summary>
              Looks up a localized string similar to SELECT BucketId, StreamId, StreamIdOriginal, StreamRevision, CommitId, CommitSequence, CommitStamp,  CheckpointNumber, Headers, Payload
             FROM Commits
            WHERE BucketId = @BucketId
              AND StreamId = @StreamId
              AND StreamRevision &gt;= @StreamRevision
              AND (StreamRevision - Items) &lt; @MaxStreamRevision
              AND CommitSequence &gt; @CommitSequence
            ORDER BY CommitSequence
            LIMIT @Limit;.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.CommonSqlStatements.GetCommitsFromToInstant">
      <summary>
              Looks up a localized string similar to SELECT BucketId, StreamId, StreamIdOriginal, StreamRevision, CommitId, CommitSequence, CommitStamp, CheckpointNumber, Headers, Payload
             FROM Commits
            WHERE BucketId = @BucketId
              AND CommitStamp &gt;= @CommitStampStart
              AND CommitStamp &lt; @CommitStampEnd
            ORDER BY CommitStamp, StreamId, CommitSequence
            LIMIT @Limit OFFSET @Skip;.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.CommonSqlStatements.GetSnapshot">
      <summary>
              Looks up a localized string similar to SELECT *
             FROM Snapshots
            WHERE BucketId = @BucketId
              AND StreamId = @StreamId
              AND StreamRevision &lt;= @StreamRevision
            ORDER BY StreamRevision DESC
            LIMIT 1;.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.CommonSqlStatements.GetStreamsRequiringSnapshots">
      <summary>
               Looks up a localized string similar to SELECT C.BucketId, C.StreamId, C.StreamIdOriginal, MAX(C.StreamRevision) AS StreamRevision, MAX(COALESCE(S.StreamRevision, 0)) AS SnapshotRevision
              FROM Commits AS C
             LEFT OUTER JOIN Snapshots AS S
                ON C.BucketId = @BucketId
               AND C.StreamId = S.StreamId
               AND C.StreamRevision &gt;= S.StreamRevision
             GROUP BY C.StreamId, C.BucketId, C.StreamIdOriginal
            HAVING MAX(C.StreamRevision) &gt;= MAX(COALESCE(S.StreamRevision, 0)) + @Threshold
             ORDER BY C.StreamId
             LIMIT @Limit;.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.CommonSqlStatements.GetUndispatchedCommits">
      <summary>
              Looks up a localized string similar to SELECT BucketId, StreamId, StreamIdOriginal, StreamRevision, CommitId, CommitSequence, CommitStamp, CheckpointNumber, Headers, Payload
             FROM Commits
            WHERE Dispatched = 0
            ORDER BY CheckpointNumber
            LIMIT @Limit OFFSET @Skip;.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.CommonSqlStatements.MarkCommitAsDispatched">
      <summary>
              Looks up a localized string similar to UPDATE Commits
              SET Dispatched = 1
            WHERE BucketId = @BucketId
              AND StreamId = @StreamId
              AND CommitSequence = @CommitSequence;.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.CommonSqlStatements.PurgeBucket">
      <summary>
               Looks up a localized string similar to DELETE FROM Snapshots WHERE BucketId = @BucketId;
            DELETE FROM Commits WHERE BucketId = @BucketId;.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.CommonSqlStatements.PurgeStorage">
      <summary>
               Looks up a localized string similar to DELETE FROM Snapshots;
            DELETE FROM Commits;.
             </summary>
    </member>
    <member name="T:NEventStore.Persistence.Sql.SqlDialects.MsSqlStatements">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.MsSqlStatements.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.MsSqlStatements.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.MsSqlStatements.InitializeStorage">
      <summary>
               Looks up a localized string similar to CREATE TABLE [dbo].[Commits]
            (
                   [BucketId] [varchar](40) NOT NULL,
                   [StreamId] [char](40) NOT NULL,
                   [StreamIdOriginal] [nvarchar](1000) NOT NULL,
                   [StreamRevision] [int] NOT NULL CHECK ([StreamRevision] &gt; 0),
                   [Items] [tinyint] NOT NULL CHECK ([Items] &gt; 0),
                   [CommitId] [uniqueidentifier] NOT NULL CHECK ([CommitId] != 0x0),
                   [CommitSequence] [int] NOT NULL CHECK ([CommitSequence] &gt; 0),
                   [CheckpointNumber] [bigint] IDENTITY NOT NULL,
                   [Dispatche [rest of string was truncated]";.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.MsSqlStatements.PagedQueryFormat">
      <summary>
               Looks up a localized string similar to WITH [cte] AS
               ( {0}, ROW_NUMBER() OVER ({1}) AS [row] {2} )
            
            SELECT *
              FROM [cte]
             WHERE [row] BETWEEN @Skip + 1
                             AND @Limit + @Skip;.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.MsSqlStatements.PersistCommits">
      <summary>
               Looks up a localized string similar to INSERT
              INTO Commits
                 ( BucketId, StreamId, StreamIdOriginal, CommitId, CommitSequence, StreamRevision, Items, CommitStamp, Headers, Payload )
            OUTPUT INSERTED.CheckpointNumber
            VALUES (@BucketId, @StreamId, @StreamIdOriginal, @CommitId, @CommitSequence, @StreamRevision, @Items, @CommitStamp, @Headers, @Payload);.
             </summary>
    </member>
    <member name="T:NEventStore.Persistence.Sql.SqlDialects.MySqlStatements">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.MySqlStatements.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.MySqlStatements.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.MySqlStatements.InitializeStorage">
      <summary>
               Looks up a localized string similar to CREATE TABLE IF NOT EXISTS Commits
            (
                BucketId varchar(40) charset utf8 NOT NULL,
                StreamId varchar(40) charset utf8 NOT NULL,
                StreamIdOriginal varchar(1000) charset utf8 NOT NULL,
                StreamRevision int NOT NULL CHECK (StreamRevision &gt; 0),
                Items tinyint NOT NULL CHECK (Items &gt; 0),
                CommitId binary(16) NOT NULL CHECK (CommitId != 0),
                CommitSequence int NOT NULL CHECK (CommitSequence &gt; 0),
                CommitStamp bigint NOT NULL,
                CheckpointNumber bigint AUTO_INCREMENT,
                Dispatc [rest of string was truncated]";.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.MySqlStatements.PersistCommit">
      <summary>
               Looks up a localized string similar to INSERT
              INTO Commits
                 ( BucketId, StreamId, StreamIdOriginal, CommitId, CommitSequence, StreamRevision, Items, CommitStamp, Headers, Payload )
            VALUES (@BucketId, @StreamId, @StreamIdOriginal, @CommitId, @CommitSequence, @StreamRevision, @Items, @CommitStamp, @Headers, @Payload);
            SELECT LAST_INSERT_ID();.
             </summary>
    </member>
    <member name="T:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.AddCommitSequence">
      <summary>
              Looks up a localized string similar to AND CommitSequence &gt; :CommitSequence.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.AppendSnapshotToCommit">
      <summary>
               Looks up a localized string similar to /*AppendSnapshotToCommit*/
            INSERT INTO Snapshots   
              (BucketId, StreamId, StreamRevision, Payload)  
            SELECT :BucketId, :StreamId, :StreamRevision, :Payload FROM SYS.DUAL 
            WHERE	EXISTS
            	(
                SELECT * FROM COMMITS 
                WHERE	BucketId = :BucketId AND StreamId = :StreamId
                  AND	(StreamRevision - Items) &lt;= :StreamRevision
            	)
             AND NOT EXISTS
            	(
                SELECT * FROM SNAPSHOTS 
                WHERE	BucketId = :BucketId AND StreamId = :StreamId
                  And	Streamrevision = :Streamrevision
            	).
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.DeleteStream">
      <summary>
               Looks up a localized string similar to BEGIN
               DELETE FROM Snapshots WHERE BucketId =:BucketId AND StreamId = :StreamId;
               DELETE FROM Commits WHERE BucketId = :BucketId AND StreamId = :StreamId;
            END;.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.DropTables">
      <summary>
               Looks up a localized string similar to BEGIN
              EXECUTE IMMEDIATE ('DROP TABLE Snapshots PURGE');
              EXECUTE IMMEDIATE ('DROP TABLE Commits PURGE');
              EXECUTE IMMEDIATE ('DROP SEQUENCE Commit_CheckpointNumber');
            END;.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.DuplicateCommit">
      <summary>
               Looks up a localized string similar to /*DuplicateCommit*/
            SELECT CAST( COUNT(*) AS NUMBER(8,0) )
            FROM Commits 
            WHERE	(
              BucketId = :BucketId AND StreamId = :StreamId
              AND CommitSequence = :CommitSequence
              AND CommitId = :CommitId
            ).
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.GetCommitsFromInstant">
      <summary>
               Looks up a localized string similar to /*GetCommitsFromInstant*/
            SELECT BucketId, StreamId, StreamIdOriginal, StreamRevision, CommitId, CommitSequence, CommitStamp, CheckpointNumber, Headers, Payload
            FROM Commits 
            WHERE BucketId = :BucketId AND CommitStamp &gt;= :CommitStamp
            ORDER BY CommitStamp, StreamId, CommitSequence.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.GetCommitsFromStartingRevision">
      <summary>
               Looks up a localized string similar to /*GetCommitsFromStartingRevision*/
            SELECT BucketId, StreamId, StreamIdOriginal, StreamRevision, CommitId, CommitSequence, CommitStamp, CheckpointNumber, Headers, Payload
            FROM Commits
            WHERE BucketId = :BucketId AND StreamId = :StreamId
               AND StreamRevision &gt;= :StreamRevision
               AND (StreamRevision - Items) &lt; :MaxStreamRevision
               AND CommitSequence &gt; :CommitSequence
            ORDER BY CommitSequence.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.GetCommitsSinceCheckpoint">
      <summary>
               Looks up a localized string similar to /*GetCommitsFromInstant*/
            SELECT BucketId, StreamId, StreamIdOriginal, StreamRevision, CommitId, CommitSequence, CommitStamp, CheckpointNumber, Headers, Payload
            FROM Commits 
            WHERE  CheckpointNumber &gt; :CheckpointNumber
            ORDER BY CheckpointNumber
            WHERE ROWNUM &lt;= :Limit;.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.GetSnapshot">
      <summary>
               Looks up a localized string similar to /*GetSnapshot*/
            SELECT *
            FROM  Snapshots 
            WHERE BucketId = :BucketId AND StreamId = :StreamId
             AND	StreamRevision  &lt;= :StreamRevision
             AND	ROWNUM &lt;= (:Skip + 1) AND ROWNUM  &gt; :Skip
            ORDER BY StreamRevision DESC.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.GetStreamsRequiringSnapshots">
      <summary>
               Looks up a localized string similar to /*GetStreamsRequiringSnapshots*/
            SELECT BucketId, StreamId, StreamIdOriginal, StreamRevision, SnapshotRevision
            FROM (
              SELECT C.BucketId, C.StreamId, C.StreamIdOriginal, MAX(C.StreamRevision) AS StreamRevision, MAX(COALESCE(S.StreamRevision, 0)) AS SnapshotRevision
              FROM  Commits C LEFT OUTER JOIN Snapshots S
                ON C.BucketId = :BucketId AND C.StreamId = S.StreamId AND C.StreamRevision &gt;= S.StreamRevision
              GROUP BY C.StreamId, C.BucketId, C.StreamIdOriginal
              HAVING MAX(C.StreamRevision) &gt;= MAX(C [rest of string was truncated]";.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.InitializeStorage">
      <summary>
               Looks up a localized string similar to /*InitializeStorage*/
            DECLARE table_count INTEGER;
            BEGIN 
              SELECT COUNT (OBJECT_ID) INTO table_count FROM USER_OBJECTS WHERE EXISTS (
                SELECT OBJECT_NAME FROM USER_OBJECTS WHERE (OBJECT_NAME = 'COMMITS' AND OBJECT_TYPE = 'TABLE'));
            IF table_count = 0 THEN DBMS_OUTPUT.PUT_LINE ('Creating the Commits table');
              EXECUTE IMMEDIATE (
               'CREATE TABLE Commits(
                  BucketId varchar2(40) NOT NULL,
                  StreamId char(40) NOT NULL,
                  StreamIdOriginal nvarchar2(1000) NOT NULL,
                  StreamRevisio [rest of string was truncated]";.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.LimitedQueryFormat">
      <summary>
               Looks up a localized string similar to /*LimitedQueryFormat*/
            SELECT OuterQuery.* FROM (
              SELECT InnerQuery.*, ROWNUM AS ROW_NUMBER_VAL FROM (
                {0}    
              ) InnerQuery
            ) OuterQuery
            WHERE ROW_NUMBER_VAL &gt; :Skip AND ROW_NUMBER_VAL &lt;= (:Limit + :Skip).
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.MarkCommitAsDispatched">
      <summary>
               Looks up a localized string similar to /*MarkCommitAsDispatched*/
            UPDATE Commits   
            SET Dispatched = 1
            WHERE CAST(BucketId AS NVARCHAR2(40)) = :BucketId
             AND StreamId  = :StreamId
             AND CommitSequence  = :CommitSequence.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.PagedQueryFormat">
      <summary>
               Looks up a localized string similar to /*PagedQueryFormat*/
            SELECT *
            FROM ( {0},
                   ROW_NUMBER() OVER({1}) AS ROW_NUMBER_VAL
                   {2}
            ) PagedQueryFormat
            WHERE ROW_NUMBER_VAL &gt; :Skip AND ROW_NUMBER_VAL &lt;= (:Limit + :Skip).
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.PersistCommit">
      <summary>
               Looks up a localized string similar to /*PersistCommit*/
            DECLARE
               checkPointNumber NUMBER;
            BEGIN
            INSERT INTO Commits (  
                BucketId,
                StreamId, 
                StreamIdOriginal,
                CommitId, 
                CommitSequence, 
                StreamRevision, 
                Items, 
                CommitStamp, 
                Headers, 
                Payload
            )  
            VALUES ( 
                :BucketId,
                :StreamId, 
                :StreamIdOriginal, 
                :CommitId, 
                :CommitSequence, 
                :StreamRevision, 
                :Items, 
                :CommitStamp, 
                :Headers, 
                :Payload
            )
            RETURNING CheckpointNumber INTO checkPointNum [rest of string was truncated]";.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.PurgeBucket">
      <summary>
               Looks up a localized string similar to /*PurgeStorage*/
            DECLARE row_count INTEGER;
            BEGIN
              SELECT COUNT(1) INTO row_count FROM Snapshots WHERE BucketId = :BucketId;
              IF row_count != 0 THEN
                EXECUTE IMMEDIATE ('TRUNCATE TABLE Snapshots');
              ELSE
                DBMS_OUTPUT.PUT_LINE('The Snapshots table has already been purged.');
              END IF;
              SELECT COUNT(1) INTO row_count FROM Commits WHERE BucketId = :BucketId;
              IF row_count != 0 THEN
                EXECUTE IMMEDIATE ('TRUNCATE TABLE Commits');
              ELSE
                DBMS_OUTPUT.PUT_LINE('The Commits table has a [rest of string was truncated]";.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.OracleNativeStatements.PurgeStorage">
      <summary>
               Looks up a localized string similar to /*PurgeStorage*/
            DECLARE row_count INTEGER;
            BEGIN
              SELECT COUNT(1) INTO row_count FROM Snapshots;
              IF row_count != 0 THEN
                EXECUTE IMMEDIATE ('TRUNCATE TABLE Snapshots');
              ELSE
                DBMS_OUTPUT.PUT_LINE('The Snapshots table has already been purged.');
              END IF;
              SELECT COUNT(1) INTO row_count FROM Commits;
              IF row_count != 0 THEN
                EXECUTE IMMEDIATE ('TRUNCATE TABLE Commits');
              ELSE
                DBMS_OUTPUT.PUT_LINE('The Commits table has already been purged.');
              END IF;
              EXCEPTION WHEN OT [rest of string was truncated]";.
             </summary>
    </member>
    <member name="T:NEventStore.Persistence.Sql.SqlDialects.PostgreSqlStatements">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.PostgreSqlStatements.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.PostgreSqlStatements.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.PostgreSqlStatements.InitializeStorage">
      <summary>
               Looks up a localized string similar to CREATE TABLE Commits
            (
                BucketId varchar(40) NOT NULL,
                StreamId char(40) NOT NULL,
                StreamIdOriginal varchar(1000) NOT NULL,
                StreamRevision int NOT NULL CHECK (StreamRevision &gt; 0),
                Items smallint NOT NULL CHECK (Items &gt; 0),
                CommitId uuid NOT NULL,
                CommitSequence int NOT NULL CHECK (CommitSequence &gt; 0),
                CommitStamp timestamp NOT NULL,
                CheckpointNumber SERIAL NOT NULL,
                Dispatched boolean NOT NULL DEFAULT false,
                Headers bytea NULL,
                Payload bytea NOT NU [rest of string was truncated]";.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.PostgreSqlStatements.PersistCommits">
      <summary>
               Looks up a localized string similar to INSERT
              INTO Commits
                 ( BucketId, StreamId, StreamIdOriginal, CommitId, CommitSequence, StreamRevision, Items, CommitStamp, Headers, Payload )
            VALUES (@BucketId, @StreamId, @StreamIdOriginal, @CommitId, @CommitSequence, @StreamRevision, @Items, @CommitStamp, @Headers, @Payload)
            RETURNING CheckpointNumber;.
             </summary>
    </member>
    <member name="T:NEventStore.Persistence.Sql.SqlDialects.SqliteStatements">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.SqliteStatements.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.SqliteStatements.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.SqliteStatements.InitializeStorage">
      <summary>
               Looks up a localized string similar to CREATE TABLE IF NOT EXISTS Commits
            (
                   BucketId varchar(40) NOT NULL,
                   StreamId char(40) NOT NULL,
                   StreamIdOriginal text NOT NULL,
                   StreamRevision int NOT NULL CHECK (StreamRevision &gt; 0),
                   Items int NOT NULL CHECK (Items &gt; 0),
                   CommitId guid NOT NULL CHECK (CommitId != 0),
                   CommitSequence int NOT NULL CHECK (CommitSequence &gt; 0),
                   CommitStamp datetime NOT NULL,
                   CheckpointNumber INTEGER PRIMARY KEY AUTOINCREMENT,
                   Dispatched bit NOT NULL  [rest of string was truncated]";.
             </summary>
    </member>
    <member name="P:NEventStore.Persistence.Sql.SqlDialects.SqliteStatements.PersistCommit">
      <summary>
               Looks up a localized string similar to INSERT INTO Commits (
                BucketId,
                StreamId,
                StreamIdOriginal,
                CommitId,
                CommitSequence,
                StreamRevision,
                Items,
                CommitStamp,
                Headers,
                Payload)
            VALUES (
                @BucketId,
                @StreamId,
                @StreamIdOriginal,
                @CommitId,
                @CommitSequence,
                @StreamRevision,
                @Items,
                @CommitStamp,
                @Headers,
                @Payload);
            SELECT last_insert_rowid();.
             </summary>
    </member>
    <member name="T:NEventStore.Persistence.Sql.UniqueKeyViolationException">
      <summary>
                Indicates that a unique constraint or duplicate key violation occurred.
            </summary>
    </member>
    <member name="M:NEventStore.Persistence.Sql.UniqueKeyViolationException.#ctor">
      <summary>
                Initializes a new instance of the UniqueKeyViolationException class.
            </summary>
    </member>
    <member name="M:NEventStore.Persistence.Sql.UniqueKeyViolationException.#ctor(System.String)">
      <summary>
                Initializes a new instance of the UniqueKeyViolationException class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:NEventStore.Persistence.Sql.UniqueKeyViolationException.#ctor(System.String,System.Exception)">
      <summary>
                Initializes a new instance of the UniqueKeyViolationException class.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The message that is the cause of the current exception.</param>
    </member>
    <member name="M:NEventStore.Persistence.Sql.UniqueKeyViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                Initializes a new instance of the UniqueKeyViolationException class.
            </summary>
      <param name="info">The SerializationInfo that holds the serialized object data of the exception being thrown.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:NEventStore.Persistence.StorageException">
      <summary>
                Represents a general failure of the storage engine or persistence infrastructure.
            </summary>
    </member>
    <member name="M:NEventStore.Persistence.StorageException.#ctor">
      <summary>
                Initializes a new instance of the StorageException class.
            </summary>
    </member>
    <member name="M:NEventStore.Persistence.StorageException.#ctor(System.String)">
      <summary>
                Initializes a new instance of the StorageException class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:NEventStore.Persistence.StorageException.#ctor(System.String,System.Exception)">
      <summary>
                Initializes a new instance of the StorageException class.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The message that is the cause of the current exception.</param>
    </member>
    <member name="M:NEventStore.Persistence.StorageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                Initializes a new instance of the StorageException class.
            </summary>
      <param name="info">The SerializationInfo that holds the serialized object data of the exception being thrown.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:NEventStore.Persistence.StorageUnavailableException">
      <summary>
                Indicates that the underlying persistence medium is unavailable or offline.
            </summary>
    </member>
    <member name="M:NEventStore.Persistence.StorageUnavailableException.#ctor">
      <summary>
                Initializes a new instance of the StorageUnavailableException class.
            </summary>
    </member>
    <member name="M:NEventStore.Persistence.StorageUnavailableException.#ctor(System.String)">
      <summary>
                Initializes a new instance of the StorageUnavailableException class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:NEventStore.Persistence.StorageUnavailableException.#ctor(System.String,System.Exception)">
      <summary>
                Initializes a new instance of the StorageUnavailableException class.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The message that is the cause of the current exception.</param>
    </member>
    <member name="M:NEventStore.Persistence.StorageUnavailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                Initializes a new instance of the StorageUnavailableException class.
            </summary>
      <param name="info">The SerializationInfo that holds the serialized object data of the exception being thrown.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:NEventStore.PipelineHookExtensions.OnPurge(NEventStore.IPipelineHook)">
      <summary>
                Invoked when all buckets have been purged.
            </summary>
      <param name="pipelineHook">The pipleine hook.</param>
    </member>
    <member name="T:NEventStore.Resources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:NEventStore.Resources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:NEventStore.Resources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:NEventStore.Resources.AddingCommitsToStream">
      <summary>
              Looks up a localized string similar to Adding commit '{0} with {1} events to stream '{2}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.AddingSnapshot">
      <summary>
              Looks up a localized string similar to Adding a snapshot for stream '{0}' at revision '{1}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.AlreadyDisposed">
      <summary>
              Looks up a localized string similar to The object has already been disposed..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.AppendingUncommittedToStream">
      <summary>
              Looks up a localized string similar to Appending uncommitted event to stream '{0}'.
            </summary>
    </member>
    <member name="P:NEventStore.Resources.AttemptingToCommit">
      <summary>
              Looks up a localized string similar to Attempting to append commit '{0}' to stream '{1}' at position '{2}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.AttemptingToCommitChanges">
      <summary>
              Looks up a localized string similar to Attempting to commit all changes on stream '{0}' to the underlying store..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.BuildingCommitAttempt">
      <summary>
              Looks up a localized string similar to Building a commit attempt '{0}' on stream '{1}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.ClearingUncommittedChanges">
      <summary>
              Looks up a localized string similar to Clearing all uncommitted changes on stream '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.CommitRejectedByPipelineHook">
      <summary>
              Looks up a localized string similar to Pipeline hook of type '{0}' rejected attempt '{1}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.CommittingAttempt">
      <summary>
              Looks up a localized string similar to Committing attempt '{0}' which contains {1} events to the underlying persistence engine..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.ConvertingEvent">
      <summary>
              Looks up a localized string similar to Converting an Event from '{0}' to '{1}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.CreatingStream">
      <summary>
              Looks up a localized string similar to Creating stream '{0}' in bucket '{1}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.DeletingStream">
      <summary>
              Looks up a localized string similar to Deleting stream '{0}' from bucket '{1}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.DispatchingToDevNull">
      <summary>
              Looks up a localized string similar to Dispatching message to /dev/null..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.DisposingEngine">
      <summary>
              Looks up a localized string similar to Disposing engine..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.GettingAllCommitsFromCheckpoint">
      <summary>
              Looks up a localized string similar to Getting all commits since checkpoint '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.GettingAllCommitsFromRevision">
      <summary>
              Looks up a localized string similar to Getting all commits for stream '{0}' between '{1}' and '{2}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.GettingAllCommitsFromTime">
      <summary>
              Looks up a localized string similar to Getting all commits from bucket '{0}' from '{1}' forward..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.GettingAllCommitsFromToTime">
      <summary>
              Looks up a localized string similar to Getting all commits from bucket '{0}' from '{1}' to '{2}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.GettingSnapshotForStream">
      <summary>
              Looks up a localized string similar to Getting the most recent snapshot from bucket '{0}' for stream '{1}' on/since revision '{2}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.GettingStreamsToSnapshot">
      <summary>
              Looks up a localized string similar to Getting the set of all streams to be snapshot from bucket '{0}' which exceed {1} revisions without a snapshot..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.GettingUndispatchedCommits">
      <summary>
              Looks up a localized string similar to Getting undispatched commits from persistence engine..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.IgnoringBeforeRevision">
      <summary>
              Looks up a localized string similar to Ignoring some events on commit '{0}' of stream '{1}' because they starting before revision {2}..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.IgnoringBeyondRevision">
      <summary>
              Looks up a localized string similar to Ignoring some events on commit '{0}' of stream '{1}' because they go beyond revision {2}..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.InitializingEngine">
      <summary>
              Looks up a localized string similar to Initializing engine..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.InitializingPersistence">
      <summary>
              Looks up a localized string similar to Initializing persistence engine..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.InvokingPostCommitPipelineHooks">
      <summary>
              Looks up a localized string similar to Pushing commit '{0}' to post-commit hook of type '{1}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.InvokingPreCommitHooks">
      <summary>
              Looks up a localized string similar to Pushing commit '{0}' to pre-commit hook of type '{1}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.MarkingAsDispatched">
      <summary>
              Looks up a localized string similar to Marking commit '{0}' as dispatched..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.MarkingCommitAsDispatched">
      <summary>
              Looks up a localized string similar to Marking commit '{0}' as dispatched..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.NoChangesToCommit">
      <summary>
              Looks up a localized string similar to There are no outstanding changes to be committed stream '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.NoConflicts">
      <summary>
              Looks up a localized string similar to No other commits have been discovered that conflict for stream '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.NoLongerTrackingStream">
      <summary>
              Looks up a localized string similar to Purging all commits on stream '{0}' from tracking..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.NonPositiveRevisionNumber">
      <summary>
              Looks up a localized string similar to The stream revision must be a positive number..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.NonPositiveSequenceNumber">
      <summary>
              Looks up a localized string similar to The commit sequence must be a positive number..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.OpeningStreamAtRevision">
      <summary>
              Looks up a localized string similar to Opening stream '{0}' from bucket '{1}' between revisions {2} and {3}..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.OpeningStreamWithSnapshot">
      <summary>
              Looks up a localized string similar to Opening stream '{0}' with snapshot at {1} up to revision {2}..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.OptimisticConcurrencyCheck">
      <summary>
              Looks up a localized string similar to Verifying that no other commits have succeed on the stream '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.PersistingCommit">
      <summary>
              Looks up a localized string similar to Pushing attempt '{0}' on stream '{1}' to the underlying store..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.PipelineHookFilteredCommit">
      <summary>
              Looks up a localized string similar to One or more pipeline hooks filtered out the commit..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.PipelineHookSkippedCommit">
      <summary>
              Looks up a localized string similar to Pipeline hook of type '{0}' skipped over commit '{1}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.PurgingStore">
      <summary>
              Looks up a localized string similar to Purging all data from storage..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.ReadOnlyCollection">
      <summary>
              Looks up a localized string similar to The collection is read only and cannot be modified..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.RetrievingUndispatchedCommits">
      <summary>
              Looks up a localized string similar to Retrieving all {0} undispatched commits..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.RevisionTooSmall">
      <summary>
              Looks up a localized string similar to The stream revision must always be greater than or equal to the commit sequence..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.SchedulingDelivery">
      <summary>
              Looks up a localized string similar to Scheduling commit '{0}' for delivery..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.SchedulingDispatch">
      <summary>
              Looks up a localized string similar to Scheduling commit '{0}' to be dispatched..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.ShuttingDownDispatcher">
      <summary>
              Looks up a localized string similar to Shutting down dispatcher..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.ShuttingDownDispatchScheduler">
      <summary>
              Looks up a localized string similar to Shutting down dispatch scheduler..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.ShuttingDownStore">
      <summary>
              Looks up a localized string similar to Shutting down event store..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.StartingDispatchScheduler">
      <summary>
              Looks up a localized string similar to Starting dispatch scheduler..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.TrackingCommit">
      <summary>
              Looks up a localized string similar to Tracking commit {0} on stream '{1}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.TrackingStreams">
      <summary>
              Looks up a localized string similar to Tracking up to {0} streams..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.UnableToDispatch">
      <summary>
              Looks up a localized string similar to Configured dispatcher of type '{0}' was unable to dispatch commit '{1}'..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.UnableToMarkDispatched">
      <summary>
              Looks up a localized string similar to Unable to mark commit '{0}' as dispatched, the underlying storage has already been disposed.
            </summary>
    </member>
    <member name="P:NEventStore.Resources.UnderlyingStreamHasChanged">
      <summary>
              Looks up a localized string similar to The underlying stream '{0}' has changed since the last known commit, refreshing the stream..
            </summary>
    </member>
    <member name="P:NEventStore.Resources.UpdatingStreamHead">
      <summary>
              Looks up a localized string similar to Updating stream head for stream '{0}'..
            </summary>
    </member>
    <member name="T:NEventStore.Serialization.ISerialize">
      <summary>
                Provides the ability to serialize and deserialize an object graph.
            </summary>
      <remarks>
                Instances of this class must be designed to be multi-thread safe such that they can be shared between threads.
            </remarks>
    </member>
    <member name="M:NEventStore.Serialization.ISerialize.Serialize``1(System.IO.Stream,``0)">
      <summary>
                Serializes the object graph provided and writes a serialized representation to the output stream provided.
            </summary>
      <typeparam name="T">The type of object to be serialized</typeparam>
      <param name="output">The stream into which the serialized object graph should be written.</param>
      <param name="graph">The object graph to be serialized.</param>
    </member>
    <member name="M:NEventStore.Serialization.ISerialize.Deserialize``1(System.IO.Stream)">
      <summary>
                Deserializes the stream provided and reconstructs the corresponding object graph.
            </summary>
      <typeparam name="T">The type of object to be deserialized.</typeparam>
      <param name="input">The stream of bytes from which the object will be reconstructed.</param>
      <returns>The reconstructed object.</returns>
    </member>
    <member name="T:NEventStore.Serialization.IDocumentSerializer">
      <summary>
                Provides the ability to serialize an object graph to and from a document.
            </summary>
      <remarks>
                Instances of this class must be designed to be multi-thread safe such that they can be shared between threads.
            </remarks>
    </member>
    <member name="M:NEventStore.Serialization.IDocumentSerializer.Serialize``1(``0)">
      <summary>
                Serializes the object graph provided into a document.
            </summary>
      <typeparam name="T">The type of object to be serialized</typeparam>
      <param name="graph">The object graph to be serialized.</param>
      <returns>The document form of the graph provided.</returns>
    </member>
    <member name="M:NEventStore.Serialization.IDocumentSerializer.Deserialize``1(System.Object)">
      <summary>
                Deserializes the document provided into an object graph.
            </summary>
      <typeparam name="T">The type of object graph.</typeparam>
      <param name="document">The document to be deserialized.</param>
      <returns>An object graph of the specified type.</returns>
    </member>
    <member name="T:NEventStore.Serialization.Messages">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:NEventStore.Serialization.Messages.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:NEventStore.Serialization.Messages.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:NEventStore.Serialization.Messages.DeserializingStream">
      <summary>
              Looks up a localized string similar to Deserializing stream to object of type '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Serialization.Messages.InspectingTextStream">
      <summary>
              Looks up a localized string similar to Inspecting text-based stream contents..
            </summary>
    </member>
    <member name="P:NEventStore.Serialization.Messages.InvalidKeyLength">
      <summary>
              Looks up a localized string similar to The encryption key must be exactly 16 bytes..
            </summary>
    </member>
    <member name="P:NEventStore.Serialization.Messages.RegisteringKnownType">
      <summary>
              Looks up a localized string similar to Registering type '{0}' as a known type..
            </summary>
    </member>
    <member name="P:NEventStore.Serialization.Messages.SerializingGraph">
      <summary>
              Looks up a localized string similar to Serializing object graph of type '{0}'..
            </summary>
    </member>
    <member name="P:NEventStore.Serialization.Messages.TypeIsArray">
      <summary>
              Looks up a localized string similar to Objects of type '{0}' are considered to be an array: '{1}'..
            </summary>
    </member>
    <member name="P:NEventStore.Serialization.Messages.UsingTypedSerializer">
      <summary>
              Looks up a localized string similar to The object to be serialized is of type '{0}'.  Using a typed serializer for the unknown type..
            </summary>
    </member>
    <member name="P:NEventStore.Serialization.Messages.UsingUntypedSerializer">
      <summary>
              Looks up a localized string similar to The object to be serialized is of type '{0}'.  Using an untyped serializer for the known type..
            </summary>
    </member>
    <member name="M:NEventStore.StoreEventsExtensions.CreateStream(NEventStore.IStoreEvents,System.Guid)">
      <summary>
                Creates a new stream.
            </summary>
      <param name="storeEvents">The store events instance.</param>
      <param name="streamId">The value which uniquely identifies the stream to be created.</param>
      <returns>An empty stream.</returns>
    </member>
    <member name="M:NEventStore.StoreEventsExtensions.CreateStream(NEventStore.IStoreEvents,System.String)">
      <summary>
                Creates a new stream.
            </summary>
      <param name="storeEvents">The store events instance.</param>
      <param name="streamId">The value which uniquely identifies the stream to be created.</param>
      <returns>An empty stream.</returns>
    </member>
    <member name="M:NEventStore.StoreEventsExtensions.CreateStream(NEventStore.IStoreEvents,System.String,System.Guid)">
      <summary>
                Creates a new stream.
            </summary>
      <param name="storeEvents">The store events instance.</param>
      <param name="bucketId">The value which uniquely identifies bucket the stream belongs to.</param>
      <param name="streamId">The value which uniquely identifies the stream within the bucket to be created.</param>
      <returns>An empty stream.</returns>
    </member>
    <member name="M:NEventStore.StoreEventsExtensions.OpenStream(NEventStore.IStoreEvents,System.Guid,System.Int32,System.Int32)">
      <summary>
                Reads the stream indicated from the minimum revision specified up to the maximum revision specified or creates
                an empty stream if no commits are found and a minimum revision of zero is provided.
            </summary>
      <param name="storeEvents">The store events instance.</param>
      <param name="streamId">The value which uniquely identifies the stream from which the events will be read.</param>
      <param name="minRevision">The minimum revision of the stream to be read.</param>
      <param name="maxRevision">The maximum revision of the stream to be read.</param>
      <returns>A series of committed events represented as a stream.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
      <exception cref="T:NEventStore.StreamNotFoundException" />
    </member>
    <member name="M:NEventStore.StoreEventsExtensions.OpenStream(NEventStore.IStoreEvents,System.String,System.Int32,System.Int32)">
      <summary>
                Reads the stream indicated from the minimum revision specified up to the maximum revision specified or creates
                an empty stream if no commits are found and a minimum revision of zero is provided.
            </summary>
      <param name="storeEvents">The store events instance.</param>
      <param name="streamId">The value which uniquely identifies the stream from which the events will be read.</param>
      <param name="minRevision">The minimum revision of the stream to be read.</param>
      <param name="maxRevision">The maximum revision of the stream to be read.</param>
      <returns>A series of committed events represented as a stream.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
      <exception cref="T:NEventStore.StreamNotFoundException" />
    </member>
    <member name="M:NEventStore.StoreEventsExtensions.OpenStream(NEventStore.IStoreEvents,System.String,System.Guid,System.Int32,System.Int32)">
      <summary>
                Reads the stream indicated from the minimum revision specified up to the maximum revision specified or creates
                an empty stream if no commits are found and a minimum revision of zero is provided.
            </summary>
      <param name="storeEvents">The store events instance.</param>
      <param name="bucketId">The value which uniquely identifies bucket the stream belongs to.</param>
      <param name="streamId">The value which uniquely identifies the stream within the bucket to be created.</param>
      <param name="minRevision">The minimum revision of the stream to be read.</param>
      <param name="maxRevision">The maximum revision of the stream to be read.</param>
      <returns>A series of committed events represented as a stream.</returns>
      <exception cref="T:NEventStore.Persistence.StorageException" />
      <exception cref="T:NEventStore.Persistence.StorageUnavailableException" />
      <exception cref="T:NEventStore.StreamNotFoundException" />
    </member>
    <member name="T:NEventStore.StreamNotFoundException">
      <summary>
                Represents an attempt to retrieve a nonexistent event stream.
            </summary>
    </member>
    <member name="M:NEventStore.StreamNotFoundException.#ctor">
      <summary>
                Initializes a new instance of the StreamNotFoundException class.
            </summary>
    </member>
    <member name="M:NEventStore.StreamNotFoundException.#ctor(System.String)">
      <summary>
                Initializes a new instance of the StreamNotFoundException class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:NEventStore.StreamNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
                Initializes a new instance of the StreamNotFoundException class.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The message that is the cause of the current exception.</param>
    </member>
    <member name="M:NEventStore.StreamNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                Initializes a new instance of the StreamNotFoundException class.
            </summary>
      <param name="info">The SerializationInfo that holds the serialized object data of the exception being thrown.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:NEventStore.EventMessage">
      <summary>
                Represents a single element in a stream of events.
            </summary>
    </member>
    <member name="M:NEventStore.EventMessage.#ctor">
      <summary>
                Initializes a new instance of the EventMessage class.
            </summary>
    </member>
    <member name="P:NEventStore.EventMessage.Headers">
      <summary>
                Gets the metadata which provides additional, unstructured information about this message.
            </summary>
    </member>
    <member name="P:NEventStore.EventMessage.Body">
      <summary>
                Gets or sets the actual event message body.
            </summary>
    </member>
    <member name="M:NEventStore.CommitAttempt.#ctor(System.Guid,System.Int32,System.Guid,System.Int32,System.DateTime,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{NEventStore.EventMessage})">
      <summary>
                Initializes a new instance of the Commit class for the default bucket.
            </summary>
      <param name="streamId">The value which uniquely identifies the stream in a bucket to which the commit belongs.</param>
      <param name="streamRevision">The value which indicates the revision of the most recent event in the stream to which this commit applies.</param>
      <param name="commitId">The value which uniquely identifies the commit within the stream.</param>
      <param name="commitSequence">The value which indicates the sequence (or position) in the stream to which this commit applies.</param>
      <param name="commitStamp">The point in time at which the commit was persisted.</param>
      <param name="headers">The metadata which provides additional, unstructured information about this commit.</param>
      <param name="events">The collection of event messages to be committed as a single unit.</param>
    </member>
    <member name="M:NEventStore.CommitAttempt.#ctor(System.String,System.Int32,System.Guid,System.Int32,System.DateTime,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{NEventStore.EventMessage})">
      <summary>
                Initializes a new instance of the Commit class for the default bucket.
            </summary>
      <param name="streamId">The value which uniquely identifies the stream in a bucket to which the commit belongs.</param>
      <param name="streamRevision">The value which indicates the revision of the most recent event in the stream to which this commit applies.</param>
      <param name="commitId">The value which uniquely identifies the commit within the stream.</param>
      <param name="commitSequence">The value which indicates the sequence (or position) in the stream to which this commit applies.</param>
      <param name="commitStamp">The point in time at which the commit was persisted.</param>
      <param name="headers">The metadata which provides additional, unstructured information about this commit.</param>
      <param name="events">The collection of event messages to be committed as a single unit.</param>
    </member>
    <member name="M:NEventStore.CommitAttempt.#ctor(System.String,System.String,System.Int32,System.Guid,System.Int32,System.DateTime,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{NEventStore.EventMessage})">
      <summary>
                Initializes a new instance of the Commit class.
            </summary>
      <param name="bucketId">The value which identifies bucket to which the the stream and the the commit belongs</param>
      <param name="streamId">The value which uniquely identifies the stream in a bucket to which the commit belongs.</param>
      <param name="streamRevision">The value which indicates the revision of the most recent event in the stream to which this commit applies.</param>
      <param name="commitId">The value which uniquely identifies the commit within the stream.</param>
      <param name="commitSequence">The value which indicates the sequence (or position) in the stream to which this commit applies.</param>
      <param name="commitStamp">The point in time at which the commit was persisted.</param>
      <param name="headers">The metadata which provides additional, unstructured information about this commit.</param>
      <param name="events">The collection of event messages to be committed as a single unit.</param>
    </member>
    <member name="P:NEventStore.CommitAttempt.BucketId">
      <summary>
                Gets the value which identifies bucket to which the the stream and the the commit belongs.
            </summary>
    </member>
    <member name="P:NEventStore.CommitAttempt.StreamId">
      <summary>
                Gets the value which uniquely identifies the stream to which the commit belongs.
            </summary>
    </member>
    <member name="P:NEventStore.CommitAttempt.StreamRevision">
      <summary>
                Gets the value which indicates the revision of the most recent event in the stream to which this commit applies.
            </summary>
    </member>
    <member name="P:NEventStore.CommitAttempt.CommitId">
      <summary>
                Gets the value which uniquely identifies the commit within the stream.
            </summary>
    </member>
    <member name="P:NEventStore.CommitAttempt.CommitSequence">
      <summary>
                Gets the value which indicates the sequence (or position) in the stream to which this commit applies.
            </summary>
    </member>
    <member name="P:NEventStore.CommitAttempt.CommitStamp">
      <summary>
                Gets the point in time at which the commit was persisted.
            </summary>
    </member>
    <member name="P:NEventStore.CommitAttempt.Headers">
      <summary>
                Gets the metadata which provides additional, unstructured information about this commit.
            </summary>
    </member>
    <member name="P:NEventStore.CommitAttempt.Events">
      <summary>
                Gets the collection of event messages to be committed as a single unit.
            </summary>
    </member>
    <member name="T:NEventStore.DuplicateCommitException">
      <summary>
                Represents an attempt to commit the same information more than once.
            </summary>
    </member>
    <member name="M:NEventStore.DuplicateCommitException.#ctor">
      <summary>
                Initializes a new instance of the DuplicateCommitException class.
            </summary>
    </member>
    <member name="M:NEventStore.DuplicateCommitException.#ctor(System.String)">
      <summary>
                Initializes a new instance of the DuplicateCommitException class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:NEventStore.DuplicateCommitException.#ctor(System.String,System.Exception)">
      <summary>
                Initializes a new instance of the DuplicateCommitException class.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The message that is the cause of the current exception.</param>
    </member>
    <member name="M:NEventStore.DuplicateCommitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                Initializes a new instance of the DuplicateCommitException class.
            </summary>
      <param name="info">The SerializationInfo that holds the serialized object data of the exception being thrown.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:NEventStore.Serialization.SerializationExtensions">
      <summary>
                Implements extension methods that make call to the serialization infrastructure more simple.
            </summary>
    </member>
    <member name="M:NEventStore.Serialization.SerializationExtensions.Serialize``1(NEventStore.Serialization.ISerialize,``0)">
      <summary>
                Serializes the object provided.
            </summary>
      <typeparam name="T">The type of object to be serialized</typeparam>
      <param name="serializer">The serializer to use.</param>
      <param name="value">The object graph to be serialized.</param>
      <returns>A serialized representation of the object graph provided.</returns>
    </member>
    <member name="M:NEventStore.Serialization.SerializationExtensions.Deserialize``1(NEventStore.Serialization.ISerialize,System.Byte[])">
      <summary>
                Deserializes the array of bytes provided.
            </summary>
      <typeparam name="T">The type of object to be deserialized.</typeparam>
      <param name="serializer">The serializer to use.</param>
      <param name="serialized">The serialized array of bytes.</param>
      <returns>The reconstituted object, if any.</returns>
    </member>
    <member name="T:NEventStore.Persistence.StreamHead">
      <summary>
                Indicates the most recent information representing the head of a given stream.
            </summary>
    </member>
    <member name="M:NEventStore.Persistence.StreamHead.#ctor(System.String,System.String,System.Int32,System.Int32)">
      <summary>
                Initializes a new instance of the StreamHead class.
            </summary>
      <param name="bucketId">The value which uniquely identifies bucket the stream belongs to.</param>
      <param name="streamId">The value which uniquely identifies the stream in the bucket where the last snapshot exceeds the allowed threshold.</param>
      <param name="headRevision">The value which indicates the revision, length, or number of events committed to the stream.</param>
      <param name="snapshotRevision">The value which indicates the revision at which the last snapshot was taken.</param>
    </member>
    <member name="M:NEventStore.Persistence.StreamHead.#ctor">
      <summary>
                Initializes a new instance of the StreamHead class.
            </summary>
    </member>
    <member name="M:NEventStore.Persistence.StreamHead.Equals(System.Object)">
      <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>If the two objects are equal, returns true; otherwise false.</returns>
    </member>
    <member name="M:NEventStore.Persistence.StreamHead.GetHashCode">
      <summary>
                Returns the hash code for this instance.
            </summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="P:NEventStore.Persistence.StreamHead.BucketId">
      <summary>
                Gets the value which uniquely identifies the stream where the last snapshot exceeds the allowed threshold.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.StreamHead.StreamId">
      <summary>
                Gets the value which uniquely identifies the stream where the last snapshot exceeds the allowed threshold.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.StreamHead.HeadRevision">
      <summary>
                Gets the value which indicates the revision, length, or number of events committed to the stream.
            </summary>
    </member>
    <member name="P:NEventStore.Persistence.StreamHead.SnapshotRevision">
      <summary>
                Gets the value which indicates the revision at which the last snapshot was taken.
            </summary>
    </member>
    <member name="T:NEventStore.Snapshot">
      <summary>
                Represents a materialized view of a stream at specific revision.
            </summary>
    </member>
    <member name="M:NEventStore.Snapshot.#ctor(System.String,System.Int32,System.Object)">
      <summary>
                Initializes a new instance of the Snapshot class for the default bucket.
            </summary>
      <param name="streamId">The value which uniquely identifies the stream to which the snapshot applies.</param>
      <param name="streamRevision">The position at which the snapshot applies.</param>
      <param name="payload">The snapshot or materialized view of the stream at the revision indicated.</param>
    </member>
    <member name="M:NEventStore.Snapshot.#ctor(System.String,System.String,System.Int32,System.Object)">
      <summary>
                Initializes a new instance of the Snapshot class.
            </summary>
      <param name="bucketId">The value which uniquely identifies bucket the stream belongs to.</param>
      <param name="streamId">The value which uniquely identifies the stream to which the snapshot applies.</param>
      <param name="streamRevision">The position at which the snapshot applies.</param>
      <param name="payload">The snapshot or materialized view of the stream at the revision indicated.</param>
    </member>
    <member name="M:NEventStore.Snapshot.#ctor">
      <summary>
                Initializes a new instance of the Snapshot class.
            </summary>
    </member>
    <member name="P:NEventStore.Snapshot.StreamId">
      <summary>
                Gets the value which uniquely identifies the stream to which the snapshot applies.
            </summary>
    </member>
    <member name="P:NEventStore.Snapshot.StreamRevision">
      <summary>
                Gets the position at which the snapshot applies.
            </summary>
    </member>
    <member name="P:NEventStore.Snapshot.Payload">
      <summary>
                Gets the snapshot or materialized view of the stream at the revision indicated.
            </summary>
    </member>
    <member name="T:NEventStore.SystemTime">
      <summary>
                Provides the ability to override the current moment in time to facilitate testing.
                Original idea by Ayende Rahien:
                http://ayende.com/Blog/archive/2008/07/07/Dealing-with-time-in-tests.aspx
            </summary>
    </member>
    <member name="F:NEventStore.SystemTime.Resolver">
      <summary>
                The callback to be used to resolve the current moment in time.
            </summary>
    </member>
    <member name="P:NEventStore.SystemTime.UtcNow">
      <summary>
                Gets the current moment in time.
            </summary>
    </member>
    <member name="T:System.Reactive.NamespaceDoc">
      <summary>
            The <b>System.Reactive</b> namespace contains interfaces and classes used throughout the Reactive Extensions library.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.NamespaceDoc">
      <summary>
            The <b>System.Reactive.Concurrency</b> namespace contains interfaces and classes that provide the scheduler infrastructure used by Reactive Extensions to construct and
            process event streams. Schedulers are used to parameterize the concurrency introduced by query operators, provide means to virtualize time, to process historical data,
            and to write unit tests for functionality built using Reactive Extensions constructs.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.NamespaceDoc">
      <summary>
            The <b>System.Reactive.Disposables</b> namespace contains interfaces and classes that provide a compositional set of constructs used to deal with resource and subscription
            management in Reactive Extensions. Those types are used extensively within the implementation of Reactive Extensions and are useful when writing custom query operators or
            schedulers.
            </summary>
    </member>
    <member name="T:System.Reactive.Linq.NamespaceDoc">
      <summary>
            The <b>System.Reactive.Linq</b> namespace contains interfaces and classes that support expressing queries over observable sequences, using Language Integrated Query (LINQ).
            Query operators are made available as extension methods for IObservable&lt;T&gt; and IQbservable&lt;T&gt; defined on the Observable and Qbservable classes, respectively.
            </summary>
    </member>
    <member name="T:System.Reactive.Subjects.NamespaceDoc">
      <summary>
            The <b>System.Reactive.Subjects</b> namespace contains interfaces and classes to represent subjects, which are objects implementing both IObservable&lt;T&gt; and IObserver&lt;T&gt;.
            Subjects are often used as sources of events, allowing one party to raise events and allowing another party to write queries over the event stream. Because of their ability to
            have multiple registered observers, subjects are also used as a facility to provide multicast behavior for event streams in queries.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.ISchedulerPeriodic">
      <summary>
            Scheduler with support for running periodic tasks.
            This type of scheduler can be used to run timers more efficiently instead of using recursive scheduling.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.ISchedulerPeriodic.SchedulePeriodic``1(``0,System.TimeSpan,System.Func{``0,``0})">
      <summary>
            Schedules a periodic piece of work.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">Initial state passed to the action upon the first iteration.</param>
      <param name="period">Period for running the work periodically.</param>
      <param name="action">Action to be executed, potentially updating the state.</param>
      <returns>The disposable object used to cancel the scheduled recurring action (best effort).</returns>
    </member>
    <member name="T:System.Reactive.Concurrency.IStopwatchProvider">
      <summary>
            Provider for IStopwatch objects.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.IStopwatchProvider.StartStopwatch">
      <summary>
            Starts a new stopwatch object.
            </summary>
      <returns>New stopwatch object; started at the time of the request.</returns>
    </member>
    <member name="T:System.Reactive.Concurrency.IScheduledItem`1">
      <summary>
            Represents a work item that has been scheduled.
            </summary>
      <typeparam name="TAbsolute">Absolute time representation type.</typeparam>
    </member>
    <member name="M:System.Reactive.Concurrency.IScheduledItem`1.Invoke">
      <summary>
            Invokes the work item.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.IScheduledItem`1.DueTime">
      <summary>
            Gets the absolute time at which the item is due for invocation.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.IScheduler">
      <summary>
            Represents an object that schedules units of work.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.IScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.IScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed after dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.IScheduler.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed at dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Absolute time at which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
    </member>
    <member name="P:System.Reactive.Concurrency.IScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.ISchedulerLongRunning">
      <summary>
            Scheduler with support for starting long-running tasks.
            This type of scheduler can be used to run loops more efficiently instead of using recursive scheduling.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.ISchedulerLongRunning.ScheduleLongRunning``1(``0,System.Action{``0,System.Reactive.Disposables.ICancelable})">
      <summary>
            Schedules a long-running piece of work.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <remarks>
        <para>
          <b>Notes to implementers</b>
        </para>
            The returned disposable object should not prevent the work from starting, but only set the cancellation flag passed to the specified action.
            </remarks>
    </member>
    <member name="T:System.Reactive.Concurrency.IStopwatch">
      <summary>
            Abstraction for a stopwatch to compute time relative to a starting point.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.IStopwatch.Elapsed">
      <summary>
            Gets the time elapsed since the stopwatch object was obtained.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.ICancelable">
      <summary>
            Disposable resource with dipsosal state tracking.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.ICancelable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="T:System.Reactive.IEventPattern`2">
      <summary>
            Represents a .NET event invocation consisting of the strongly typed object that raised the event and the data that was generated by the event.
            </summary>
      <typeparam name="TSender">
            The type of the sender that raised the event.
            This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
      <typeparam name="TEventArgs">
            The type of the event data generated by the event.
            This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
    </member>
    <member name="P:System.Reactive.IEventPattern`2.Sender">
      <summary>
            Gets the sender object that raised the event.
            </summary>
    </member>
    <member name="P:System.Reactive.IEventPattern`2.EventArgs">
      <summary>
            Gets the event data that was generated by the event.
            </summary>
    </member>
    <member name="T:System.Reactive.IEventPatternSource`1">
      <summary>
            Represents a data stream signaling its elements by means of an event.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    </member>
    <member name="T:System.Reactive.IEventSource`1">
      <summary>
            Represents a data stream signaling its elements by means of an event.
            </summary>
      <typeparam name="T">
            The type of the event data generated by the event.
            This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
    </member>
    <member name="T:System.Reactive.IObserver`2">
      <summary>
            Provides a mechanism for receiving push-based notifications and returning a response.
            </summary>
      <typeparam name="TValue">
            The type of the elements received by the observer.
            This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
      <typeparam name="TResult">
            The type of the result returned from the observer's notification handlers.
            This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
    </member>
    <member name="M:System.Reactive.IObserver`2.OnNext(`0)">
      <summary>
            Notifies the observer of a new element in the sequence.
            </summary>
      <param name="value">The new element in the sequence.</param>
      <returns>Result returned upon observation of a new element.</returns>
    </member>
    <member name="M:System.Reactive.IObserver`2.OnError(System.Exception)">
      <summary>
            Notifies the observer that an exception has occurred.
            </summary>
      <param name="exception">The exception that occurred.</param>
      <returns>Result returned upon observation of an error.</returns>
    </member>
    <member name="M:System.Reactive.IObserver`2.OnCompleted">
      <summary>
            Notifies the observer of the end of the sequence.
            </summary>
      <returns>Result returned upon observation of the sequence completion.</returns>
    </member>
    <member name="T:System.Reactive.Linq.IGroupedObservable`2">
      <summary>
            Represents an observable sequence of elements that have a common key.
            </summary>
      <typeparam name="TKey">
            The type of the key shared by all elements in the group.
            This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
      <typeparam name="TElement">
            The type of the elements in the group.
            This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
    </member>
    <member name="P:System.Reactive.Linq.IGroupedObservable`2.Key">
      <summary>
            Gets the common key.
            </summary>
    </member>
    <member name="T:System.Reactive.Linq.IQbservable">
      <summary>
            Provides functionality to evaluate queries against a specific data source wherein the type of the data is not specified.
            </summary>
    </member>
    <member name="P:System.Reactive.Linq.IQbservable.ElementType">
      <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of IQbservable is executed.
            </summary>
    </member>
    <member name="P:System.Reactive.Linq.IQbservable.Expression">
      <summary>
            Gets the expression tree that is associated with the instance of IQbservable.
            </summary>
    </member>
    <member name="P:System.Reactive.Linq.IQbservable.Provider">
      <summary>
            Gets the query provider that is associated with this data source.
            </summary>
    </member>
    <member name="T:System.Reactive.Linq.IQbservable`1">
      <summary>
            Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.
            </summary>
      <typeparam name="T">
            The type of the data in the data source.
            This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
    </member>
    <member name="T:System.Reactive.Linq.IQbservableProvider">
      <summary>
            Defines methods to create and execute queries that are described by an IQbservable object.
            </summary>
    </member>
    <member name="M:System.Reactive.Linq.IQbservableProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>
            Constructs an IQbservable&gt;TResult&lt; object that can evaluate the query represented by a specified expression tree.
            </summary>
      <typeparam name="TResult">The type of the elements of the System.Reactive.Linq.IQbservable&lt;T&gt; that is returned.</typeparam>
      <param name="expression">Expression tree representing the query.</param>
      <returns>IQbservable object that can evaluate the given query expression.</returns>
    </member>
    <member name="T:System.Reactive.Subjects.IConnectableObservable`1">
      <summary>
            Represents an observable wrapper that can be connected and disconnected from its underlying observable sequence.
            </summary>
      <typeparam name="T">
            The type of the elements in the sequence.
            This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
    </member>
    <member name="M:System.Reactive.Subjects.IConnectableObservable`1.Connect">
      <summary>
            Connects the observable wrapper to its source. All subscribed observers will receive values from the underlying observable sequence as long as the connection is established.
            </summary>
      <returns>Disposable used to disconnect the observable wrapper from its source, causing subscribed observer to stop receiving values from the underlying observable sequence.</returns>
    </member>
    <member name="T:System.Reactive.Subjects.ISubject`2">
      <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
      <typeparam name="TSource">
            The type of the elements received by the subject.
            This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
      <typeparam name="TResult">
            The type of the elements produced by the subject.
            This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
    </member>
    <member name="T:System.Reactive.Subjects.ISubject`1">
      <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
      <typeparam name="T">The type of the elements processed by the subject.</typeparam>
    </member>
    <member name="T:System.Reactive.PlatformServices.NamespaceDoc">
      <summary>
            The <b>System.Reactive.PlatformServices</b> namespace contains interfaces and classes used by the runtime infrastructure of Reactive Extensions.
            Those are not intended to be used directly from user code and are subject to change in future releases of the product.
            </summary>
    </member>
    <member name="T:System.ObservableExtensions">
      <summary>
            Provides a set of static methods for subscribing delegates to observables.
            </summary>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0})">
      <summary>
            Subscribes to the observable sequence without specifying any handlers.
            This method can be used to evaluate the observable sequence for its side-effects only.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0})">
      <summary>
            Subscribes an element handler to an observable sequence.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
      <summary>
            Subscribes an element handler and an exception handler to an observable sequence.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="onError">Action to invoke upon exceptional termination of the observable sequence.</param>
      <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onError" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action)">
      <summary>
            Subscribes an element handler and a completion handler to an observable sequence.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="onCompleted">Action to invoke upon graceful termination of the observable sequence.</param>
      <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>
            Subscribes an element handler, an exception handler, and a completion handler to an observable sequence.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="onError">Action to invoke upon exceptional termination of the observable sequence.</param>
      <param name="onCompleted">Action to invoke upon graceful termination of the observable sequence.</param>
      <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onError" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.IObserver{``0},System.Threading.CancellationToken)">
      <summary>
            Subscribes an observer to an observable sequence, using a CancellationToken to support unsubscription.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="observer">Observer to subscribe to the sequence.</param>
      <param name="token">CancellationToken that can be signaled to unsubscribe from the source sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Threading.CancellationToken)">
      <summary>
            Subscribes to the observable sequence without specifying any handlers, using a CancellationToken to support unsubscription.
            This method can be used to evaluate the observable sequence for its side-effects only.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="token">CancellationToken that can be signaled to unsubscribe from the source sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Threading.CancellationToken)">
      <summary>
            Subscribes an element handler to an observable sequence, using a CancellationToken to support unsubscription.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="token">CancellationToken that can be signaled to unsubscribe from the source sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Threading.CancellationToken)">
      <summary>
            Subscribes an element handler and an exception handler to an observable sequence, using a CancellationToken to support unsubscription.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="onError">Action to invoke upon exceptional termination of the observable sequence.</param>
      <param name="token">CancellationToken that can be signaled to unsubscribe from the source sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onError" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action,System.Threading.CancellationToken)">
      <summary>
            Subscribes an element handler and a completion handler to an observable sequence, using a CancellationToken to support unsubscription.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="onCompleted">Action to invoke upon graceful termination of the observable sequence.</param>
      <param name="token">CancellationToken that can be signaled to unsubscribe from the source sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action,System.Threading.CancellationToken)">
      <summary>
            Subscribes an element handler, an exception handler, and a completion handler to an observable sequence, using a CancellationToken to support unsubscription.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="onError">Action to invoke upon exceptional termination of the observable sequence.</param>
      <param name="onCompleted">Action to invoke upon graceful termination of the observable sequence.</param>
      <param name="token">CancellationToken that can be signaled to unsubscribe from the source sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onError" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.SubscribeSafe``1(System.IObservable{``0},System.IObserver{``0})">
      <summary>
            Subscribes to the specified source, re-routing synchronous exceptions during invocation of the Subscribe method to the observer's OnError channel.
            This method is typically used when writing query operators.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="observer">Observer that will be passed to the observable sequence, and that will be used for exception propagation.</param>
      <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="observer" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Observer">
      <summary>
            Provides a set of static methods for creating observers.
            </summary>
    </member>
    <member name="M:System.Reactive.Observer.ToObserver``1(System.Action{System.Reactive.Notification{``0}})">
      <summary>
            Creates an observer from a notification callback.
            </summary>
      <typeparam name="T">The type of the elements received by the observer.</typeparam>
      <param name="handler">Action that handles a notification.</param>
      <returns>The observer object that invokes the specified handler using a notification corresponding to each message it receives.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.ToNotifier``1(System.IObserver{``0})">
      <summary>
            Creates a notification callback from an observer.
            </summary>
      <typeparam name="T">The type of the elements received by the observer.</typeparam>
      <param name="observer">Observer object.</param>
      <returns>The action that forwards its input notification to the underlying observer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.Create``1(System.Action{``0})">
      <summary>
            Creates an observer from the specified OnNext action.
            </summary>
      <typeparam name="T">The type of the elements received by the observer.</typeparam>
      <param name="onNext">Observer's OnNext action implementation.</param>
      <returns>The observer object implemented using the given actions.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="onNext" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.Create``1(System.Action{``0},System.Action{System.Exception})">
      <summary>
            Creates an observer from the specified OnNext and OnError actions.
            </summary>
      <typeparam name="T">The type of the elements received by the observer.</typeparam>
      <param name="onNext">Observer's OnNext action implementation.</param>
      <param name="onError">Observer's OnError action implementation.</param>
      <returns>The observer object implemented using the given actions.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="onNext" /> or <paramref name="onError" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.Create``1(System.Action{``0},System.Action)">
      <summary>
            Creates an observer from the specified OnNext and OnCompleted actions.
            </summary>
      <typeparam name="T">The type of the elements received by the observer.</typeparam>
      <param name="onNext">Observer's OnNext action implementation.</param>
      <param name="onCompleted">Observer's OnCompleted action implementation.</param>
      <returns>The observer object implemented using the given actions.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="onNext" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.Create``1(System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>
            Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
            </summary>
      <typeparam name="T">The type of the elements received by the observer.</typeparam>
      <param name="onNext">Observer's OnNext action implementation.</param>
      <param name="onError">Observer's OnError action implementation.</param>
      <param name="onCompleted">Observer's OnCompleted action implementation.</param>
      <returns>The observer object implemented using the given actions.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="onNext" /> or <paramref name="onError" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.AsObserver``1(System.IObserver{``0})">
      <summary>
            Hides the identity of an observer.
            </summary>
      <typeparam name="T">The type of the elements received by the source observer.</typeparam>
      <param name="observer">An observer whose identity to hide.</param>
      <returns>An observer that hides the identity of the specified observer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.Checked``1(System.IObserver{``0})">
      <summary>
            Checks access to the observer for grammar violations. This includes checking for multiple OnError or OnCompleted calls, as well as reentrancy in any of the observer methods.
            If a violation is detected, an InvalidOperationException is thrown from the offending observer method call.
            </summary>
      <typeparam name="T">The type of the elements received by the source observer.</typeparam>
      <param name="observer">The observer whose callback invocations should be checked for grammar violations.</param>
      <returns>An observer that checks callbacks invocations against the observer grammar and, if the checks pass, forwards those to the specified observer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0})">
      <summary>
            Synchronizes access to the observer such that its callback methods cannot be called concurrently from multiple threads. This overload is useful when coordinating access to an observer.
            Notice reentrant observer callbacks on the same thread are still possible.
            </summary>
      <typeparam name="T">The type of the elements received by the source observer.</typeparam>
      <param name="observer">The observer whose callbacks should be synchronized.</param>
      <returns>An observer that delivers callbacks to the specified observer in a synchronized manner.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
      <remarks>
            Because a <see cref="T:System.Threading.Monitor">Monitor</see> is used to perform the synchronization, there's no protection against reentrancy from the same thread.
            Hence, overlapped observer callbacks are still possible, which is invalid behavior according to the observer grammar. In order to protect against this behavior as
            well, use the <see cref="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Boolean)" /> overload, passing true for the second parameter.
            </remarks>
    </member>
    <member name="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Boolean)">
      <summary>
            Synchronizes access to the observer such that its callback methods cannot be called concurrently. This overload is useful when coordinating access to an observer.
            The <paramref name="preventReentrancy" /> parameter configures the type of lock used for synchronization.
            </summary>
      <typeparam name="T">The type of the elements received by the source observer.</typeparam>
      <param name="observer">The observer whose callbacks should be synchronized.</param>
      <param name="preventReentrancy">If set to true, reentrant observer callbacks will be queued up and get delivered to the observer in a sequential manner.</param>
      <returns>An observer that delivers callbacks to the specified observer in a synchronized manner.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
      <remarks>
            When the <paramref name="preventReentrancy" /> parameter is set to false, behavior is identical to the <see cref="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0})" /> overload which uses
            a <see cref="T:System.Threading.Monitor">Monitor</see> for synchronization. When the <paramref name="preventReentrancy" /> parameter is set to true, an <see cref="T:System.Reactive.Concurrency.AsyncLock" />
            is used to queue up callbacks to the specified observer if a reentrant call is made.
            </remarks>
    </member>
    <member name="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Object)">
      <summary>
            Synchronizes access to the observer such that its callback methods cannot be called concurrently by multiple threads, using the specified gate object for use by a <see cref="T:System.Threading.Monitor">Monitor</see>-based lock.
            This overload is useful when coordinating multiple observers that access shared state by synchronizing on a common gate object.
            Notice reentrant observer callbacks on the same thread are still possible.
            </summary>
      <typeparam name="T">The type of the elements received by the source observer.</typeparam>
      <param name="observer">The observer whose callbacks should be synchronized.</param>
      <param name="gate">Gate object to synchronize each observer call on.</param>
      <returns>An observer that delivers callbacks to the specified observer in a synchronized manner.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> or <paramref name="gate" /> is null.</exception>
      <remarks>
            Because a <see cref="T:System.Threading.Monitor">Monitor</see> is used to perform the synchronization, there's no protection against reentrancy from the same thread.
            Hence, overlapped observer callbacks are still possible, which is invalid behavior according to the observer grammar. In order to protect against this behavior as
            well, use the <see cref="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Reactive.Concurrency.AsyncLock)" /> overload.
            </remarks>
    </member>
    <member name="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Reactive.Concurrency.AsyncLock)">
      <summary>
            Synchronizes access to the observer such that its callback methods cannot be called concurrently, using the specified asynchronous lock to protect against concurrent and reentrant access.
            This overload is useful when coordinating multiple observers that access shared state by synchronizing on a common asynchronous lock.
            </summary>
      <typeparam name="T">The type of the elements received by the source observer.</typeparam>
      <param name="observer">The observer whose callbacks should be synchronized.</param>
      <param name="asyncLock">Gate object to synchronize each observer call on.</param>
      <returns>An observer that delivers callbacks to the specified observer in a synchronized manner.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> or <paramref name="asyncLock" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.NotifyOn``1(System.IObserver{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Schedules the invocation of observer methods on the given scheduler.
            </summary>
      <typeparam name="T">The type of the elements received by the source observer.</typeparam>
      <param name="observer">The observer to schedule messages for.</param>
      <param name="scheduler">Scheduler to schedule observer messages on.</param>
      <returns>Observer whose messages are scheduled on the given scheduler.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.NotifyOn``1(System.IObserver{``0},System.Threading.SynchronizationContext)">
      <summary>
            Schedules the invocation of observer methods on the given synchonization context.
            </summary>
      <typeparam name="T">The type of the elements received by the source observer.</typeparam>
      <param name="observer">The observer to schedule messages for.</param>
      <param name="context">Synchonization context to schedule observer messages on.</param>
      <returns>Observer whose messages are scheduled on the given synchonization context.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> or <paramref name="context" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.ObservableBase`1">
      <summary>
            Abstract base class for implementations of the IObservable&lt;T&gt; interface.
            </summary>
      <remarks>
            If you don't need a named type to create an observable sequence (i.e. you rather need
            an instance rather than a reusable type), use the Observable.Create method to create
            an observable sequence with specified subscription behavior.
            </remarks>
      <typeparam name="T">The type of the elements in the sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.ObservableBase`1.Subscribe(System.IObserver{`0})">
      <summary>
            Subscribes the given observer to the observable sequence.
            </summary>
      <param name="observer">Observer that will receive notifications from the observable sequence.</param>
      <returns>Disposable object representing an observer's subscription to the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.ObservableBase`1.SubscribeCore(System.IObserver{`0})">
      <summary>
            Implement this method with the core subscription logic for the observable sequence.
            </summary>
      <param name="observer">Observer to send notifications to.</param>
      <returns>Disposable object representing an observer's subscription to the observable sequence.</returns>
    </member>
    <member name="T:System.Reactive.AnonymousObservable`1">
      <summary>
            Class to create an IObservable&lt;T&gt; instance from a delegate-based implementation of the Subscribe method.
            </summary>
      <typeparam name="T">The type of the elements in the sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.AnonymousObservable`1.#ctor(System.Func{System.IObserver{`0},System.IDisposable})">
      <summary>
            Creates an observable sequence object from the specified subscription function.
            </summary>
      <param name="subscribe">Subscribe method implementation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribe" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.AnonymousObservable`1.SubscribeCore(System.IObserver{`0})">
      <summary>
            Calls the subscription function that was supplied to the constructor.
            </summary>
      <param name="observer">Observer to send notifications to.</param>
      <returns>Disposable object representing an observer's subscription to the observable sequence.</returns>
    </member>
    <member name="T:System.Reactive.ObserverBase`1">
      <summary>
            Abstract base class for implementations of the IObserver&lt;T&gt; interface.
            </summary>
      <remarks>This base class enforces the grammar of observers where OnError and OnCompleted are terminal messages.</remarks>
      <typeparam name="T">The type of the elements in the sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.ObserverBase`1.#ctor">
      <summary>
            Creates a new observer in a non-stopped state.
            </summary>
    </member>
    <member name="M:System.Reactive.ObserverBase`1.OnNext(`0)">
      <summary>
            Notifies the observer of a new element in the sequence.
            </summary>
      <param name="value">Next element in the sequence.</param>
    </member>
    <member name="M:System.Reactive.ObserverBase`1.OnNextCore(`0)">
      <summary>
            Implement this method to react to the receival of a new element in the sequence.
            </summary>
      <param name="value">Next element in the sequence.</param>
      <remarks>This method only gets called when the observer hasn't stopped yet.</remarks>
    </member>
    <member name="M:System.Reactive.ObserverBase`1.OnError(System.Exception)">
      <summary>
            Notifies the observer that an exception has occurred.
            </summary>
      <param name="error">The error that has occurred.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="error" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.ObserverBase`1.OnErrorCore(System.Exception)">
      <summary>
            Implement this method to react to the occurrence of an exception.
            </summary>
      <param name="error">The error that has occurred.</param>
      <remarks>This method only gets called when the observer hasn't stopped yet, and causes the observer to stop.</remarks>
    </member>
    <member name="M:System.Reactive.ObserverBase`1.OnCompleted">
      <summary>
            Notifies the observer of the end of the sequence.
            </summary>
    </member>
    <member name="M:System.Reactive.ObserverBase`1.OnCompletedCore">
      <summary>
            Implement this method to react to the end of the sequence.
            </summary>
      <remarks>This method only gets called when the observer hasn't stopped yet, and causes the observer to stop.</remarks>
    </member>
    <member name="M:System.Reactive.ObserverBase`1.Dispose">
      <summary>
            Disposes the observer, causing it to transition to the stopped state.
            </summary>
    </member>
    <member name="M:System.Reactive.ObserverBase`1.Dispose(System.Boolean)">
      <summary>
            Core implementation of IDisposable.
            </summary>
      <param name="disposing">true if the Dispose call was triggered by the IDisposable.Dispose method; false if it was triggered by the finalizer.</param>
    </member>
    <member name="T:System.Reactive.AnonymousObserver`1">
      <summary>
            Class to create an IObserver&lt;T&gt; instance from delegate-based implementations of the On* methods.
            </summary>
      <typeparam name="T">The type of the elements in the sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.AnonymousObserver`1.#ctor(System.Action{`0},System.Action{System.Exception},System.Action)">
      <summary>
            Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
            </summary>
      <param name="onNext">Observer's OnNext action implementation.</param>
      <param name="onError">Observer's OnError action implementation.</param>
      <param name="onCompleted">Observer's OnCompleted action implementation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="onNext" /> or <paramref name="onError" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.AnonymousObserver`1.#ctor(System.Action{`0})">
      <summary>
            Creates an observer from the specified OnNext action.
            </summary>
      <param name="onNext">Observer's OnNext action implementation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="onNext" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.AnonymousObserver`1.#ctor(System.Action{`0},System.Action{System.Exception})">
      <summary>
            Creates an observer from the specified OnNext and OnError actions.
            </summary>
      <param name="onNext">Observer's OnNext action implementation.</param>
      <param name="onError">Observer's OnError action implementation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="onNext" /> or <paramref name="onError" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.AnonymousObserver`1.#ctor(System.Action{`0},System.Action)">
      <summary>
            Creates an observer from the specified OnNext and OnCompleted actions.
            </summary>
      <param name="onNext">Observer's OnNext action implementation.</param>
      <param name="onCompleted">Observer's OnCompleted action implementation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="onNext" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.AnonymousObserver`1.OnNextCore(`0)">
      <summary>
            Calls the onNext action.
            </summary>
      <param name="value">Next element in the sequence.</param>
    </member>
    <member name="M:System.Reactive.AnonymousObserver`1.OnErrorCore(System.Exception)">
      <summary>
            Calls the onError action.
            </summary>
      <param name="error">The error that has occurred.</param>
    </member>
    <member name="M:System.Reactive.AnonymousObserver`1.OnCompletedCore">
      <summary>
            Calls the onCompleted action.
            </summary>
    </member>
    <member name="T:System.Reactive.AnonymousSafeObserver`1">
      <summary>
            This class fuses logic from ObserverBase, AnonymousObserver, and SafeObserver into one class. When an observer
            needs to be safeguarded, an instance of this type can be created by SafeObserver.Create when it detects its
            input is an AnonymousObserver, which is commonly used by end users when using the Subscribe extension methods
            that accept delegates for the On* handlers. By doing the fusion, we make the call stack depth shorter which
            helps debugging and some performance.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.AsyncLock">
      <summary>
            Asynchronous lock.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.AsyncLock.Wait(System.Action)">
      <summary>
            Queues the action for execution. If the caller acquires the lock and becomes the owner,
            the queue is processed. If the lock is already owned, the action is queued and will get
            processed by the owner.
            </summary>
      <param name="action">Action to queue for execution.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.AsyncLock.Dispose">
      <summary>
            Clears the work items in the queue and drops further work being queued.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.ConcurrencyAbstractionLayer">
      <summary>
            (Infrastructure) Concurrency abstraction layer.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.ConcurrencyAbstractionLayer.Current">
      <summary>
            Gets the current CAL. If no CAL has been set yet, it will be initialized to the default.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.IConcurrencyAbstractionLayer">
      <summary>
            (Infrastructure) Concurrency abstraction layer interface.
            </summary>
      <remarks>
            This type is used by the Rx infrastructure and not meant for public consumption or implementation.
            No guarantees are made about forward compatibility of the type's functionality and its usage.
            </remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartTimer(System.Action{System.Object},System.Object,System.TimeSpan)">
      <summary>
            Queues a method for execution at the specified relative time.
            </summary>
      <param name="action">Method to execute.</param>
      <param name="state">State to pass to the method.</param>
      <param name="dueTime">Time to execute the method on.</param>
      <returns>Disposable object that can be used to stop the timer.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartPeriodicTimer(System.Action,System.TimeSpan)">
      <summary>
            Queues a method for periodic execution based on the specified period.
            </summary>
      <param name="action">Method to execute; should be safe for reentrancy.</param>
      <param name="period">Period for running the method periodically.</param>
      <returns>Disposable object that can be used to stop the timer.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.QueueUserWorkItem(System.Action{System.Object},System.Object)">
      <summary>
            Queues a method for execution.
            </summary>
      <param name="action">Method to execute.</param>
      <param name="state">State to pass to the method.</param>
      <returns>Disposable object that can be used to cancel the queued method.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.Sleep(System.TimeSpan)">
      <summary>
            Blocking sleep operation.
            </summary>
      <param name="timeout">Time to sleep.</param>
    </member>
    <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartStopwatch">
      <summary>
            Starts a new stopwatch object.
            </summary>
      <returns>New stopwatch object; started at the time of the request.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartThread(System.Action{System.Object},System.Object)">
      <summary>
            Starts a new long-running thread.
            </summary>
      <param name="action">Method to execute.</param>
      <param name="state">State to pass to the method.</param>
    </member>
    <member name="P:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.SupportsLongRunning">
      <summary>
            Gets whether long-running scheduling is supported.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.Scheduler">
      <summary>
            Provides a set of static properties to access commonly used schedulers.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.DisableOptimizations(System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns a scheduler that represents the original scheduler, without any of its interface-based optimizations (e.g. long running scheduling).
            </summary>
      <param name="scheduler">Scheduler to disable all optimizations for.</param>
      <returns>Proxy to the original scheduler but without any optimizations enabled.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.DisableOptimizations(System.Reactive.Concurrency.IScheduler,System.Type[])">
      <summary>
            Returns a scheduler that represents the original scheduler, without the specified set of interface-based optimizations (e.g. long running scheduling).
            </summary>
      <param name="scheduler">Scheduler to disable the specified optimizations for.</param>
      <param name="optimizationInterfaces">Types of the optimization interfaces that have to be disabled.</param>
      <returns>Proxy to the original scheduler but without the specified optimizations enabled.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="optimizationInterfaces" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Catch``1(System.Reactive.Concurrency.IScheduler,System.Func{``0,System.Boolean})">
      <summary>
            Returns a scheduler that wraps the original scheduler, adding exception handling for scheduled actions.
            </summary>
      <typeparam name="TException">Type of the exception to check for.</typeparam>
      <param name="scheduler">Scheduler to apply an exception filter for.</param>
      <param name="handler">Handler that's run if an exception is caught. The exception will be rethrown if the handler returns false.</param>
      <returns>Wrapper around the original scheduler, enforcing exception handling.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.SchedulePeriodic``1(System.Reactive.Concurrency.IScheduler,``0,System.TimeSpan,System.Func{``0,``0})">
      <summary>
            Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities.
            If the scheduler supports periodic scheduling, the request will be forwarded to the periodic scheduling implementation.
            If the scheduler provides stopwatch functionality, the periodic task will be emulated using recursive scheduling with a stopwatch to correct for time slippage.
            Otherwise, the periodic task will be emulated using recursive scheduling.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="scheduler">The scheduler to run periodic work on.</param>
      <param name="state">Initial state passed to the action upon the first iteration.</param>
      <param name="period">Period for running the work periodically.</param>
      <param name="action">Action to be executed, potentially updating the state.</param>
      <returns>The disposable object used to cancel the scheduled recurring action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.SchedulePeriodic``1(System.Reactive.Concurrency.IScheduler,``0,System.TimeSpan,System.Action{``0})">
      <summary>
            Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities.
            If the scheduler supports periodic scheduling, the request will be forwarded to the periodic scheduling implementation.
            If the scheduler provides stopwatch functionality, the periodic task will be emulated using recursive scheduling with a stopwatch to correct for time slippage.
            Otherwise, the periodic task will be emulated using recursive scheduling.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="scheduler">Scheduler to execute the action on.</param>
      <param name="state">State passed to the action to be executed.</param>
      <param name="period">Period for running the work periodically.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled recurring action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.SchedulePeriodic(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Action)">
      <summary>
            Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities.
            If the scheduler supports periodic scheduling, the request will be forwarded to the periodic scheduling implementation.
            If the scheduler provides stopwatch functionality, the periodic task will be emulated using recursive scheduling with a stopwatch to correct for time slippage.
            Otherwise, the periodic task will be emulated using recursive scheduling.
            </summary>
      <param name="scheduler">Scheduler to execute the action on.</param>
      <param name="period">Period for running the work periodically.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled recurring action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.StartStopwatch(System.Reactive.Concurrency.IScheduler)">
      <summary>
            Starts a new stopwatch object by dynamically discovering the scheduler's capabilities.
            If the scheduler provides stopwatch functionality, the request will be forwarded to the stopwatch provider implementation.
            Otherwise, the stopwatch will be emulated using the scheduler's notion of absolute time.
            </summary>
      <param name="scheduler">Scheduler to obtain a stopwatch for.</param>
      <returns>New stopwatch object; started at the time of the request.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
      <remarks>The resulting stopwatch object can have non-monotonic behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.AsLongRunning(System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns the ISchedulerLongRunning implementation of the specified scheduler, or null if no such implementation is available.
            </summary>
      <param name="scheduler">Scheduler to get the ISchedulerLongRunning implementation for.</param>
      <returns>The scheduler's ISchedulerLongRunning implementation if available; null otherwise.</returns>
      <remarks>
            This helper method is made available for query operator authors in order to discover scheduler services by using the required
            IServiceProvider pattern, which allows for interception or redefinition of scheduler services.
            </remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.AsStopwatchProvider(System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns the IStopwatchProvider implementation of the specified scheduler, or null if no such implementation is available.
            </summary>
      <param name="scheduler">Scheduler to get the IStopwatchProvider implementation for.</param>
      <returns>The scheduler's IStopwatchProvider implementation if available; null otherwise.</returns>
      <remarks>
        <para>
            This helper method is made available for query operator authors in order to discover scheduler services by using the required
            IServiceProvider pattern, which allows for interception or redefinition of scheduler services.
            </para>
        <para>
            Consider using <see cref="M:System.Reactive.Concurrency.Scheduler.StartStopwatch(System.Reactive.Concurrency.IScheduler)" /> in case a stopwatch is required, but use of emulation stopwatch based
            on the scheduler's clock is acceptable. Use of this method is recommended for best-effort use of the stopwatch provider
            scheduler service, where the caller falls back to not using stopwatches if this facility wasn't found.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.AsPeriodic(System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns the IStopwatchProvider implementation of the specified scheduler, or null if no such implementation is available.
            </summary>
      <param name="scheduler">Scheduler to get the IStopwatchProvider implementation for.</param>
      <returns>The scheduler's IStopwatchProvider implementation if available; null otherwise.</returns>
      <remarks>
        <para>
            This helper method is made available for query operator authors in order to discover scheduler services by using the required
            IServiceProvider pattern, which allows for interception or redefinition of scheduler services.
            </para>
        <para>
            Consider using the Scheduler.SchedulePeriodic extension methods for IScheduler in case periodic scheduling is required and
            emulation of periodic behavior using other scheduler services is desirable. Use of this method is recommended for best-effort
            use of the periodic scheduling service, where the caller falls back to not using periodic scheduling if this facility wasn't
            found.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Normalize(System.TimeSpan)">
      <summary>
            Normalizes the specified TimeSpan value to a positive value.
            </summary>
      <param name="timeSpan">The TimeSpan value to normalize.</param>
      <returns>The specified TimeSpan value if it is zero or positive; otherwise, TimeSpan.Zero.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.Action{System.Action})">
      <summary>
            Schedules an action to be executed recursively.
            </summary>
      <param name="scheduler">Scheduler to execute the recursive action on.</param>
      <param name="action">Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Schedule``1(System.Reactive.Concurrency.IScheduler,``0,System.Action{``0,System.Action{``0}})">
      <summary>
            Schedules an action to be executed recursively.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="scheduler">Scheduler to execute the recursive action on.</param>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in recursive invocation state.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Action{System.Action{System.TimeSpan}})">
      <summary>
            Schedules an action to be executed recursively after a specified relative due time.
            </summary>
      <param name="scheduler">Scheduler to execute the recursive action on.</param>
      <param name="action">Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified relative time.</param>
      <param name="dueTime">Relative time after which to execute the action for the first time.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Schedule``1(System.Reactive.Concurrency.IScheduler,``0,System.TimeSpan,System.Action{``0,System.Action{``0,System.TimeSpan}})">
      <summary>
            Schedules an action to be executed recursively after a specified relative due time.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="scheduler">Scheduler to execute the recursive action on.</param>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.</param>
      <param name="dueTime">Relative time after which to execute the action for the first time.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.DateTimeOffset,System.Action{System.Action{System.DateTimeOffset}})">
      <summary>
            Schedules an action to be executed recursively at a specified absolute due time.
            </summary>
      <param name="scheduler">Scheduler to execute the recursive action on.</param>
      <param name="action">Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified absolute time.</param>
      <param name="dueTime">Absolute time at which to execute the action for the first time.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Schedule``1(System.Reactive.Concurrency.IScheduler,``0,System.DateTimeOffset,System.Action{``0,System.Action{``0,System.DateTimeOffset}})">
      <summary>
            Schedules an action to be executed recursively at a specified absolute due time.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="scheduler">Scheduler to execute the recursive action on.</param>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.</param>
      <param name="dueTime">Absolute time at which to execute the action for the first time.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.Action)">
      <summary>
            Schedules an action to be executed.
            </summary>
      <param name="scheduler">Scheduler to execute the action on.</param>
      <param name="action">Action to execute.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Action)">
      <summary>
            Schedules an action to be executed after the specified relative due time.
            </summary>
      <param name="scheduler">Scheduler to execute the action on.</param>
      <param name="action">Action to execute.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.DateTimeOffset,System.Action)">
      <summary>
            Schedules an action to be executed at the specified absolute due time.
            </summary>
      <param name="scheduler">Scheduler to execute the action on.</param>
      <param name="action">Action to execute.</param>
      <param name="dueTime">Absolute time at which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleLongRunning(System.Reactive.Concurrency.ISchedulerLongRunning,System.Action{System.Reactive.Disposables.ICancelable})">
      <summary>
            Schedules an action to be executed.
            </summary>
      <param name="scheduler">Scheduler to execute the action on.</param>
      <param name="action">Action to execute.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="P:System.Reactive.Concurrency.Scheduler.Now">
      <summary>
            Gets the current time according to the local machine's system clock.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.Scheduler.Immediate">
      <summary>
            Gets a scheduler that schedules work immediately on the current thread.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.Scheduler.CurrentThread">
      <summary>
            Gets a scheduler that schedules work as soon as possible on the current thread.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.Scheduler.Default">
      <summary>
            Gets a scheduler that schedules work on the platform's default scheduler.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.Scheduler.ThreadPool">
      <summary>
            Gets a scheduler that schedules work on the thread pool.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.Scheduler.NewThread">
      <summary>
            Gets a scheduler that schedules work on a new thread using default thread creation options.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.Scheduler.TaskPool">
      <summary>
            Gets a scheduler that schedules work on Task Parallel Library (TPL) task pool using the default TaskScheduler.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.LocalScheduler">
      <summary>
            Abstract base class for machine-local schedulers, using the local system clock for time-based operations.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.LocalScheduler.WorkItem">
      <summary>
            Represents a work item in the absolute time scheduler.
            </summary>
      <remarks>
            This type is very similar to ScheduledItem, but we need a different Invoke signature to allow customization
            of the target scheduler (e.g. when called in a recursive scheduling context, see ExecuteNextShortTermWorkItem).
            </remarks>
    </member>
    <member name="T:System.Reactive.Concurrency.LocalScheduler.WorkItem`1">
      <summary>
            Represents a work item that closes over scheduler invocation state. Subtyping is
            used to have a common type for the scheduler queues.
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.MAXERRORRATIO">
      <summary>
            Maximum error ratio for timer drift. We've seen machines with 10s drift on a
            daily basis, which is in the order 10E-4, so we allow for extra margin here.
            This value is used to calculate early arrival for the long term queue timer
            that will reevaluate work for the short term queue.
            
            Example:  -------------------------------...---------------------*-----$
                                                                             ^     ^
                                                                             |     |
                                                                           early  due
                                                                           0.999  1.0
                                                                           
            We also make the gap between early and due at least LONGTOSHORT so we have
            enough time to transition work to short term and as a courtesy to the
            destination scheduler to manage its queues etc.
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.s_gate">
      <summary>
            Gate to protect queues and to synchronize scheduling decisions and system clock
            change management.
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.s_longTerm">
      <summary>
            Long term work queue. Contains work that's due beyond SHORTTERM, computed at the
            time of enqueueing.
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.s_nextLongTermTimer">
      <summary>
            Disposable resource for the long term timer that will reevaluate and dispatch the
            first item in the long term queue. A serial disposable is used to make "dispose
            current and assign new" logic easier. The disposable itself is never disposed.
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.s_nextLongTermWorkItem">
      <summary>
            Item at the head of the long term queue for which the current long term timer is
            running. Used to detect changes in the queue and decide whether we should replace
            or can continue using the current timer (because no earlier long term work was
            added to the queue).
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.s_shortTerm">
      <summary>
            Short term work queue. Contains work that's due soon, computed at the time of
            enqueueing or upon reevaluation of the long term queue causing migration of work
            items. This queue is kept in order to be able to relocate short term items back
            to the long term queue in case a system clock change occurs.
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.s_shortTermWork">
      <summary>
            Set of disposable handles to all of the current short term work Schedule calls,
            allowing those to be cancelled upon a system clock change.
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.SHORTTERM">
      <summary>
            Threshold where an item is considered to be short term work or gets moved from
            long term to short term.
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.LONGTOSHORT">
      <summary>
            Minimum threshold for the long term timer to fire before the queue is reevaluated
            for short term work. This value is chosen to be less than SHORTTERM in order to
            ensure the timer fires and has work to transition to the short term queue.
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.RETRYSHORT">
      <summary>
            Threshold used to determine when a short term timer has fired too early compared
            to the absolute due time. This provides a last chance protection against early
            completion of scheduled work, which can happen in case of time adjustment in the
            operating system (cf. GetSystemTimeAdjustment).
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.Enqueue``1(System.Reactive.Concurrency.IScheduler,``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Enqueues absolute time scheduled work in the timer queue or the short term work list.
            </summary>
      <param name="scheduler">Scheduler to run the work on. Typically "this" from the caller's perspective (LocalScheduler.Schedule), but parameter kept because we have a single (static) timer queue across all of Rx local schedulers.</param>
      <param name="state">State to pass to the action.</param>
      <param name="dueTime">Absolute time to run the work on. The timer queue is responsible to execute the work close to the specified time, also accounting for system clock changes.</param>
      <param name="action">Action to run, potentially recursing into the scheduler.</param>
      <returns>Disposable object to prevent the work from running.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.ScheduleShortTermWork(System.Reactive.Concurrency.LocalScheduler.WorkItem)">
      <summary>
            Schedule work that's due in the short term. This leads to relative scheduling calls to the
            underlying scheduler for short TimeSpan values. If the system clock changes in the meantime,
            the short term work is attempted to be cancelled and reevaluated.
            </summary>
      <param name="item">Work item to schedule in the short term. The caller is responsible to determine the work is indeed short term.</param>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.ExecuteNextShortTermWorkItem(System.Reactive.Concurrency.IScheduler,System.IDisposable)">
      <summary>
            Callback to process the next short term work item.
            </summary>
      <param name="scheduler">Recursive scheduler supplied by the underlying scheduler.</param>
      <param name="cancel">Disposable used to identify the work the timer was triggered for (see code for usage).</param>
      <returns>Empty disposable. Recursive work cancellation is wired through the original WorkItem.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.ScheduleLongTermWork(System.Reactive.Concurrency.LocalScheduler.WorkItem)">
      <summary>
            Schedule work that's due on the long term. This leads to the work being queued up for
            eventual transitioning to the short term work list.
            </summary>
      <param name="item">Work item to schedule on the long term. The caller is responsible to determine the work is indeed long term.</param>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.UpdateLongTermProcessingTimer">
      <summary>
            Updates the long term timer which is responsible to transition work from the head of the
            long term queue to the short term work list.
            </summary>
      <remarks>Should be called under the scheduler lock.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.EvaluateLongTermQueue(System.Object)">
      <summary>
            Evaluates the long term queue, transitioning short term work to the short term list,
            and adjusting the new long term processing timer accordingly.
            </summary>
      <param name="state">Ignored.</param>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.SystemClockChanged(System.Object,System.Reactive.PlatformServices.SystemClockChangedEventArgs)">
      <summary>
            Callback invoked when a system clock change is observed in order to adjust and reevaluate
            the internal scheduling queues.
            </summary>
      <param name="args">Currently not used.</param>
      <param name="sender">Currently not used.</param>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed after dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed at dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Absolute time at which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.StartStopwatch">
      <summary>
            Starts a new stopwatch object.
            </summary>
      <returns>New stopwatch object; started at the time of the request.</returns>
      <remarks>
            Platform-specific scheduler implementations should reimplement IStopwatchProvider to provide a more
            efficient IStopwatch implementation (if available).
            </remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.GetService(System.Type)">
      <summary>
            Discovers scheduler services by interface type. The base class implementation returns
            requested services for each scheduler interface implemented by the derived class. For
            more control over service discovery, derived types can override this method.
            </summary>
      <param name="serviceType">Scheduler service interface type to discover.</param>
      <returns>Object implementing the requested service, if available; null otherwise.</returns>
    </member>
    <member name="P:System.Reactive.Concurrency.LocalScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.CurrentThreadScheduler">
      <summary>
            Represents an object that schedules units of work on the current thread.
            </summary>
      <seealso cref="P:System.Reactive.Concurrency.Scheduler.CurrentThread">Singleton instance of this type exposed through this static property.</seealso>
    </member>
    <member name="M:System.Reactive.Concurrency.CurrentThreadScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed after dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="P:System.Reactive.Concurrency.CurrentThreadScheduler.Instance">
      <summary>
            Gets the singleton instance of the current thread scheduler.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.CurrentThreadScheduler.ScheduleRequired">
      <summary>
            Gets a value that indicates whether the caller must call a Schedule method.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.CurrentThreadScheduler.IsScheduleRequired">
      <summary>
            Gets a value that indicates whether the caller must call a Schedule method.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.ImmediateScheduler">
      <summary>
            Represents an object that schedules units of work to run immediately on the current thread.
            </summary>
      <seealso cref="P:System.Reactive.Concurrency.Scheduler.Immediate">Singleton instance of this type exposed through this static property.</seealso>
    </member>
    <member name="M:System.Reactive.Concurrency.ImmediateScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.ImmediateScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed after dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="P:System.Reactive.Concurrency.ImmediateScheduler.Instance">
      <summary>
            Gets the singleton instance of the immediate scheduler.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.ScheduledItem`1">
      <summary>
            Abstract base class for scheduled work items.
            </summary>
      <typeparam name="TAbsolute">Absolute time representation type.</typeparam>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.#ctor(`0,System.Collections.Generic.IComparer{`0})">
      <summary>
            Creates a new scheduled work item to run at the specified time.
            </summary>
      <param name="dueTime">Absolute time at which the work item has to be executed.</param>
      <param name="comparer">Comparer used to compare work items based on their scheduled time.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.Invoke">
      <summary>
            Invokes the work item.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.InvokeCore">
      <summary>
            Implement this method to perform the work item invocation, returning a disposable object for deep cancellation.
            </summary>
      <returns>Disposable object used to cancel the work item and/or derived work items.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.CompareTo(System.Reactive.Concurrency.ScheduledItem{`0})">
      <summary>
            Compares the work item with another work item based on absolute time values.
            </summary>
      <param name="other">Work item to compare the current work item to.</param>
      <returns>Relative ordering between this and the specified work item.</returns>
      <remarks>The inequality operators are overloaded to provide results consistent with the IComparable implementation. Equality operators implement traditional reference equality semantics.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_LessThan(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
      <summary>
            Determines whether one specified ScheduledItem&lt;TAbsolute&gt; object is due before a second specified ScheduledItem&lt;TAbsolute&gt; object.
            </summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>true if the DueTime value of left is earlier than the DueTime value of right; otherwise, false.</returns>
      <remarks>This operator provides results consistent with the IComparable implementation.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_LessThanOrEqual(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
      <summary>
            Determines whether one specified ScheduledItem&lt;TAbsolute&gt; object is due before or at the same of a second specified ScheduledItem&lt;TAbsolute&gt; object.
            </summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>true if the DueTime value of left is earlier than or simultaneous with the DueTime value of right; otherwise, false.</returns>
      <remarks>This operator provides results consistent with the IComparable implementation.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_GreaterThan(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
      <summary>
            Determines whether one specified ScheduledItem&lt;TAbsolute&gt; object is due after a second specified ScheduledItem&lt;TAbsolute&gt; object.
            </summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>true if the DueTime value of left is later than the DueTime value of right; otherwise, false.</returns>
      <remarks>This operator provides results consistent with the IComparable implementation.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_GreaterThanOrEqual(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
      <summary>
            Determines whether one specified ScheduledItem&lt;TAbsolute&gt; object is due after or at the same time of a second specified ScheduledItem&lt;TAbsolute&gt; object.
            </summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>true if the DueTime value of left is later than or simultaneous with the DueTime value of right; otherwise, false.</returns>
      <remarks>This operator provides results consistent with the IComparable implementation.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_Equality(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
      <summary>
            Determines whether two specified ScheduledItem&lt;TAbsolute, TValue&gt; objects are equal.
            </summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>true if both ScheduledItem&lt;TAbsolute, TValue&gt; are equal; otherwise, false.</returns>
      <remarks>This operator does not provide results consistent with the IComparable implementation. Instead, it implements reference equality.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_Inequality(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
      <summary>
            Determines whether two specified ScheduledItem&lt;TAbsolute, TValue&gt; objects are inequal.
            </summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>true if both ScheduledItem&lt;TAbsolute, TValue&gt; are inequal; otherwise, false.</returns>
      <remarks>This operator does not provide results consistent with the IComparable implementation. Instead, it implements reference equality.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.Equals(System.Object)">
      <summary>
            Determines whether a ScheduledItem&lt;TAbsolute&gt; object is equal to the specified object.
            </summary>
      <param name="obj">The object to compare to the current ScheduledItem&lt;TAbsolute&gt; object.</param>
      <returns>true if the obj parameter is a ScheduledItem&lt;TAbsolute&gt; object and is equal to the current ScheduledItem&lt;TAbsolute&gt; object; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.GetHashCode">
      <summary>
            Returns the hash code for the current ScheduledItem&lt;TAbsolute&gt; object.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.Cancel">
      <summary>
            Cancels the work item by disposing the resource returned by InvokeCore as soon as possible.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.ScheduledItem`1.DueTime">
      <summary>
            Gets the absolute time at which the item is due for invocation.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.ScheduledItem`1.IsCanceled">
      <summary>
            Gets whether the work item has received a cancellation request.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.ScheduledItem`2">
      <summary>
            Represents a scheduled work item based on the materialization of an IScheduler.Schedule method call.
            </summary>
      <typeparam name="TAbsolute">Absolute time representation type.</typeparam>
      <typeparam name="TValue">Type of the state passed to the scheduled action.</typeparam>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`2.#ctor(System.Reactive.Concurrency.IScheduler,`1,System.Func{System.Reactive.Concurrency.IScheduler,`1,System.IDisposable},`0,System.Collections.Generic.IComparer{`0})">
      <summary>
            Creates a materialized work item.
            </summary>
      <param name="scheduler">Recursive scheduler to invoke the scheduled action with.</param>
      <param name="state">State to pass to the scheduled action.</param>
      <param name="action">Scheduled action.</param>
      <param name="dueTime">Time at which to run the scheduled action.</param>
      <param name="comparer">Comparer used to compare work items based on their scheduled time.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`2.#ctor(System.Reactive.Concurrency.IScheduler,`1,System.Func{System.Reactive.Concurrency.IScheduler,`1,System.IDisposable},`0)">
      <summary>
            Creates a materialized work item.
            </summary>
      <param name="scheduler">Recursive scheduler to invoke the scheduled action with.</param>
      <param name="state">State to pass to the scheduled action.</param>
      <param name="action">Scheduled action.</param>
      <param name="dueTime">Time at which to run the scheduled action.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`2.InvokeCore">
      <summary>
            Invokes the scheduled action with the supplied recursive scheduler and state.
            </summary>
      <returns>Cancellation resource returned by the scheduled action.</returns>
    </member>
    <member name="T:System.Reactive.Concurrency.SchedulerQueue`1">
      <summary>
            Efficient scheduler queue that maintains scheduled items sorted by absolute time.
            </summary>
      <typeparam name="TAbsolute">Absolute time representation type.</typeparam>
      <remarks>This type is not thread safe; users should ensure proper synchronization.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.#ctor">
      <summary>
            Creates a new scheduler queue with a default initial capacity.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.#ctor(System.Int32)">
      <summary>
            Creats a new scheduler queue with the specified initial capacity.
            </summary>
      <param name="capacity">Initial capacity of the scheduler queue.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.Enqueue(System.Reactive.Concurrency.ScheduledItem{`0})">
      <summary>
            Enqueues the specified work item to be scheduled.
            </summary>
      <param name="scheduledItem">Work item to be scheduled.</param>
    </member>
    <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.Remove(System.Reactive.Concurrency.ScheduledItem{`0})">
      <summary>
            Removes the specified work item from the scheduler queue.
            </summary>
      <param name="scheduledItem">Work item to be removed from the scheduler queue.</param>
      <returns>true if the item was found; false otherwise.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.Dequeue">
      <summary>
            Dequeues the next work item from the scheduler queue.
            </summary>
      <returns>Next work item in the scheduler queue (removed).</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.Peek">
      <summary>
            Peeks the next work item in the scheduler queue.
            </summary>
      <returns>Next work item in the scheduler queue (not removed).</returns>
    </member>
    <member name="P:System.Reactive.Concurrency.SchedulerQueue`1.Count">
      <summary>
            Gets the number of scheduled items in the scheduler queue.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.Synchronization">
      <summary>
            Provides basic synchronization and scheduling services for observable sequences.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.Synchronization.SubscribeOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Wraps the source sequence in order to run its subscription and unsubscription logic on the specified scheduler.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="scheduler">Scheduler to perform subscription and unsubscription actions on.</param>
      <returns>The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
            Only the side-effects of subscribing to the source sequence and disposing subscriptions to the source sequence are run on the specified scheduler.
            In order to invoke observer callbacks on the specified scheduler, e.g. to offload callback processing to a dedicated thread, use <see cref="M:System.Reactive.Concurrency.Synchronization.ObserveOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.Synchronization.SubscribeOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
      <summary>
            Wraps the source sequence in order to run its subscription and unsubscription logic on the specified synchronization context.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="context">Synchronization context to perform subscription and unsubscription actions on.</param>
      <returns>The source sequence whose subscriptions and unsubscriptions happen on the specified synchronization context.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="context" /> is null.</exception>
      <remarks>
            Only the side-effects of subscribing to the source sequence and disposing subscriptions to the source sequence are run on the specified synchronization context.
            In order to invoke observer callbacks on the specified synchronization context, e.g. to post callbacks to a UI thread represented by the synchronization context, use <see cref="M:System.Reactive.Concurrency.Synchronization.ObserveOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.Synchronization.ObserveOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Wraps the source sequence in order to run its observer callbacks on the specified scheduler.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="scheduler">Scheduler to notify observers on.</param>
      <returns>The source sequence whose observations happen on the specified scheduler.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Synchronization.ObserveOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
      <summary>
            Wraps the source sequence in order to run its observer callbacks on the specified synchronization context.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="context">Synchronization context to notify observers on.</param>
      <returns>The source sequence whose observations happen on the specified synchronization context.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Synchronization.Synchronize``1(System.IObservable{``0})">
      <summary>
            Wraps the source sequence in order to ensure observer callbacks are properly serialized.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <returns>The source sequence whose outgoing calls to observers are synchronized.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Synchronization.Synchronize``1(System.IObservable{``0},System.Object)">
      <summary>
            Wraps the source sequence in order to ensure observer callbacks are synchronized using the specified gate object.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="gate">Gate object to synchronize each observer call on.</param>
      <returns>The source sequence whose outgoing calls to observers are synchronized on the given gate object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="gate" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.IProducer`1">
      <summary>
            Interface with variance annotation; allows for better type checking when detecting capabilities in SubscribeSafe.
            </summary>
      <typeparam name="TSource">Type of the resulting sequence's elements.</typeparam>
    </member>
    <member name="T:System.Reactive.Producer`1">
      <summary>
            Base class for implementation of query operators, providing performance benefits over the use of Observable.Create.
            </summary>
      <typeparam name="TSource">Type of the resulting sequence's elements.</typeparam>
    </member>
    <member name="M:System.Reactive.Producer`1.Subscribe(System.IObserver{`0})">
      <summary>
            Publicly visible Subscribe method.
            </summary>
      <param name="observer">Observer to send notifications on. The implementation of a producer must ensure the correct message grammar on the observer.</param>
      <returns>IDisposable to cancel the subscription. This causes the underlying sink to be notified of unsubscription, causing it to prevent further messages from being sent to the observer.</returns>
    </member>
    <member name="M:System.Reactive.Producer`1.Run(System.IObserver{`0},System.IDisposable,System.Action{System.IDisposable})">
      <summary>
            Core implementation of the query operator, called upon a new subscription to the producer object.
            </summary>
      <param name="observer">Observer to send notifications on. The implementation of a producer must ensure the correct message grammar on the observer.</param>
      <param name="cancel">The subscription disposable object returned from the Run call, passed in such that it can be forwarded to the sink, allowing it to dispose the subscription upon sending a final message (or prematurely for other reasons).</param>
      <param name="setSink">Callback to communicate the sink object to the subscriber, allowing consumers to tunnel a Dispose call into the sink, which can stop the processing.</param>
      <returns>Disposable representing all the resources and/or subscriptions the operator uses to process events.</returns>
      <remarks>The <paramref name="observer">observer</paramref> passed in to this method is not protected using auto-detach behavior upon an OnError or OnCompleted call. The implementation must ensure proper resource disposal and enforce the message grammar.</remarks>
    </member>
    <member name="T:System.Reactive.Sink`1">
      <summary>
            Base class for implementation of query operators, providing a lightweight sink that can be disposed to mute the outgoing observer.
            </summary>
      <typeparam name="TSource">Type of the resulting sequence's elements.</typeparam>
      <remarks>Implementations of sinks are responsible to enforce the message grammar on the associated observer. Upon sending a terminal message, a pairing Dispose call should be made to trigger cancellation of related resources and to mute the outgoing observer.</remarks>
    </member>
    <member name="T:System.Reactive.Concurrency.SynchronizationContextScheduler">
      <summary>
            Represents an object that schedules units of work on a provided <seealso cref="T:System.Threading.SynchronizationContext" />.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.#ctor(System.Threading.SynchronizationContext)">
      <summary>
            Creates an object that schedules units of work on the provided <see cref="T:System.Threading.SynchronizationContext" />.
            </summary>
      <param name="context">Synchronization context to schedule units of work on.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.#ctor(System.Threading.SynchronizationContext,System.Boolean)">
      <summary>
            Creates an object that schedules units of work on the provided <see cref="T:System.Threading.SynchronizationContext" />.
            </summary>
      <param name="context">Synchronization context to schedule units of work on.</param>
      <param name="alwaysPost">Configures whether scheduling always posts to the synchronization context, regardless whether the caller is on the same synchronization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed after dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Concurrency.DefaultScheduler">
      <summary>
            Represents an object that schedules units of work on the platform's default scheduler.
            </summary>
      <seealso cref="P:System.Reactive.Concurrency.Scheduler.Default">Singleton instance of this type exposed through this static property.</seealso>
    </member>
    <member name="M:System.Reactive.Concurrency.DefaultScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.DefaultScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed after dueTime, using a System.Threading.Timer object.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.DefaultScheduler.SchedulePeriodic``1(``0,System.TimeSpan,System.Func{``0,``0})">
      <summary>
            Schedules a periodic piece of work, using a System.Threading.Timer object.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">Initial state passed to the action upon the first iteration.</param>
      <param name="period">Period for running the work periodically.</param>
      <param name="action">Action to be executed, potentially updating the state.</param>
      <returns>The disposable object used to cancel the scheduled recurring action (best effort).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.DefaultScheduler.GetService(System.Type)">
      <summary>
            Discovers scheduler services by interface type.
            </summary>
      <param name="serviceType">Scheduler service interface type to discover.</param>
      <returns>Object implementing the requested service, if available; null otherwise.</returns>
    </member>
    <member name="P:System.Reactive.Concurrency.DefaultScheduler.Instance">
      <summary>
            Gets the singleton instance of the default scheduler.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.AnonymousDisposable">
      <summary>
            Represents an Action-based disposable.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.AnonymousDisposable.#ctor(System.Action)">
      <summary>
            Constructs a new disposable with the given action used for disposal.
            </summary>
      <param name="dispose">Disposal action which will be run upon calling Dispose.</param>
    </member>
    <member name="M:System.Reactive.Disposables.AnonymousDisposable.Dispose">
      <summary>
            Calls the disposal action if and only if the current instance hasn't been disposed yet.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.AnonymousDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.BooleanDisposable">
      <summary>
            Represents a disposable resource that can be checked for disposal status.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.BooleanDisposable.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.BooleanDisposable" /> class.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.BooleanDisposable.Dispose">
      <summary>
            Sets the status to disposed, which can be observer through the <see cref="P:System.Reactive.Disposables.BooleanDisposable.IsDisposed" /> property.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.BooleanDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.CancellationDisposable">
      <summary>
            Represents a disposable resource that has an associated <seealso cref="T:System.Threading.CancellationToken" /> that will be set to the cancellation requested state upon disposal.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.CancellationDisposable.#ctor(System.Threading.CancellationTokenSource)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.CancellationDisposable" /> class that uses an existing <seealso cref="T:System.Threading.CancellationTokenSource" />.
            </summary>
      <param name="cts">
        <seealso cref="T:System.Threading.CancellationTokenSource" /> used for cancellation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cts" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.CancellationDisposable.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.CancellationDisposable" /> class that uses a new <seealso cref="T:System.Threading.CancellationTokenSource" />.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.CancellationDisposable.Dispose">
      <summary>
            Cancels the underlying <seealso cref="T:System.Threading.CancellationTokenSource" />.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.CancellationDisposable.Token">
      <summary>
            Gets the <see cref="T:System.Threading.CancellationToken" /> used by this CancellationDisposable.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.CancellationDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.CompositeDisposable">
      <summary>
            Represents a group of disposable resources that are disposed together.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.CompositeDisposable" /> class with no disposables contained by it initially.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.CompositeDisposable" /> class with the specified number of disposables.
            </summary>
      <param name="capacity">The number of disposables that the new CompositeDisposable can initially store.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor(System.IDisposable[])">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.CompositeDisposable" /> class from a group of disposables.
            </summary>
      <param name="disposables">Disposables that will be disposed together.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="disposables" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor(System.Collections.Generic.IEnumerable{System.IDisposable})">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.CompositeDisposable" /> class from a group of disposables.
            </summary>
      <param name="disposables">Disposables that will be disposed together.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="disposables" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.Add(System.IDisposable)">
      <summary>
            Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.
            </summary>
      <param name="item">Disposable to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.Remove(System.IDisposable)">
      <summary>
            Removes and disposes the first occurrence of a disposable from the CompositeDisposable.
            </summary>
      <param name="item">Disposable to remove.</param>
      <returns>true if found; false otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.Dispose">
      <summary>
            Disposes all disposables in the group and removes them from the group.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.Clear">
      <summary>
            Removes and disposes all disposables from the CompositeDisposable, but does not dispose the CompositeDisposable.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.Contains(System.IDisposable)">
      <summary>
            Determines whether the CompositeDisposable contains a specific disposable.
            </summary>
      <param name="item">Disposable to search for.</param>
      <returns>true if the disposable was found; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.CopyTo(System.IDisposable[],System.Int32)">
      <summary>
            Copies the disposables contained in the CompositeDisposable to an array, starting at a particular array index.
            </summary>
      <param name="array">Array to copy the contained disposables to.</param>
      <param name="arrayIndex">Target index at which to copy the first disposable of the group.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than zero. -or - <paramref name="arrayIndex" /> is larger than or equal to the array length.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the CompositeDisposable.
            </summary>
      <returns>An enumerator to iterate over the disposables.</returns>
    </member>
    <member name="P:System.Reactive.Disposables.CompositeDisposable.Count">
      <summary>
            Gets the number of disposables contained in the CompositeDisposable.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.CompositeDisposable.IsReadOnly">
      <summary>
            Always returns false.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.CompositeDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.ContextDisposable">
      <summary>
            Represents a disposable resource whose disposal invocation will be posted to the specified <seealso cref="T:System.Threading.SynchronizationContext" />.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.ContextDisposable.#ctor(System.Threading.SynchronizationContext,System.IDisposable)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.ContextDisposable" /> class that uses the specified <see cref="T:System.Threading.SynchronizationContext" /> on which to dispose the specified disposable resource.
            </summary>
      <param name="context">Context to perform disposal on.</param>
      <param name="disposable">Disposable whose Dispose operation to run on the given synchronization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> or <paramref name="disposable" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.ContextDisposable.Dispose">
      <summary>
            Disposes the underlying disposable on the provided <see cref="T:System.Threading.SynchronizationContext" />.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.ContextDisposable.Context">
      <summary>
            Gets the provided <see cref="T:System.Threading.SynchronizationContext" />.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.ContextDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.DefaultDisposable">
      <summary>
            Represents a disposable that does nothing on disposal.
            </summary>
    </member>
    <member name="F:System.Reactive.Disposables.DefaultDisposable.Instance">
      <summary>
            Singleton default disposable.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.DefaultDisposable.Dispose">
      <summary>
            Does nothing.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.Disposable">
      <summary>
            Provides a set of static methods for creating Disposables.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.Disposable.Create(System.Action)">
      <summary>
            Creates a disposable object that invokes the specified action when disposed.
            </summary>
      <param name="dispose">Action to run during the first call to <see cref="M:System.IDisposable.Dispose" />. The action is guaranteed to be run at most once.</param>
      <returns>The disposable object that runs the given action upon disposal.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispose" /> is null.</exception>
    </member>
    <member name="P:System.Reactive.Disposables.Disposable.Empty">
      <summary>
            Gets the disposable that does nothing when disposed.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.MultipleAssignmentDisposable">
      <summary>
            Represents a disposable resource whose underlying disposable resource can be swapped for another disposable resource.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.MultipleAssignmentDisposable.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.MultipleAssignmentDisposable" /> class with no current underlying disposable.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.MultipleAssignmentDisposable.Dispose">
      <summary>
            Disposes the underlying disposable as well as all future replacements.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.MultipleAssignmentDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.MultipleAssignmentDisposable.Disposable">
      <summary>
            Gets or sets the underlying disposable. After disposal, the result of getting this property is undefined.
            </summary>
      <remarks>If the MutableDisposable has already been disposed, assignment to this property causes immediate disposal of the given disposable object.</remarks>
    </member>
    <member name="T:System.Reactive.Disposables.RefCountDisposable">
      <summary>
            Represents a disposable resource that only disposes its underlying disposable resource when all <see cref="M:System.Reactive.Disposables.RefCountDisposable.GetDisposable">dependent disposable objects</see> have been disposed.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.RefCountDisposable.#ctor(System.IDisposable)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.RefCountDisposable" /> class with the specified disposable.
            </summary>
      <param name="disposable">Underlying disposable.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="disposable" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.RefCountDisposable.GetDisposable">
      <summary>
            Returns a dependent disposable that when disposed decreases the refcount on the underlying disposable.
            </summary>
      <returns>A dependent disposable contributing to the reference count that manages the underlying disposable's lifetime.</returns>
    </member>
    <member name="M:System.Reactive.Disposables.RefCountDisposable.Dispose">
      <summary>
            Disposes the underlying disposable only when all dependent disposables have been disposed.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.RefCountDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.ScheduledDisposable">
      <summary>
            Represents a disposable resource whose disposal invocation will be scheduled on the specified <seealso cref="T:System.Reactive.Concurrency.IScheduler" />.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.ScheduledDisposable.#ctor(System.Reactive.Concurrency.IScheduler,System.IDisposable)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.ScheduledDisposable" /> class that uses an <see cref="T:System.Reactive.Concurrency.IScheduler" /> on which to dispose the disposable.
            </summary>
      <param name="scheduler">Scheduler where the disposable resource will be disposed on.</param>
      <param name="disposable">Disposable resource to dispose on the given scheduler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="disposable" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.ScheduledDisposable.Dispose">
      <summary>
            Disposes the wrapped disposable on the provided scheduler.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.ScheduledDisposable.Scheduler">
      <summary>
            Gets the scheduler where the disposable resource will be disposed on.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.ScheduledDisposable.Disposable">
      <summary>
            Gets the underlying disposable. After disposal, the result is undefined.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.ScheduledDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.SerialDisposable">
      <summary>
            Represents a disposable resource whose underlying disposable resource can be replaced by another disposable resource, causing automatic disposal of the previous underlying disposable resource.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.SerialDisposable.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.SerialDisposable" /> class.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.SerialDisposable.Dispose">
      <summary>
            Disposes the underlying disposable as well as all future replacements.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.SerialDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.SerialDisposable.Disposable">
      <summary>
            Gets or sets the underlying disposable.
            </summary>
      <remarks>If the SerialDisposable has already been disposed, assignment to this property causes immediate disposal of the given disposable object. Assigning this property disposes the previous disposable object.</remarks>
    </member>
    <member name="T:System.Reactive.Disposables.SingleAssignmentDisposable">
      <summary>
            Represents a disposable resource which only allows a single assignment of its underlying disposable resource.
            If an underlying disposable resource has already been set, future attempts to set the underlying disposable resource will throw an <see cref="T:System.InvalidOperationException" />.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.SingleAssignmentDisposable.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.SingleAssignmentDisposable" /> class.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.SingleAssignmentDisposable.Dispose">
      <summary>
            Disposes the underlying disposable.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.SingleAssignmentDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.SingleAssignmentDisposable.Disposable">
      <summary>
            Gets or sets the underlying disposable. After disposal, the result of getting this property is undefined.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown if the SingleAssignmentDisposable has already been assigned to.</exception>
    </member>
    <member name="T:System.Reactive.PlatformServices.IExceptionServices">
      <summary>
            (Infrastructure) Services to rethrow exceptions.
            </summary>
      <remarks>
            This type is used by the Rx infrastructure and not meant for public consumption or implementation.
            No guarantees are made about forward compatibility of the type's functionality and its usage.
            </remarks>
    </member>
    <member name="M:System.Reactive.PlatformServices.IExceptionServices.Rethrow(System.Exception)">
      <summary>
            Rethrows the specified exception.
            </summary>
      <param name="exception">Exception to rethrow.</param>
    </member>
    <member name="T:System.Reactive.PlatformServices.HostLifecycleService">
      <summary>
            (Infrastructure) Provides access to the host's lifecycle management services.
            </summary>
    </member>
    <member name="M:System.Reactive.PlatformServices.HostLifecycleService.AddRef">
      <summary>
            Adds a reference to the host lifecycle manager, causing it to be sending notifications.
            </summary>
    </member>
    <member name="M:System.Reactive.PlatformServices.HostLifecycleService.Release">
      <summary>
            Removes a reference to the host lifecycle manager, causing it to stop sending notifications
            if the removed reference was the last one.
            </summary>
    </member>
    <member name="E:System.Reactive.PlatformServices.HostLifecycleService.Suspending">
      <summary>
            Event that gets raised when the host suspends the application.
            </summary>
    </member>
    <member name="E:System.Reactive.PlatformServices.HostLifecycleService.Resuming">
      <summary>
            Event that gets raised when the host resumes the application.
            </summary>
    </member>
    <member name="T:System.Reactive.PlatformServices.IHostLifecycleNotifications">
      <summary>
            (Infrastructure) Provides notifications about the host's lifecycle events.
            </summary>
    </member>
    <member name="E:System.Reactive.PlatformServices.IHostLifecycleNotifications.Suspending">
      <summary>
            Event that gets raised when the host suspends.
            </summary>
    </member>
    <member name="E:System.Reactive.PlatformServices.IHostLifecycleNotifications.Resuming">
      <summary>
            Event that gets raised when the host resumes.
            </summary>
    </member>
    <member name="T:System.Reactive.PlatformServices.HostSuspendingEventArgs">
      <summary>
            (Infrastructure) Event arguments for host suspension events.
            </summary>
    </member>
    <member name="T:System.Reactive.PlatformServices.HostResumingEventArgs">
      <summary>
            (Infrastructure) Event arguments for host resumption events.
            </summary>
    </member>
    <member name="T:System.Reactive.PlatformServices.IPlatformEnlightenmentProvider">
      <summary>
            (Infrastructure) Interface for enlightenment providers.
            </summary>
      <remarks>
            This type is used by the Rx infrastructure and not meant for public consumption or implementation.
            No guarantees are made about forward compatibility of the type's functionality and its usage.
            </remarks>
    </member>
    <member name="M:System.Reactive.PlatformServices.IPlatformEnlightenmentProvider.GetService``1(System.Object[])">
      <summary>
            (Infastructure) Tries to gets the specified service.
            </summary>
      <typeparam name="T">Service type.</typeparam>
      <param name="args">Optional set of arguments.</param>
      <returns>Service instance or null if not found.</returns>
    </member>
    <member name="T:System.Reactive.PlatformServices.PlatformEnlightenmentProvider">
      <summary>
            (Infrastructure) Provider for platform-specific framework enlightenments.
            </summary>
      <remarks>
            This type is used by the Rx infrastructure and not meant for public consumption or implementation.
            </remarks>
    </member>
    <member name="P:System.Reactive.PlatformServices.PlatformEnlightenmentProvider.Current">
      <summary>
            (Infrastructure) Gets the current enlightenment provider. If none is loaded yet, accessing this property triggers provider resolution.
            </summary>
      <remarks>
            This member is used by the Rx infrastructure and not meant for public consumption or implementation.
            </remarks>
    </member>
    <member name="T:System.Reactive.PlatformServices.SystemClock">
      <summary>
            (Infrastructure) Provides access to local system clock services.
            </summary>
      <remarks>
            This type is used by the Rx infrastructure and not meant for public consumption or implementation.
            No guarantees are made about forward compatibility of the type's functionality and its usage.
            </remarks>
    </member>
    <member name="M:System.Reactive.PlatformServices.SystemClock.AddRef">
      <summary>
            Adds a reference to the system clock monitor, causing it to be sending notifications.
            </summary>
      <exception cref="T:System.NotSupportedException">Thrown when the system doesn't support sending clock change notifications.</exception>
    </member>
    <member name="M:System.Reactive.PlatformServices.SystemClock.Release">
      <summary>
            Removes a reference to the system clock monitor, causing it to stop sending notifications
            if the removed reference was the last one.
            </summary>
    </member>
    <member name="P:System.Reactive.PlatformServices.SystemClock.UtcNow">
      <summary>
            Gets the local system clock time.
            </summary>
    </member>
    <member name="E:System.Reactive.PlatformServices.SystemClock.SystemClockChanged">
      <summary>
            Event that gets raised when a system clock change is detected, if there's any interest as indicated by AddRef calls.
            </summary>
    </member>
    <member name="T:System.Reactive.PlatformServices.ISystemClock">
      <summary>
            (Infrastructure) Provides access to the local system clock.
            </summary>
      <remarks>
            This type is used by the Rx infrastructure and not meant for public consumption or implementation.
            No guarantees are made about forward compatibility of the type's functionality and its usage.
            </remarks>
    </member>
    <member name="P:System.Reactive.PlatformServices.ISystemClock.UtcNow">
      <summary>
            Gets the current time.
            </summary>
    </member>
    <member name="T:System.Reactive.PlatformServices.INotifySystemClockChanged">
      <summary>
            (Infrastructure) Provides a mechanism to notify local schedulers about system clock changes.
            </summary>
      <remarks>
            This type is used by the Rx infrastructure and not meant for public consumption or implementation.
            No guarantees are made about forward compatibility of the type's functionality and its usage.
            </remarks>
    </member>
    <member name="E:System.Reactive.PlatformServices.INotifySystemClockChanged.SystemClockChanged">
      <summary>
            Event that gets raised when a system clock change is detected.
            </summary>
    </member>
    <member name="T:System.Reactive.PlatformServices.SystemClockChangedEventArgs">
      <summary>
            (Infrastructure) Event arguments for system clock change notifications.
            </summary>
      <remarks>
            This type is used by the Rx infrastructure and not meant for public consumption or implementation.
            No guarantees are made about forward compatibility of the type's functionality and its usage.
            </remarks>
    </member>
    <member name="M:System.Reactive.PlatformServices.SystemClockChangedEventArgs.#ctor">
      <summary>
            Creates a new system clock notification object with unknown old and new times.
            </summary>
    </member>
    <member name="M:System.Reactive.PlatformServices.SystemClockChangedEventArgs.#ctor(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
            Creates a new system clock notification object with the specified old and new times.
            </summary>
      <param name="oldTime">Time before the system clock changed, or DateTimeOffset.MinValue if not known.</param>
      <param name="newTime">Time after the system clock changed, or DateTimeOffset.MaxValue if not known.</param>
    </member>
    <member name="P:System.Reactive.PlatformServices.SystemClockChangedEventArgs.OldTime">
      <summary>
            Gets the time before the system clock changed, or DateTimeOffset.MinValue if not known.
            </summary>
    </member>
    <member name="P:System.Reactive.PlatformServices.SystemClockChangedEventArgs.NewTime">
      <summary>
            Gets the time after the system clock changed, or DateTimeOffset.MaxValue if not known.
            </summary>
    </member>
    <member name="T:System.Reactive.PlatformServices.DefaultSystemClock">
      <summary>
            (Infrastructure) Provides access to the local system clock.
            </summary>
    </member>
    <member name="P:System.Reactive.PlatformServices.DefaultSystemClock.UtcNow">
      <summary>
            Gets the current time.
            </summary>
    </member>
    <member name="T:System.Reactive.PlatformServices.PeriodicTimerSystemClockMonitor">
      <summary>
            (Infrastructure) Monitors for system clock changes based on a periodic timer.
            </summary>
    </member>
    <member name="M:System.Reactive.PlatformServices.PeriodicTimerSystemClockMonitor.#ctor(System.TimeSpan)">
      <summary>
            Creates a new monitor for system clock changes with the specified polling frequency.
            </summary>
      <param name="period">Polling frequency for system clock changes.</param>
    </member>
    <member name="E:System.Reactive.PlatformServices.PeriodicTimerSystemClockMonitor.SystemClockChanged">
      <summary>
            Event that gets raised when a system clock change is detected.
            </summary>
    </member>
    <member name="T:System.Reactive.NotificationKind">
      <summary>
            Indicates the type of a notification.
            </summary>
    </member>
    <member name="F:System.Reactive.NotificationKind.OnNext">
      <summary>
            Represents an OnNext notification.
            </summary>
    </member>
    <member name="F:System.Reactive.NotificationKind.OnError">
      <summary>
            Represents an OnError notification.
            </summary>
    </member>
    <member name="F:System.Reactive.NotificationKind.OnCompleted">
      <summary>
            Represents an OnCompleted notification.
            </summary>
    </member>
    <member name="T:System.Reactive.Notification`1">
      <summary>
            Represents a notification to an observer.
            </summary>
      <typeparam name="T">The type of the elements received by the observer.</typeparam>
    </member>
    <member name="T:System.Reactive.Notification`1.OnNextNotification">
      <summary>
            Represents an OnNext notification to an observer.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.OnNextNotification.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.OnNextNotification.ToString">
      <summary>
            Returns a string representation of this instance.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnNextNotification.Value">
      <summary>
            Returns the value of an OnNext notification.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnNextNotification.Exception">
      <summary>
            Returns null.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnNextNotification.HasValue">
      <summary>
            Returns true.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnNextNotification.Kind">
      <summary>
            Returns NotificationKind.OnNext.
            </summary>
    </member>
    <member name="T:System.Reactive.Notification`1.OnErrorNotification">
      <summary>
            Represents an OnError notification to an observer.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.OnErrorNotification.#ctor(System.Exception)">
      <summary>
            Constructs a notification of an exception.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.OnErrorNotification.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.OnErrorNotification.ToString">
      <summary>
            Returns a string representation of this instance.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnErrorNotification.Value">
      <summary>
            Throws the exception.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnErrorNotification.Exception">
      <summary>
            Returns the exception.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnErrorNotification.HasValue">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnErrorNotification.Kind">
      <summary>
            Returns NotificationKind.OnError.
            </summary>
    </member>
    <member name="T:System.Reactive.Notification`1.OnCompletedNotification">
      <summary>
            Represents an OnCompleted notification to an observer.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.OnCompletedNotification.#ctor">
      <summary>
            Constructs a notification of the end of a sequence.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.OnCompletedNotification.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.OnCompletedNotification.ToString">
      <summary>
            Returns a string representation of this instance.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnCompletedNotification.Value">
      <summary>
            Throws an InvalidOperationException.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnCompletedNotification.Exception">
      <summary>
            Returns null.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnCompletedNotification.HasValue">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnCompletedNotification.Kind">
      <summary>
            Returns NotificationKind.OnCompleted.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.#ctor">
      <summary>
            Default constructor used by derived types.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.Equals(System.Reactive.Notification{`0})">
      <summary>
            Determines whether the current Notification&lt;T&gt; object has the same observer message payload as a specified Notification&lt;T&gt; value.
            </summary>
      <param name="other">An object to compare to the current Notification&lt;T&gt; object.</param>
      <returns>true if both Notification&lt;T&gt; objects have the same observer message payload; otherwise, false.</returns>
      <remarks>
            Equality of Notification&lt;T&gt; objects is based on the equality of the observer message payload they represent, including the notification Kind and the Value or Exception (if any).
            This means two Notification&lt;T&gt; objects can be equal even though they don't represent the same observer method call, but have the same Kind and have equal parameters passed to the observer method.
            In case one wants to determine whether two Notification&lt;T&gt; objects represent the same observer method call, use Object.ReferenceEquals identity equality instead.
            </remarks>
    </member>
    <member name="M:System.Reactive.Notification`1.op_Equality(System.Reactive.Notification{`0},System.Reactive.Notification{`0})">
      <summary>
            Determines whether the two specified Notification&lt;T&gt; objects have the same observer message payload.
            </summary>
      <param name="left">The first Notification&lt;T&gt; to compare, or null.</param>
      <param name="right">The second Notification&lt;T&gt; to compare, or null.</param>
      <returns>true if the first Notification&lt;T&gt; value has the same observer message payload as the second Notification&lt;T&gt; value; otherwise, false.</returns>
      <remarks>
            Equality of Notification&lt;T&gt; objects is based on the equality of the observer message payload they represent, including the notification Kind and the Value or Exception (if any).
            This means two Notification&lt;T&gt; objects can be equal even though they don't represent the same observer method call, but have the same Kind and have equal parameters passed to the observer method.
            In case one wants to determine whether two Notification&lt;T&gt; objects represent the same observer method call, use Object.ReferenceEquals identity equality instead.
            </remarks>
    </member>
    <member name="M:System.Reactive.Notification`1.op_Inequality(System.Reactive.Notification{`0},System.Reactive.Notification{`0})">
      <summary>
            Determines whether the two specified Notification&lt;T&gt; objects have a different observer message payload.
            </summary>
      <param name="left">The first Notification&lt;T&gt; to compare, or null.</param>
      <param name="right">The second Notification&lt;T&gt; to compare, or null.</param>
      <returns>true if the first Notification&lt;T&gt; value has a different observer message payload as the second Notification&lt;T&gt; value; otherwise, false.</returns>
      <remarks>
            Equality of Notification&lt;T&gt; objects is based on the equality of the observer message payload they represent, including the notification Kind and the Value or Exception (if any).
            This means two Notification&lt;T&gt; objects can be equal even though they don't represent the same observer method call, but have the same Kind and have equal parameters passed to the observer method.
            In case one wants to determine whether two Notification&lt;T&gt; objects represent a different observer method call, use Object.ReferenceEquals identity equality instead.
            </remarks>
    </member>
    <member name="M:System.Reactive.Notification`1.Equals(System.Object)">
      <summary>
            Determines whether the specified System.Object is equal to the current Notification&lt;T&gt;.
            </summary>
      <param name="obj">The System.Object to compare with the current Notification&lt;T&gt;.</param>
      <returns>true if the specified System.Object is equal to the current Notification&lt;T&gt;; otherwise, false.</returns>
      <remarks>
            Equality of Notification&lt;T&gt; objects is based on the equality of the observer message payload they represent, including the notification Kind and the Value or Exception (if any).
            This means two Notification&lt;T&gt; objects can be equal even though they don't represent the same observer method call, but have the same Kind and have equal parameters passed to the observer method.
            In case one wants to determine whether two Notification&lt;T&gt; objects represent the same observer method call, use Object.ReferenceEquals identity equality instead.
            </remarks>
    </member>
    <member name="M:System.Reactive.Notification`1.Accept(System.IObserver{`0})">
      <summary>
            Invokes the observer's method corresponding to the notification.
            </summary>
      <param name="observer">Observer to invoke the notification on.</param>
    </member>
    <member name="M:System.Reactive.Notification`1.Accept``1(System.Reactive.IObserver{`0,``0})">
      <summary>
            Invokes the observer's method corresponding to the notification and returns the produced result.
            </summary>
      <typeparam name="TResult">The type of the result returned from the observer's notification handlers.</typeparam>
      <param name="observer">Observer to invoke the notification on.</param>
      <returns>Result produced by the observation.</returns>
    </member>
    <member name="M:System.Reactive.Notification`1.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
      <summary>
            Invokes the delegate corresponding to the notification.
            </summary>
      <param name="onNext">Delegate to invoke for an OnNext notification.</param>
      <param name="onError">Delegate to invoke for an OnError notification.</param>
      <param name="onCompleted">Delegate to invoke for an OnCompleted notification.</param>
    </member>
    <member name="M:System.Reactive.Notification`1.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
      <summary>
            Invokes the delegate corresponding to the notification and returns the produced result.
            </summary>
      <typeparam name="TResult">The type of the result returned from the notification handler delegates.</typeparam>
      <param name="onNext">Delegate to invoke for an OnNext notification.</param>
      <param name="onError">Delegate to invoke for an OnError notification.</param>
      <param name="onCompleted">Delegate to invoke for an OnCompleted notification.</param>
      <returns>Result produced by the observation.</returns>
    </member>
    <member name="M:System.Reactive.Notification`1.ToObservable">
      <summary>
            Returns an observable sequence with a single notification, using the immediate scheduler.
            </summary>
      <returns>The observable sequence that surfaces the behavior of the notification upon subscription.</returns>
    </member>
    <member name="M:System.Reactive.Notification`1.ToObservable(System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence with a single notification.
            </summary>
      <param name="scheduler">Scheduler to send out the notification calls on.</param>
      <returns>The observable sequence that surfaces the behavior of the notification upon subscription.</returns>
    </member>
    <member name="P:System.Reactive.Notification`1.Value">
      <summary>
            Returns the value of an OnNext notification or throws an exception.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.HasValue">
      <summary>
            Returns a value that indicates whether the notification has a value.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.Exception">
      <summary>
            Returns the exception of an OnError notification or returns null.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.Kind">
      <summary>
            Gets the kind of notification that is represented.
            </summary>
    </member>
    <member name="T:System.Reactive.Notification">
      <summary>
            Provides a set of static methods for constructing notifications.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification.CreateOnNext``1(``0)">
      <summary>
            Creates an object that represents an OnNext notification to an observer.
            </summary>
      <typeparam name="T">The type of the elements received by the observer. Upon dematerialization of the notifications into an observable sequence, this type is used as the element type for the sequence.</typeparam>
      <param name="value">The value contained in the notification.</param>
      <returns>The OnNext notification containing the value.</returns>
    </member>
    <member name="M:System.Reactive.Notification.CreateOnError``1(System.Exception)">
      <summary>
            Creates an object that represents an OnError notification to an observer.
            </summary>
      <typeparam name="T">The type of the elements received by the observer. Upon dematerialization of the notifications into an observable sequence, this type is used as the element type for the sequence.</typeparam>
      <param name="error">The exception contained in the notification.</param>
      <returns>The OnError notification containing the exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="error" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Notification.CreateOnCompleted``1">
      <summary>
            Creates an object that represents an OnCompleted notification to an observer.
            </summary>
      <typeparam name="T">The type of the elements received by the observer. Upon dematerialization of the notifications into an observable sequence, this type is used as the element type for the sequence.</typeparam>
      <returns>The OnCompleted notification.</returns>
    </member>
    <member name="T:System.Reactive.Unit">
      <summary>
            Represents a type with a single value. This type is often used to denote the successful completion of a void-returning method (C#) or a Sub procedure (Visual Basic).
            </summary>
    </member>
    <member name="M:System.Reactive.Unit.Equals(System.Reactive.Unit)">
      <summary>
            Determines whether the specified Unit values is equal to the current Unit. Because Unit has a single value, this always returns true.
            </summary>
      <param name="other">An object to compare to the current Unit value.</param>
      <returns>Because Unit has a single value, this always returns true.</returns>
    </member>
    <member name="M:System.Reactive.Unit.Equals(System.Object)">
      <summary>
            Determines whether the specified System.Object is equal to the current Unit.
            </summary>
      <param name="obj">The System.Object to compare with the current Unit.</param>
      <returns>true if the specified System.Object is a Unit value; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.Unit.GetHashCode">
      <summary>
            Returns the hash code for the current Unit value.
            </summary>
      <returns>A hash code for the current Unit value.</returns>
    </member>
    <member name="M:System.Reactive.Unit.ToString">
      <summary>
            Returns a string representation of the current Unit value.
            </summary>
      <returns>String representation of the current Unit value.</returns>
    </member>
    <member name="M:System.Reactive.Unit.op_Equality(System.Reactive.Unit,System.Reactive.Unit)">
      <summary>
            Determines whether the two specified Unit values are equal. Because Unit has a single value, this always returns true.
            </summary>
      <param name="first">The first Unit value to compare.</param>
      <param name="second">The second Unit value to compare.</param>
      <returns>Because Unit has a single value, this always returns true.</returns>
    </member>
    <member name="M:System.Reactive.Unit.op_Inequality(System.Reactive.Unit,System.Reactive.Unit)">
      <summary>
            Determines whether the two specified Unit values are not equal. Because Unit has a single value, this always returns false.
            </summary>
      <param name="first">The first Unit value to compare.</param>
      <param name="second">The second Unit value to compare.</param>
      <returns>Because Unit has a single value, this always returns false.</returns>
    </member>
    <member name="P:System.Reactive.Unit.Default">
      <summary>
            Gets the single unit value.
            </summary>
    </member>
    <member name="T:System.Reactive.Strings_Core">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.CANT_OBTAIN_SCHEDULER">
      <summary>
              Looks up a localized string similar to Using the Scheduler.{0} property is no longer supported due to refactoring of the API surface and elimination of platform-specific dependencies. Please include System.Reactive.PlatformServices for your target platform and use the {0}Scheduler type instead..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.COMPLETED_NO_VALUE">
      <summary>
              Looks up a localized string similar to OnCompleted notification doesn't have a value..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.DISPOSABLE_ALREADY_ASSIGNED">
      <summary>
              Looks up a localized string similar to Disposable has already been assigned..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.FAILED_CLOCK_MONITORING">
      <summary>
              Looks up a localized string similar to Failed to start monitoring system clock changes..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.HEAP_EMPTY">
      <summary>
              Looks up a localized string similar to Heap is empty..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.REENTRANCY_DETECTED">
      <summary>
              Looks up a localized string similar to Reentrancy has been detected..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.OBSERVER_TERMINATED">
      <summary>
              Looks up a localized string similar to Observer has already terminated..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.SCHEDULER_OPERATION_ALREADY_AWAITED">
      <summary>
              Looks up a localized string similar to This scheduler operation has already been awaited..
            </summary>
    </member>
    <member name="T:System.Reactive.Joins.NamespaceDoc">
      <summary>
            The <b>System.Reactive.Joins</b> namespace contains classes used to express join patterns over observable sequences using fluent method syntax.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.VirtualTimeSchedulerExtensions">
      <summary>
            Provides a set of extension methods for virtual time scheduling.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerExtensions.ScheduleRelative``2(System.Reactive.Concurrency.VirtualTimeSchedulerBase{``0,``1},``1,System.Action)">
      <summary>
            Schedules an action to be executed at dueTime.
            </summary>
      <typeparam name="TAbsolute">Absolute time representation type.</typeparam>
      <typeparam name="TRelative">Relative time representation type.</typeparam>
      <param name="scheduler">Scheduler to execute the action on.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerExtensions.ScheduleAbsolute``2(System.Reactive.Concurrency.VirtualTimeSchedulerBase{``0,``1},``0,System.Action)">
      <summary>
            Schedules an action to be executed at dueTime.
            </summary>
      <typeparam name="TAbsolute">Absolute time representation type.</typeparam>
      <typeparam name="TRelative">Relative time representation type.</typeparam>
      <param name="scheduler">Scheduler to execute the action on.</param>
      <param name="dueTime">Absolute time at which to execute the action.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Linq.LocalQueryMethodImplementationTypeAttribute">
      <summary>
            Attribute applied to static classes providing expression tree forms of query methods,
            mapping those to the corresponding methods for local query execution on the specified
            target class type.
            </summary>
    </member>
    <member name="M:System.Reactive.Linq.LocalQueryMethodImplementationTypeAttribute.#ctor(System.Type)">
      <summary>
            Creates a new mapping to the specified local execution query method implementation type.
            </summary>
      <param name="targetType">Type with query methods for local execution.</param>
    </member>
    <member name="P:System.Reactive.Linq.LocalQueryMethodImplementationTypeAttribute.TargetType">
      <summary>
            Gets the type with the implementation of local query methods.
            </summary>
    </member>
    <member name="T:System.Reactive.Linq.Observable">
      <summary>
            Provides a set of static methods for writing in-memory queries over observable sequences.
            </summary>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ForEachAsync``1(System.IObservable{``0},System.Action{``0})">
      <summary>
            Invokes an action for each element in the observable sequence, and returns a Task object that will get signaled when the sequence terminates.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <returns>Task that signals the termination of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ForEachAsync``1(System.IObservable{``0},System.Action{``0},System.Threading.CancellationToken)">
      <summary>
            Invokes an action for each element in the observable sequence, and returns a Task object that will get signaled when the sequence terminates.
            The loop can be quit prematurely by setting the specified cancellation token.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="cancellationToken">Cancellation token used to stop the loop.</param>
      <returns>Task that signals the termination of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ForEachAsync``1(System.IObservable{``0},System.Action{``0,System.Int32})">
      <summary>
            Invokes an action for each element in the observable sequence, incorporating the element's index, and returns a Task object that will get signaled when the sequence terminates.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <returns>Task that signals the termination of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ForEachAsync``1(System.IObservable{``0},System.Action{``0,System.Int32},System.Threading.CancellationToken)">
      <summary>
            Invokes an action for each element in the observable sequence, incorporating the element's index, and returns a Task object that will get signaled when the sequence terminates.
            The loop can be quit prematurely by setting the specified cancellation token.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="cancellationToken">Cancellation token used to stop the loop.</param>
      <returns>Task that signals the termination of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}},System.IObservable{``1})">
      <summary>
            Uses <paramref name="selector" /> to determine which source in <paramref name="sources" /> to return, choosing <paramref name="defaultSource" /> if no match is found.
            </summary>
      <typeparam name="TValue">The type of the value returned by the selector function, used to look up the resulting source.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="selector">Selector function invoked to determine the source to lookup in the <paramref name="sources" /> dictionary.</param>
      <param name="sources">Dictionary of sources to select from based on the <paramref name="selector" /> invocation result.</param>
      <param name="defaultSource">Default source to select in case no matching source in <paramref name="sources" /> is found.</param>
      <returns>The observable sequence retrieved from the <paramref name="sources" /> dictionary based on the <paramref name="selector" /> invocation result, or <paramref name="defaultSource" /> if no match is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> or <paramref name="sources" /> or <paramref name="defaultSource" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Uses <paramref name="selector" /> to determine which source in <paramref name="sources" /> to return, choosing an empty sequence on the specified scheduler if no match is found.
            </summary>
      <typeparam name="TValue">The type of the value returned by the selector function, used to look up the resulting source.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="selector">Selector function invoked to determine the source to lookup in the <paramref name="sources" /> dictionary.</param>
      <param name="sources">Dictionary of sources to select from based on the <paramref name="selector" /> invocation result.</param>
      <param name="scheduler">Scheduler to generate an empty sequence on in case no matching source in <paramref name="sources" /> is found.</param>
      <returns>The observable sequence retrieved from the <paramref name="sources" /> dictionary based on the <paramref name="selector" /> invocation result, or an empty sequence if no match is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> or <paramref name="sources" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}})">
      <summary>
            Uses <paramref name="selector" /> to determine which source in <paramref name="sources" /> to return, choosing an empty sequence if no match is found.
            </summary>
      <typeparam name="TValue">The type of the value returned by the selector function, used to look up the resulting source.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="selector">Selector function invoked to determine the source to lookup in the <paramref name="sources" /> dictionary.</param>
      <param name="sources">Dictionary of sources to select from based on the <paramref name="selector" /> invocation result.</param>
      <returns>The observable sequence retrieved from the <paramref name="sources" /> dictionary based on the <paramref name="selector" /> invocation result, or an empty sequence if no match is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> or <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DoWhile``1(System.IObservable{``0},System.Func{System.Boolean})">
      <summary>
            Repeats the given <paramref name="source" /> as long as the specified <paramref name="condition" /> holds, where the <paramref name="condition" /> is evaluated after each repeated <paramref name="source" /> completed.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source to repeat as long as the <paramref name="condition" /> function evaluates to true.</param>
      <param name="condition">Condition that will be evaluated upon the completion of an iteration through the <paramref name="source" />, to determine whether repetition of the source is required.</param>
      <returns>The observable sequence obtained by concatenating the <paramref name="source" /> sequence as long as the <paramref name="condition" /> holds.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="condition" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.For``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IObservable{``1}})">
      <summary>
            Concatenates the observable sequences obtained by running the <paramref name="resultSelector" /> for each element in the given enumerable <paramref name="source" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the enumerable source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the observable result sequence.</typeparam>
      <param name="source">Enumerable source for which each element will be mapped onto an observable source that will be concatenated in the result sequence.</param>
      <param name="resultSelector">Function to select an observable source for each element in the <paramref name="source" />.</param>
      <returns>The observable sequence obtained by concatenating the sources returned by <paramref name="resultSelector" /> for each element in the <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.If``1(System.Func{System.Boolean},System.IObservable{``0},System.IObservable{``0})">
      <summary>
            If the specified <paramref name="condition" /> evaluates true, select the <paramref name="thenSource" /> sequence. Otherwise, select the <paramref name="elseSource" /> sequence.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="condition">Condition evaluated to decide which sequence to return.</param>
      <param name="thenSource">Sequence returned in case <paramref name="condition" /> evaluates true.</param>
      <param name="elseSource">Sequence returned in case <paramref name="condition" /> evaluates false.</param>
      <returns>
        <paramref name="thenSource" /> if <paramref name="condition" /> evaluates true; <paramref name="elseSource" /> otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="thenSource" /> or <paramref name="elseSource" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.If``1(System.Func{System.Boolean},System.IObservable{``0})">
      <summary>
            If the specified <paramref name="condition" /> evaluates true, select the <paramref name="thenSource" /> sequence. Otherwise, return an empty sequence.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="condition">Condition evaluated to decide which sequence to return.</param>
      <param name="thenSource">Sequence returned in case <paramref name="condition" /> evaluates true.</param>
      <returns>
        <paramref name="thenSource" /> if <paramref name="condition" /> evaluates true; an empty sequence otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="thenSource" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.If``1(System.Func{System.Boolean},System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            If the specified <paramref name="condition" /> evaluates true, select the <paramref name="thenSource" /> sequence. Otherwise, return an empty sequence generated on the specified scheduler.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="condition">Condition evaluated to decide which sequence to return.</param>
      <param name="thenSource">Sequence returned in case <paramref name="condition" /> evaluates true.</param>
      <param name="scheduler">Scheduler to generate an empty sequence on in case <paramref name="condition" /> evaluates false.</param>
      <returns>
        <paramref name="thenSource" /> if <paramref name="condition" /> evaluates true; an empty sequence otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="thenSource" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.While``1(System.Func{System.Boolean},System.IObservable{``0})">
      <summary>
            Repeats the given <paramref name="source" /> as long as the specified <paramref name="condition" /> holds, where the <paramref name="condition" /> is evaluated before each repeated <paramref name="source" /> is subscribed to.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source to repeat as long as the <paramref name="condition" /> function evaluates to true.</param>
      <param name="condition">Condition that will be evaluated before subscription to the <paramref name="source" />, to determine whether repetition of the source is required.</param>
      <returns>The observable sequence obtained by concatenating the <paramref name="source" /> sequence as long as the <paramref name="condition" /> holds.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``5(System.Func{``0,``1,``2,``3,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``4})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``6(System.Func{``0,``1,``2,``3,``4,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``5})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``7(System.Func{``0,``1,``2,``3,``4,``5,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``6})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``7})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``8})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``9})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``10})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``11})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``12})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``13})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``14})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``4(System.Func{``0,``1,``2,``3,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``5(System.Func{``0,``1,``2,``3,``4,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``6(System.Func{``0,``1,``2,``3,``4,``5,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Start``1(System.Func{``0})">
      <summary>
            Invokes the specified function asynchronously, surfacing the result through an observable sequence.
            </summary>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to run asynchronously.</param>
      <returns>An observable sequence exposing the function's result value, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
      <remarks>
        <list type="bullet">
          <item>
            <description>The function is called immediately, not during the subscription of the resulting sequence.</description>
          </item>
          <item>
            <description>Multiple subscriptions to the resulting sequence can observe the function's result.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Start``1(System.Func{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Invokes the specified function asynchronously on the specified scheduler, surfacing the result through an observable sequence
            </summary>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to run asynchronously.</param>
      <param name="scheduler">Scheduler to run the function on.</param>
      <returns>An observable sequence exposing the function's result value, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <list type="bullet">
          <item>
            <description>The function is called immediately, not during the subscription of the resulting sequence.</description>
          </item>
          <item>
            <description>Multiple subscriptions to the resulting sequence can observe the function's result.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.StartAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>
            Invokes the asynchronous function, surfacing the result through an observable sequence.
            </summary>
      <typeparam name="TResult">The type of the result returned by the asynchronous function.</typeparam>
      <param name="functionAsync">Asynchronous function to run.</param>
      <returns>An observable sequence exposing the function's result value, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="functionAsync" /> is null.</exception>
      <remarks>
        <list type="bullet">
          <item>
            <description>The function is started immediately, not during the subscription of the resulting sequence.</description>
          </item>
          <item>
            <description>Multiple subscriptions to the resulting sequence can observe the function's result.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.StartAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
      <summary>
            Invokes the asynchronous function, surfacing the result through an observable sequence.
            The CancellationToken is shared by all subscriptions on the resulting observable sequence. See the remarks section for more information.
            </summary>
      <typeparam name="TResult">The type of the result returned by the asynchronous function.</typeparam>
      <param name="functionAsync">Asynchronous function to run.</param>
      <returns>An observable sequence exposing the function's result value, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="functionAsync" /> is null.</exception>
      <remarks>
        <list type="bullet">
          <item>
            <description>The function is started immediately, not during the subscription of the resulting sequence.</description>
          </item>
          <item>
            <description>Multiple subscriptions to the resulting sequence can observe the function's result.</description>
          </item>
          <item>
            <description>
            If any subscription to the resulting sequence is disposed, the CancellationToken is set. The observer associated to the disposed
            subscription won't see the TaskCanceledException, but other observers will. You can protect against this using the Catch operator.
            Be careful when handing out the resulting sequence because of this behavior. The most common use is to have a single subscription
            to the resulting sequence, which controls the CancellationToken state. Alternatively, you can control subscription behavior using
            multicast operators.
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Start(System.Action)">
      <summary>
            Invokes the action asynchronously, surfacing the result through an observable sequence.
            </summary>
      <param name="action">Action to run asynchronously.</param>
      <returns>An observable sequence exposing a Unit value upon completion of the action, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
      <remarks>
        <list type="bullet">
          <item>
            <description>The action is called immediately, not during the subscription of the resulting sequence.</description>
          </item>
          <item>
            <description>Multiple subscriptions to the resulting sequence can observe the action's outcome.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Start(System.Action,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Invokes the action asynchronously on the specified scheduler, surfacing the result through an observable sequence.
            </summary>
      <param name="action">Action to run asynchronously.</param>
      <param name="scheduler">Scheduler to run the action on.</param>
      <returns>An observable sequence exposing a Unit value upon completion of the action, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <list type="bullet">
          <item>
            <description>The action is called immediately, not during the subscription of the resulting sequence.</description>
          </item>
          <item>
            <description>Multiple subscriptions to the resulting sequence can observe the action's outcome.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.StartAsync(System.Func{System.Threading.Tasks.Task})">
      <summary>
            Invokes the asynchronous action, surfacing the result through an observable sequence.
            </summary>
      <param name="actionAsync">Asynchronous action to run.</param>
      <returns>An observable sequence exposing a Unit value upon completion of the action, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="actionAsync" /> is null.</exception>
      <remarks>
        <list type="bullet">
          <item>
            <description>The action is started immediately, not during the subscription of the resulting sequence.</description>
          </item>
          <item>
            <description>Multiple subscriptions to the resulting sequence can observe the action's outcome.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.StartAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
      <summary>
            Invokes the asynchronous action, surfacing the result through an observable sequence.
            The CancellationToken is shared by all subscriptions on the resulting observable sequence. See the remarks section for more information.
            </summary>
      <param name="actionAsync">Asynchronous action to run.</param>
      <returns>An observable sequence exposing a Unit value upon completion of the action, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="actionAsync" /> is null.</exception>
      <remarks>
        <list type="bullet">
          <item>
            <description>The action is started immediately, not during the subscription of the resulting sequence.</description>
          </item>
          <item>
            <description>Multiple subscriptions to the resulting sequence can observe the action's outcome.</description>
          </item>
          <item>
            <description>
            If any subscription to the resulting sequence is disposed, the CancellationToken is set. The observer associated to the disposed
            subscription won't see the TaskCanceledException, but other observers will. You can protect against this using the Catch operator.
            Be careful when handing out the resulting sequence because of this behavior. The most common use is to have a single subscription
            to the resulting sequence, which controls the CancellationToken state. Alternatively, you can control subscription behavior using
            multicast operators.
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>
            Converts to asynchronous function into an observable sequence. Each subscription to the resulting sequence causes the function to be started.
            </summary>
      <typeparam name="TResult">The type of the result returned by the asynchronous function.</typeparam>
      <param name="functionAsync">Asynchronous function to convert.</param>
      <returns>An observable sequence exposing the result of invoking the function, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="functionAsync" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
      <summary>
            Converts to asynchronous function into an observable sequence. Each subscription to the resulting sequence causes the function to be started.
            The CancellationToken passed to the asynchronous function is tied to the observable sequence's subscription that triggered the function's invocation and can be used for best-effort cancellation.
            </summary>
      <typeparam name="TResult">The type of the result returned by the asynchronous function.</typeparam>
      <param name="functionAsync">Asynchronous function to convert.</param>
      <returns>An observable sequence exposing the result of invoking the function, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="functionAsync" /> is null.</exception>
      <remarks>When a subscription to the resulting sequence is disposed, the CancellationToken that was fed to the asynchronous function will be signaled.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsync(System.Func{System.Threading.Tasks.Task})">
      <summary>
            Converts to asynchronous action into an observable sequence. Each subscription to the resulting sequence causes the action to be started.
            </summary>
      <param name="actionAsync">Asynchronous action to convert.</param>
      <returns>An observable sequence exposing a Unit value upon completion of the action, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="actionAsync" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
      <summary>
            Converts to asynchronous action into an observable sequence. Each subscription to the resulting sequence causes the action to be started.
            The CancellationToken passed to the asynchronous action is tied to the observable sequence's subscription that triggered the action's invocation and can be used for best-effort cancellation.
            </summary>
      <param name="actionAsync">Asynchronous action to convert.</param>
      <returns>An observable sequence exposing a Unit value upon completion of the action, or an exception.</returns>
      <remarks>When a subscription to the resulting sequence is disposed, the CancellationToken that was fed to the asynchronous function will be signaled.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="actionAsync" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``1(System.Func{``0})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``1(System.Func{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``2(System.Func{``0,``1})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``2(System.Func{``0,``1},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``3(System.Func{``0,``1,``2})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``3(System.Func{``0,``1,``2},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``4(System.Func{``0,``1,``2,``3})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``4(System.Func{``0,``1,``2,``3},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``5(System.Func{``0,``1,``2,``3,``4})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``5(System.Func{``0,``1,``2,``3,``4},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``6(System.Func{``0,``1,``2,``3,``4,``5})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``6(System.Func{``0,``1,``2,``3,``4,``5},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the function.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the function.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the function.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the function.</typeparam>
      <typeparam name="TArg15">The type of the fifteenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the function.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the function.</typeparam>
      <typeparam name="TArg15">The type of the fifteenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the function.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the function.</typeparam>
      <typeparam name="TArg15">The type of the fifteenth argument passed to the function.</typeparam>
      <typeparam name="TArg16">The type of the sixteenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the function.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the function.</typeparam>
      <typeparam name="TArg15">The type of the fifteenth argument passed to the function.</typeparam>
      <typeparam name="TArg16">The type of the sixteenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync(System.Action)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync(System.Action,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``1(System.Action{``0})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``1(System.Action{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``2(System.Action{``0,``1})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``2(System.Action{``0,``1},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``3(System.Action{``0,``1,``2})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``3(System.Action{``0,``1,``2},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``4(System.Action{``0,``1,``2,``3})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``4(System.Action{``0,``1,``2,``3},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``5(System.Action{``0,``1,``2,``3,``4})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``5(System.Action{``0,``1,``2,``3,``4},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``6(System.Action{``0,``1,``2,``3,``4,``5})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``6(System.Action{``0,``1,``2,``3,``4,``5},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the action.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the action.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the action.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the action.</typeparam>
      <typeparam name="TArg15">The type of the fifteenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the action.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the action.</typeparam>
      <typeparam name="TArg15">The type of the fifteenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the action.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the action.</typeparam>
      <typeparam name="TArg15">The type of the fifteenth argument passed to the action.</typeparam>
      <typeparam name="TArg16">The type of the sixteenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the action.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the action.</typeparam>
      <typeparam name="TArg15">The type of the fifteenth argument passed to the action.</typeparam>
      <typeparam name="TArg16">The type of the sixteenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Action{System.EventHandler},System.Action{System.EventHandler})">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on <see cref="T:System.EventHandler" />, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Action{System.EventHandler},System.Action{System.EventHandler},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on <see cref="T:System.EventHandler" />, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Action{``0},System.Action{``0})">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on a supplied event delegate type, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Action{``0},System.Action{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on a supplied event delegate type, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Func{System.EventHandler{``1},``0},System.Action{``0},System.Action{``0})">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on <see cref="T:System.EventHandler`1" />, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="conversion">A function used to convert the given event handler to a delegate compatible with the underlying .NET event. The resulting delegate is used in calls to the addHandler and removeHandler action parameters.</param>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversion" /> or <paramref name="addHandler" /> or <paramref name="removeHandler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Func{System.EventHandler{``1},``0},System.Action{``0},System.Action{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on <see cref="T:System.EventHandler`1" />, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="conversion">A function used to convert the given event handler to a delegate compatible with the underlying .NET event. The resulting delegate is used in calls to the addHandler and removeHandler action parameters.</param>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversion" /> or <paramref name="addHandler" /> or <paramref name="removeHandler" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``3(System.Action{``0},System.Action{``0})">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on a supplied event delegate type with a strongly typed sender parameter, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TSender">The type of the sender that raises the event.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``3(System.Action{``0},System.Action{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on a supplied event delegate type with a strongly typed sender parameter, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TSender">The type of the sender that raises the event.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}})">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on <see cref="T:System.EventHandler`1" />, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on <see cref="T:System.EventHandler`1" />, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Object,System.String)">
      <summary>
            Converts an instance .NET event, conforming to the standard .NET event pattern with an <see cref="T:System.EventArgs" /> parameter, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the target object type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <param name="target">Object instance that exposes the event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> or <paramref name="eventName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Object,System.String,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts an instance .NET event, conforming to the standard .NET event pattern with an <see cref="T:System.EventArgs" /> parameter, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the target object type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <param name="target">Object instance that exposes the event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> or <paramref name="eventName" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Object,System.String)">
      <summary>
            Converts an instance .NET event, conforming to the standard .NET event pattern with strongly typed event arguments, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the target object type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="target">Object instance that exposes the event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> or <paramref name="eventName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern. -or- The event's second argument type is not assignable to TEventArgs.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Object,System.String,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts an instance .NET event, conforming to the standard .NET event pattern with strongly typed event arguments, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the target object type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="target">Object instance that exposes the event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> or <paramref name="eventName" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern. -or- The event's second argument type is not assignable to TEventArgs.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Object,System.String)">
      <summary>
            Converts an instance .NET event, conforming to the standard .NET event pattern with a strongly typed sender and strongly typed event arguments, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the target object type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TSender">The type of the sender that raises the event.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="target">Object instance that exposes the event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> or <paramref name="eventName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern. -or- The event's first argument type is not assignable to TSender. -or- The event's second argument type is not assignable to TEventArgs.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Object,System.String,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts an instance .NET event, conforming to the standard .NET event pattern with a strongly typed sender and strongly typed event arguments, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the target object type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TSender">The type of the sender that raises the event.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="target">Object instance that exposes the event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> or <paramref name="eventName" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern. -or- The event's first argument type is not assignable to TSender. -or- The event's second argument type is not assignable to TEventArgs.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Type,System.String)">
      <summary>
            Converts a static .NET event, conforming to the standard .NET event pattern with an <see cref="T:System.EventArgs" /> parameter, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the specified type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <param name="type">Type that exposes the static event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="eventName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Type,System.String,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a static .NET event, conforming to the standard .NET event pattern with an <see cref="T:System.EventArgs" /> parameter, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the specified type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <param name="type">Type that exposes the static event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="eventName" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Type,System.String)">
      <summary>
            Converts a static .NET event, conforming to the standard .NET event pattern with strongly typed event arguments, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the specified type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="type">Type that exposes the static event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="eventName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern. -or- The event's second argument type is not assignable to TEventArgs.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Type,System.String,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a static .NET event, conforming to the standard .NET event pattern with strongly typed event arguments, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the specified type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="type">Type that exposes the static event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="eventName" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern. -or- The event's second argument type is not assignable to TEventArgs.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Type,System.String)">
      <summary>
            Converts a static .NET event, conforming to the standard .NET event pattern with a strongly typed sender and strongly typed event arguments, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the specified type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TSender">The type of the sender that raises the event.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="type">Type that exposes the static event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="eventName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern. -or- The event's first argument type is not assignable to TSender. -or- The event's second argument type is not assignable to TEventArgs.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Type,System.String,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a static .NET event, conforming to the standard .NET event pattern with a strongly typed sender and strongly typed event arguments, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the specified type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TSender">The type of the sender that raises the event.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="type">Type that exposes the static event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="eventName" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern. -or- The event's first argument type is not assignable to TSender. -or- The event's second argument type is not assignable to TEventArgs.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEvent``2(System.Func{System.Action{``1},``0},System.Action{``0},System.Action{``0})">
      <summary>
            Converts a .NET event to an observable sequence, using a conversion function to obtain the event delegate. Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events conforming to the standard .NET event pattern, use any of the FromEventPattern overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="conversion">A function used to convert the given event handler to a delegate compatible with the underlying .NET event. The resulting delegate is used in calls to the addHandler and removeHandler action parameters.</param>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <returns>The observable sequence that contains the event argument objects passed to the invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversion" /> or <paramref name="addHandler" /> or <paramref name="removeHandler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEvent, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEvent, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEvent calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEvent``2(System.Func{System.Action{``1},``0},System.Action{``0},System.Action{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a .NET event to an observable sequence, using a conversion function to obtain the event delegate. Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events conforming to the standard .NET event pattern, use any of the FromEventPattern overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="conversion">A function used to convert the given event handler to a delegate compatible with the underlying .NET event. The resulting delegate is used in calls to the addHandler and removeHandler action parameters.</param>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains the event argument objects passed to the invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversion" /> or <paramref name="addHandler" /> or <paramref name="removeHandler" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEvent calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEvent that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEvent``2(System.Action{``0},System.Action{``0})">
      <summary>
            Converts a .NET event to an observable sequence, using a supplied event delegate type. Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events conforming to the standard .NET event pattern, use any of the FromEventPattern overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <returns>The observable sequence that contains the event argument objects passed to the invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEvent, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEvent, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEvent calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEvent``2(System.Action{``0},System.Action{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a .NET event to an observable sequence, using a supplied event delegate type. Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events conforming to the standard .NET event pattern, use any of the FromEventPattern overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains the event argument objects passed to the invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEvent calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEvent that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEvent``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}})">
      <summary>
            Converts a generic Action-based .NET event to an observable sequence. Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events conforming to the standard .NET event pattern, use any of the FromEventPattern overloads instead.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <returns>The observable sequence that contains the event argument objects passed to the invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEvent, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEvent, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEvent calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEvent``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a generic Action-based .NET event to an observable sequence. Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events conforming to the standard .NET event pattern, use any of the FromEventPattern overloads instead.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains the event argument objects passed to the invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEvent calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEvent that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEvent(System.Action{System.Action},System.Action{System.Action})">
      <summary>
            Converts an Action-based .NET event to an observable sequence. Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events conforming to the standard .NET event pattern, use any of the FromEventPattern overloads instead.
            </summary>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <returns>The observable sequence that contains the event argument objects passed to the invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEvent, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEvent, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEvent calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEvent(System.Action{System.Action},System.Action{System.Action},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts an Action-based .NET event to an observable sequence. Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events conforming to the standard .NET event pattern, use any of the FromEventPattern overloads instead.
            </summary>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains the event argument objects passed to the invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEvent calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEvent that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Aggregate``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
      <summary>
            Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
            For aggregation behavior with incremental intermediate results, see <see cref="M:System.Reactive.Linq.Observable.Scan``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TAccumulate">The type of the result of the aggregation.</typeparam>
      <param name="source">An observable sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="accumulator">An accumulator function to be invoked on each element.</param>
      <returns>An observable sequence containing a single element with the final accumulator value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="accumulator" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Aggregate``3(System.IObservable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>
            Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value,
            and the specified result selector function is used to select the result value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <param name="source">An observable sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="accumulator">An accumulator function to be invoked on each element.</param>
      <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
      <returns>An observable sequence containing a single element with the final accumulator value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="accumulator" /> or <paramref name="resultSelector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Aggregate``1(System.IObservable{``0},System.Func{``0,``0,``0})">
      <summary>
            Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence.
            For aggregation behavior with incremental intermediate results, see <see cref="M:System.Reactive.Linq.Observable.Scan``1(System.IObservable{``0},System.Func{``0,``0,``0})" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and the result of the aggregation.</typeparam>
      <param name="source">An observable sequence to aggregate over.</param>
      <param name="accumulator">An accumulator function to be invoked on each element.</param>
      <returns>An observable sequence containing a single element with the final accumulator value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="accumulator" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.All``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Determines whether all elements of an observable sequence satisfy a condition.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence whose elements to apply the predicate to.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <returns>An observable sequence containing a single element determining whether all elements in the source sequence pass the test in the specified predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Any``1(System.IObservable{``0})">
      <summary>
            Determines whether an observable sequence contains any elements.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to check for non-emptiness.</param>
      <returns>An observable sequence containing a single element determining whether the source sequence contains any elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Any``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Determines whether any element of an observable sequence satisfies a condition.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence whose elements to apply the predicate to.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <returns>An observable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Double})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Single})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Decimal})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Decimal.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Int32})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Int32" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Int64})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Int64" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Double}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Single}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Decimal}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Decimal.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Int32}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Int64}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Decimal})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Decimal.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Double})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Single})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Int32})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Int64})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Decimal.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Contains``1(System.IObservable{``0},``0)">
      <summary>
            Determines whether an observable sequence contains a specified element by using the default equality comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence in which to locate a value.</param>
      <param name="value">The value to locate in the source sequence.</param>
      <returns>An observable sequence containing a single element determining whether the source sequence contains an element that has the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Contains``1(System.IObservable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Determines whether an observable sequence contains a specified element by using a specified System.Collections.Generic.IEqualityComparer&lt;T&gt;.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence in which to locate a value.</param>
      <param name="value">The value to locate in the source sequence.</param>
      <param name="comparer">An equality comparer to compare elements.</param>
      <returns>An observable sequence containing a single element determining whether the source sequence contains an element that has the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Count``1(System.IObservable{``0})">
      <summary>
            Returns an observable sequence containing an <see cref="T:System.Int32" /> that represents the total number of elements in an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence that contains elements to be counted.</param>
      <returns>An observable sequence containing a single element with the number of elements in the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The number of elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Count``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns an observable sequence containing an <see cref="T:System.Int32" /> that represents how many elements in the specified observable sequence satisfy a condition.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence that contains elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <returns>An observable sequence containing a single element with a number that represents how many elements in the input sequence satisfy the condition in the predicate function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ElementAt``1(System.IObservable{``0},System.Int32)">
      <summary>
            Returns the element at a specified index in a sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to return the element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <returns>An observable sequence that produces the element at the specified position in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">(Asynchronous) <paramref name="index" /> is greater than or equal to the number of elements in the source sequence.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ElementAtOrDefault``1(System.IObservable{``0},System.Int32)">
      <summary>
            Returns the element at a specified index in a sequence or a default value if the index is out of range.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to return the element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <returns>An observable sequence that produces the element at the specified position in the source sequence, or a default value if the index is outside the bounds of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FirstAsync``1(System.IObservable{``0})">
      <summary>
            Returns the first element of an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>Sequence containing the first element in the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FirstAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the first element of an observable sequence that satisfies the condition in the predicate.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>Sequence containing the first element in the observable sequence that satisfies the condition in the predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) No element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FirstOrDefaultAsync``1(System.IObservable{``0})">
      <summary>
            Returns the first element of an observable sequence, or a default value if no such element exists.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>Sequence containing the first element in the observable sequence, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FirstOrDefaultAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the first element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>Sequence containing the first element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.IsEmpty``1(System.IObservable{``0})">
      <summary>
            Determines whether an observable sequence is empty.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to check for emptiness.</param>
      <returns>An observable sequence containing a single element determining whether the source sequence is empty.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.LastAsync``1(System.IObservable{``0})">
      <summary>
            Returns the last element of an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>Sequence containing the last element in the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.LastAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the last element of an observable sequence that satisfies the condition in the predicate.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>Sequence containing the last element in the observable sequence that satisfies the condition in the predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) No element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.LastOrDefaultAsync``1(System.IObservable{``0})">
      <summary>
            Returns the last element of an observable sequence, or a default value if no such element exists.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>Sequence containing the last element in the observable sequence, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.LastOrDefaultAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the last element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>Sequence containing the last element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.LongCount``1(System.IObservable{``0})">
      <summary>
            Returns an observable sequence containing an <see cref="T:System.Int64" /> that represents the total number of elements in an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence that contains elements to be counted.</param>
      <returns>An observable sequence containing a single element with the number of elements in the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The number of elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.LongCount``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns an observable sequence containing an <see cref="T:System.Int64" /> that represents how many elements in the specified observable sequence satisfy a condition.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence that contains elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <returns>An observable sequence containing a single element with a number that represents how many elements in the input sequence satisfy the condition in the predicate function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0})">
      <summary>
            Returns the maximum element in an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to determine the maximum element of.</param>
      <returns>An observable sequence containing a single element with the maximum element in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns the maximum value in an observable sequence according to the specified comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to determine the maximum element of.</param>
      <param name="comparer">Comparer used to compare elements.</param>
      <returns>An observable sequence containing a single element with the maximum element in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Double})">
      <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Single})">
      <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Decimal})">
      <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Int32})">
      <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Int32" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Int64})">
      <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Int64" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Double}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Single}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Decimal}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Int32}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Int64}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the objects derived from the elements in the source sequence to determine the maximum of.</typeparam>
      <param name="source">An observable sequence to determine the mimimum element of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value that corresponds to the maximum element in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum value according to the specified comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the objects derived from the elements in the source sequence to determine the maximum of.</typeparam>
      <param name="source">An observable sequence to determine the mimimum element of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <param name="comparer">Comparer used to compare elements.</param>
      <returns>An observable sequence containing a single element with the value that corresponds to the maximum element in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Double})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Double" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Double" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Single})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Single" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Single" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Decimal})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Decimal" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Decimal" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Int32})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int32" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Int32" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Int64})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int64" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Int64" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Double" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Double&gt;" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Single" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Single&gt;" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Decimal" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Decimal&gt;" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int32" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Int32&gt;" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int64" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Int64&gt;" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.MaxBy``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Returns the elements in an observable sequence with the maximum key value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to get the maximum elements for.</param>
      <param name="keySelector">Key selector function.</param>
      <returns>An observable sequence containing a list of zero or more elements that have a maximum key value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.MaxBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Returns the elements in an observable sequence with the maximum key value according to the specified comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to get the maximum elements for.</param>
      <param name="keySelector">Key selector function.</param>
      <param name="comparer">Comparer used to compare key values.</param>
      <returns>An observable sequence containing a list of zero or more elements that have a maximum key value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0})">
      <summary>
            Returns the minimum element in an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to determine the mimimum element of.</param>
      <returns>An observable sequence containing a single element with the minimum element in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns the minimum element in an observable sequence according to the specified comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to determine the mimimum element of.</param>
      <param name="comparer">Comparer used to compare elements.</param>
      <returns>An observable sequence containing a single element with the minimum element in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Double})">
      <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Single})">
      <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Decimal})">
      <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Int32})">
      <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Int32" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Int64})">
      <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Int64" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Double}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Single}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Decimal}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Int32}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Int64}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the objects derived from the elements in the source sequence to determine the minimum of.</typeparam>
      <param name="source">An observable sequence to determine the mimimum element of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum value according to the specified comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the objects derived from the elements in the source sequence to determine the minimum of.</typeparam>
      <param name="source">An observable sequence to determine the mimimum element of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <param name="comparer">Comparer used to compare elements.</param>
      <returns>An observable sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Double})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Double" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Double" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Single})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Single" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Single" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Decimal})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Decimal" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Decimal" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Int32})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int32" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Int32" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Int64})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int64" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Int64" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Double" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Double&gt;" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Single" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Single&gt;" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Decimal" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Decimal&gt;" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int32" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Int32&gt;" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int64" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Int64&gt;" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.MinBy``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Returns the elements in an observable sequence with the minimum key value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to get the minimum elements for.</param>
      <param name="keySelector">Key selector function.</param>
      <returns>An observable sequence containing a list of zero or more elements that have a minimum key value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.MinBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Returns the elements in an observable sequence with the minimum key value according to the specified comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to get the minimum elements for.</param>
      <param name="keySelector">Key selector function.</param>
      <param name="comparer">Comparer used to compare key values.</param>
      <returns>An observable sequence containing a list of zero or more elements that have a minimum key value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SequenceEqual``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>
            Determines whether two sequences are equal by comparing the elements pairwise.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="first">First observable sequence to compare.</param>
      <param name="second">Second observable sequence to compare.</param>
      <returns>An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SequenceEqual``1(System.IObservable{``0},System.IObservable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Determines whether two sequences are equal by comparing the elements pairwise using a specified equality comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="first">First observable sequence to compare.</param>
      <param name="second">Second observable sequence to compare.</param>
      <param name="comparer">Comparer used to compare elements of both sequences.</param>
      <returns>An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the specified equality comparer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SequenceEqual``1(System.IObservable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Determines whether an observable and enumerable sequence are equal by comparing the elements pairwise.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="first">First observable sequence to compare.</param>
      <param name="second">Second observable sequence to compare.</param>
      <returns>An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SequenceEqual``1(System.IObservable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Determines whether an observable and enumerable sequence are equal by comparing the elements pairwise using a specified equality comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="first">First observable sequence to compare.</param>
      <param name="second">Second observable sequence to compare.</param>
      <param name="comparer">Comparer used to compare elements of both sequences.</param>
      <returns>An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the specified equality comparer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SingleAsync``1(System.IObservable{``0})">
      <summary>
            Returns the only element of an observable sequence, and reports an exception if there is not exactly one element in the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>Sequence containing the single element in the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence contains more than one element. -or- The source sequence is empty.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SingleAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the only element of an observable sequence that satisfies the condition in the predicate, and reports an exception if there is not exactly one element in the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>Sequence containing the single element in the observable sequence that satisfies the condition in the predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) No element satisfies the condition in the predicate. -or- More than one element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SingleOrDefaultAsync``1(System.IObservable{``0})">
      <summary>
            Returns the only element of an observable sequence, or a default value if the observable sequence is empty; this method reports an exception if there is more than one element in the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>Sequence containing the single element in the observable sequence, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence contains more than one element.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SingleOrDefaultAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the only element of an observable sequence that matches the predicate, or a default value if no such element exists; this method reports an exception if there is more than one element in the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>Sequence containing the single element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The sequence contains more than one element that satisfies the condition in the predicate.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Double})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Single})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Decimal})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Decimal.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Int32})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Int32" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Int32.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Int64})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Int64" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Double}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Single}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Decimal}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Decimal.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Int32}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Int32.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Int64}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Double})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Single})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Decimal})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Decimal.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Int32})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Int32.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Int64})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Decimal.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Int32.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToArray``1(System.IObservable{``0})">
      <summary>
            Creates an array from an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">The source observable sequence to get an array of elements for.</param>
      <returns>An observable sequence containing a single element with an array containing all the elements of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToDictionary``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Creates a dictionary from an observable sequence according to a specified key selector function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to create a dictionary for.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <returns>An observable sequence containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToDictionary``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Creates a dictionary from an observable sequence according to a specified key selector function, and a comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to create a dictionary for.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An equality comparer to compare keys.</param>
      <returns>An observable sequence containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToDictionary``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
            Creates a dictionary from an observable sequence according to a specified key selector function, and an element selector function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
      <typeparam name="TElement">The type of the dictionary value computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to create a dictionary for.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <returns>An observable sequence containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToDictionary``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Creates a dictionary from an observable sequence according to a specified key selector function, a comparer, and an element selector function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
      <typeparam name="TElement">The type of the dictionary value computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to create a dictionary for.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <param name="comparer">An equality comparer to compare keys.</param>
      <returns>An observable sequence containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToList``1(System.IObservable{``0})">
      <summary>
            Creates a list from an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">The source observable sequence to get a list of elements for.</param>
      <returns>An observable sequence containing a single element with a list containing all the elements of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToLookup``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Creates a lookup from an observable sequence according to a specified key selector function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to create a lookup for.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <returns>An observable sequence containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToLookup``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Creates a lookup from an observable sequence according to a specified key selector function, and a comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to create a lookup for.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An equality comparer to compare keys.</param>
      <returns>An observable sequence containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToLookup``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
            Creates a lookup from an observable sequence according to a specified key selector function, and an element selector function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
      <typeparam name="TElement">The type of the lookup value computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to create a lookup for.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <returns>An observable sequence containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToLookup``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Creates a lookup from an observable sequence according to a specified key selector function, a comparer, and an element selector function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
      <typeparam name="TElement">The type of the lookup value computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to create a lookup for.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <param name="comparer">An equality comparer to compare keys.</param>
      <returns>An observable sequence containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Multicast``2(System.IObservable{``0},System.Reactive.Subjects.ISubject{``0,``1})">
      <summary>
            Multicasts the source sequence notifications through the specified subject to the resulting connectable observable. Upon connection of the
            connectable observable, the subject is subscribed to the source exactly one, and messages are forwarded to the observers registered with
            the connectable observable. For specializations with fixed subject types, see Publish, PublishLast, and Replay.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be pushed into the specified subject.</param>
      <param name="subject">Subject to push source elements into.</param>
      <returns>A connectable observable sequence that upon connection causes the source sequence to push results into the specified subject.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="subject" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Multicast``3(System.IObservable{``0},System.Func{System.Reactive.Subjects.ISubject{``0,``1}},System.Func{System.IObservable{``1},System.IObservable{``2}})">
      <summary>
            Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function. Each
            subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function's
            invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TIntermediate">The type of the elements produced by the intermediate subject.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence which will be multicasted in the specified selector function.</param>
      <param name="subjectSelector">Factory function to create an intermediate subject through which the source sequence's elements will be multicast to the selector function.</param>
      <param name="selector">Selector function which can use the multicasted source sequence subject to the policies enforced by the created subject.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="subjectSelector" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Publish``1(System.IObservable{``0})">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence.
            This operator is a specialization of Multicast using a regular <see cref="T:System.Reactive.Subjects.Subject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>Subscribers will receive all notifications of the source from the time of the subscription on.</remarks>
      <seealso cref="T:System.Reactive.Subjects.Subject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Publish``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence.
            This operator is a specialization of Multicast using a regular <see cref="T:System.Reactive.Subjects.Subject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all notifications of the source from the time of the subscription on.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <seealso cref="T:System.Reactive.Subjects.Subject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Publish``1(System.IObservable{``0},``0)">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.BehaviorSubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="initialValue">Initial value received by observers upon subscription.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>Subscribers will receive immediately receive the initial value, followed by all notifications of the source from the time of the subscription on.</remarks>
      <seealso cref="T:System.Reactive.Subjects.BehaviorSubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Publish``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},``0)">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.BehaviorSubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive immediately receive the initial value, followed by all notifications of the source from the time of the subscription on.</param>
      <param name="initialValue">Initial value received by observers upon subscription.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <seealso cref="T:System.Reactive.Subjects.BehaviorSubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.PublishLast``1(System.IObservable{``0})">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.AsyncSubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>Subscribers will only receive the last notification of the source.</remarks>
      <seealso cref="T:System.Reactive.Subjects.AsyncSubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.PublishLast``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.AsyncSubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will only receive the last notification of the source.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <seealso cref="T:System.Reactive.Subjects.AsyncSubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.RefCount``1(System.Reactive.Subjects.IConnectableObservable{``0})">
      <summary>
            Returns an observable sequence that stays connected to the source as long as there is at least one subscription to the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Connectable observable sequence.</param>
      <returns>An observable sequence that stays connected to the source as long as there is at least one subscription to the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0})">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>Subscribers will receive all the notifications of the source.</remarks>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="scheduler">Scheduler where connected observers will be invoked on.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>Subscribers will receive all the notifications of the source.</remarks>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source.</param>
      <param name="scheduler">Scheduler where connected observers within the selector function will be invoked on.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> or <paramref name="scheduler" /> is null.</exception>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
      <remarks>Subscribers will receive all the notifications of the source subject to the specified replay buffer trimming policy.</remarks>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.TimeSpan)">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <param name="scheduler">Scheduler where connected observers will be invoked on.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
      <remarks>Subscribers will receive all the notifications of the source subject to the specified replay buffer trimming policy.</remarks>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <param name="scheduler">Scheduler where connected observers within the selector function will be invoked on.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying bufferSize notifications.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <param name="scheduler">Scheduler where connected observers will be invoked on.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
      <remarks>Subscribers will receive all the notifications of the source subject to the specified replay buffer trimming policy.</remarks>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum element count for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.</param>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <param name="scheduler">Scheduler where connected observers within the selector function will be invoked on.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32)">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum element count for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
      <remarks>Subscribers will receive all the notifications of the source subject to the specified replay buffer trimming policy.</remarks>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32)">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum element count for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.</param>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32,System.TimeSpan)">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length and element count for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
      <remarks>Subscribers will receive all the notifications of the source subject to the specified replay buffer trimming policy.</remarks>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.TimeSpan)">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length and element count for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.</param>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length and element count for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <param name="scheduler">Scheduler where connected observers will be invoked on.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
      <remarks>Subscribers will receive all the notifications of the source subject to the specified replay buffer trimming policy.</remarks>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length and element count for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.</param>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <param name="scheduler">Scheduler where connected observers within the selector function will be invoked on.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Chunkify``1(System.IObservable{``0})">
      <summary>
            Produces an enumerable sequence of consecutive (possibly empty) chunks of the source sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The enumerable sequence that returns consecutive (possibly empty) chunks upon each iteration.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Collect``2(System.IObservable{``0},System.Func{``1},System.Func{``1,``0,``1})">
      <summary>
            Produces an enumerable sequence that returns elements collected/aggregated from the source sequence between consecutive iterations.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements produced by the merge operation during collection.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="newCollector">Factory to create a new collector object.</param>
      <param name="merge">Merges a sequence element with the current collector.</param>
      <returns>The enumerable sequence that returns collected/aggregated elements from the source sequence upon each iteration.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="newCollector" /> or <paramref name="merge" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Collect``2(System.IObservable{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1})">
      <summary>
            Produces an enumerable sequence that returns elements collected/aggregated from the source sequence between consecutive iterations.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements produced by the merge operation during collection.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="getInitialCollector">Factory to create the initial collector object.</param>
      <param name="merge">Merges a sequence element with the current collector.</param>
      <param name="getNewCollector">Factory to replace the current collector by a new collector.</param>
      <returns>The enumerable sequence that returns collected/aggregated elements from the source sequence upon each iteration.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="getInitialCollector" /> or <paramref name="merge" /> or <paramref name="getNewCollector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.First``1(System.IObservable{``0})">
      <summary>
            Returns the first element of an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The first element in the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.FirstAsync``1(System.IObservable{``0})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.First``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the first element of an observable sequence that satisfies the condition in the predicate.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>The first element in the observable sequence that satisfies the condition in the predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.FirstAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FirstOrDefault``1(System.IObservable{``0})">
      <summary>
            Returns the first element of an observable sequence, or a default value if no such element exists.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The first element in the observable sequence, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.FirstOrDefaultAsync``1(System.IObservable{``0})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FirstOrDefault``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the first element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>The first element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.FirstOrDefaultAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.ForEach``1(System.IObservable{``0},System.Action{``0})">
      <summary>
            Invokes an action for each element in the observable sequence, and blocks until the sequence is terminated.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> is null.</exception>
      <remarks>Because of its blocking nature, this operator is mainly used for testing.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ForEach``1(System.IObservable{``0},System.Action{``0,System.Int32})">
      <summary>
            Invokes an action for each element in the observable sequence, incorporating the element's index, and blocks until the sequence is terminated.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> is null.</exception>
      <remarks>Because of its blocking nature, this operator is mainly used for testing.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GetEnumerator``1(System.IObservable{``0})">
      <summary>
            Returns an enumerator that enumerates all values of the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to get an enumerator for.</param>
      <returns>The enumerator that can be used to enumerate over the elements in the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Last``1(System.IObservable{``0})">
      <summary>
            Returns the last element of an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The last element in the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.LastAsync``1(System.IObservable{``0})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Last``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the last element of an observable sequence that satisfies the condition in the predicate.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>The last element in the observable sequence that satisfies the condition in the predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.LastAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.LastOrDefault``1(System.IObservable{``0})">
      <summary>
            Returns the last element of an observable sequence, or a default value if no such element exists.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The last element in the observable sequence, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.LastOrDefaultAsync``1(System.IObservable{``0})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.LastOrDefault``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the last element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>The last element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.LastOrDefaultAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Latest``1(System.IObservable{``0})">
      <summary>
            Returns an enumerable sequence whose enumeration returns the latest observed element in the source observable sequence.
            Enumerators on the resulting sequence will never produce the same element repeatedly, and will block until the next element becomes available.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The enumerable sequence that returns the last sampled element upon each iteration and subsequently blocks until the next element in the observable source sequence becomes available.</returns>
    </member>
    <member name="M:System.Reactive.Linq.Observable.MostRecent``1(System.IObservable{``0},``0)">
      <summary>
            Returns an enumerable sequence whose enumeration returns the most recently observed element in the source observable sequence, using the specified initial value in case no element has been sampled yet.
            Enumerators on the resulting sequence never block and can produce the same element repeatedly.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="initialValue">Initial value that will be yielded by the enumerable sequence if no element has been sampled yet.</param>
      <returns>The enumerable sequence that returns the last sampled element upon each iteration.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Next``1(System.IObservable{``0})">
      <summary>
            Returns an enumerable sequence whose enumeration blocks until the next element in the source observable sequence becomes available.
            Enumerators on the resulting sequence will block until the next element becomes available.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The enumerable sequence that blocks upon each iteration until the next element in the observable source sequence becomes available.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Single``1(System.IObservable{``0})">
      <summary>
            Returns the only element of an observable sequence, and throws an exception if there is not exactly one element in the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The single element in the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence contains more than one element. -or- The source sequence is empty.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.SingleAsync``1(System.IObservable{``0})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Single``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the only element of an observable sequence that satisfies the condition in the predicate, and throws an exception if there is not exactly one element matching the predicate in the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>The single element in the observable sequence that satisfies the condition in the predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in the predicate. -or- More than one element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.SingleAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.SingleOrDefault``1(System.IObservable{``0})">
      <summary>
            Returns the only element of an observable sequence, or a default value if the observable sequence is empty; this method throws an exception if there is more than one element in the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The single element in the observable sequence, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence contains more than one element.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.SingleOrDefaultAsync``1(System.IObservable{``0})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.SingleOrDefault``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the only element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists; this method throws an exception if there is more than one element matching the predicate in the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>The single element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The sequence contains more than one element that satisfies the condition in the predicate.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.SingleOrDefaultAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Wait``1(System.IObservable{``0})">
      <summary>
            Waits for the observable sequence to complete and returns the last element of the sequence.
            If the sequence terminates with an OnError notification, the exception is throw.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The last element in the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Wraps the source sequence in order to run its observer callbacks on the specified scheduler.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="scheduler">Scheduler to notify observers on.</param>
      <returns>The source sequence whose observations happen on the specified scheduler.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
            This only invokes observer callbacks on a scheduler. In case the subscription and/or unsubscription actions have side-effects
            that require to be run on a scheduler, use <see cref="M:System.Reactive.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
      <summary>
            Wraps the source sequence in order to run its observer callbacks on the specified synchronization context.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="context">Synchronization context to notify observers on.</param>
      <returns>The source sequence whose observations happen on the specified synchronization context.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="context" /> is null.</exception>
      <remarks>
            This only invokes observer callbacks on a synchronization context. In case the subscription and/or unsubscription actions have side-effects
            that require to be run on a synchronization context, use <see cref="M:System.Reactive.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Wraps the source sequence in order to run its subscription and unsubscription logic on the specified scheduler. This operation is not commonly used;
            see the remarks section for more information on the distinction between SubscribeOn and ObserveOn.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="scheduler">Scheduler to perform subscription and unsubscription actions on.</param>
      <returns>The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
            This only performs the side-effects of subscription and unsubscription on the specified scheduler. In order to invoke observer
            callbacks on a scheduler, use <see cref="M:System.Reactive.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
      <summary>
            Wraps the source sequence in order to run its subscription and unsubscription logic on the specified synchronization context. This operation is not commonly used;
            see the remarks section for more information on the distinction between SubscribeOn and ObserveOn.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="context">Synchronization context to perform subscription and unsubscription actions on.</param>
      <returns>The source sequence whose subscriptions and unsubscriptions happen on the specified synchronization context.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="context" /> is null.</exception>
      <remarks>
            This only performs the side-effects of subscription and unsubscription on the specified synchronization context. In order to invoke observer
            callbacks on a synchronization context, use <see cref="M:System.Reactive.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Synchronize``1(System.IObservable{``0})">
      <summary>
            Synchronizes the observable sequence such that observer notifications cannot be delivered concurrently.
            This overload is useful to "fix" an observable sequence that exhibits concurrent callbacks on individual observers, which is invalid behavior for the query processor.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <returns>The source sequence whose outgoing calls to observers are synchronized.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>
            It's invalid behavior - according to the observer grammar - for a sequence to exhibit concurrent callbacks on a given observer.
            This operator can be used to "fix" a source that doesn't conform to this rule.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Synchronize``1(System.IObservable{``0},System.Object)">
      <summary>
            Synchronizes the observable sequence such that observer notifications cannot be delivered concurrently, using the specified gate object.
            This overload is useful when writing n-ary query operators, in order to prevent concurrent callbacks from different sources by synchronizing on a common gate object.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="gate">Gate object to synchronize each observer call on.</param>
      <returns>The source sequence whose outgoing calls to observers are synchronized on the given gate object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="gate" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Subscribe``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0})">
      <summary>
            Subscribes an observer to an enumerable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Enumerable sequence to subscribe to.</param>
      <param name="observer">Observer that will receive notifications from the enumerable sequence.</param>
      <returns>Disposable object that can be used to unsubscribe the observer from the enumerable</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Subscribe``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Subscribes an observer to an enumerable sequence, using the specified scheduler to run the enumeration loop.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Enumerable sequence to subscribe to.</param>
      <param name="observer">Observer that will receive notifications from the enumerable sequence.</param>
      <param name="scheduler">Scheduler to perform the enumeration on.</param>
      <returns>Disposable object that can be used to unsubscribe the observer from the enumerable</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="observer" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToEnumerable``1(System.IObservable{``0})">
      <summary>
            Converts an observable sequence to an enumerable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to convert to an enumerable sequence.</param>
      <returns>The enumerable sequence containing the elements in the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})">
      <summary>
            Exposes an observable sequence as an object with an Action-based .NET event.
            </summary>
      <param name="source">Observable source sequence.</param>
      <returns>The event source object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToEvent``1(System.IObservable{``0})">
      <summary>
            Exposes an observable sequence as an object with an Action&lt;TSource&gt;-based .NET event.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable source sequence.</param>
      <returns>The event source object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})">
      <summary>
            Exposes an observable sequence as an object with a .NET event, conforming to the standard .NET event pattern.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="source">Observable source sequence.</param>
      <returns>The event source object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts an enumerable sequence to an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Enumerable sequence to convert to an observable sequence.</param>
      <returns>The observable sequence whose elements are pulled from the given enumerable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts an enumerable sequence to an observable sequence, using the specified scheduler to run the enumeration loop.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Enumerable sequence to convert to an observable sequence.</param>
      <param name="scheduler">Scheduler to run the enumeration of the input sequence on.</param>
      <returns>The observable sequence whose elements are pulled from the given enumerable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.IDisposable})">
      <summary>
            Creates an observable sequence from a specified Subscribe method implementation.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="subscribe">Implementation of the resulting observable sequence's Subscribe method.</param>
      <returns>The observable sequence with the specified implementation for the Subscribe method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribe" /> is null.</exception>
      <remarks>
            Use of this operator is preferred over manual implementation of the IObservable&lt;T&gt; interface. In case
            you need a type implementing IObservable&lt;T&gt; rather than an anonymous implementation, consider using
            the <see cref="T:System.Reactive.ObservableBase`1" /> abstract base class.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Action})">
      <summary>
            Creates an observable sequence from a specified Subscribe method implementation.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="subscribe">Implementation of the resulting observable sequence's Subscribe method, returning an Action delegate that will be wrapped in an IDisposable.</param>
      <returns>The observable sequence with the specified implementation for the Subscribe method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribe" /> is null.</exception>
      <remarks>
            Use of this operator is preferred over manual implementation of the IObservable&lt;T&gt; interface. In case
            you need a type implementing IObservable&lt;T&gt; rather than an anonymous implementation, consider using
            the <see cref="T:System.Reactive.ObservableBase`1" /> abstract base class.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task})">
      <summary>
            Creates an observable sequence from a specified cancellable asynchronous Subscribe method.
            The CancellationToken passed to the asynchronous Subscribe method is tied to the returned disposable subscription, allowing best-effort cancellation.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="subscribeAsync">Asynchronous method used to produce elements.</param>
      <returns>The observable sequence surfacing the elements produced by the asynchronous method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribeAsync" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
      <remarks>When a subscription to the resulting sequence is disposed, the CancellationToken that was fed to the asynchronous subscribe function will be signaled.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Threading.Tasks.Task})">
      <summary>
            Creates an observable sequence from a specified asynchronous Subscribe method.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="subscribeAsync">Asynchronous method used to produce elements.</param>
      <returns>The observable sequence surfacing the elements produced by the asynchronous method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribeAsync" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IDisposable}})">
      <summary>
            Creates an observable sequence from a specified cancellable asynchronous Subscribe method.
            The CancellationToken passed to the asynchronous Subscribe method is tied to the returned disposable subscription, allowing best-effort cancellation.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="subscribeAsync">Asynchronous method used to implemented the resulting sequence's Subscribe method.</param>
      <returns>The observable sequence with the specified implementation for the Subscribe method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribeAsync" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
      <remarks>When a subscription to the resulting sequence is disposed, the CancellationToken that was fed to the asynchronous subscribe function will be signaled.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Threading.Tasks.Task{System.IDisposable}})">
      <summary>
            Creates an observable sequence from a specified asynchronous Subscribe method.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="subscribeAsync">Asynchronous method used to implemented the resulting sequence's Subscribe method.</param>
      <returns>The observable sequence with the specified implementation for the Subscribe method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribeAsync" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Action}})">
      <summary>
            Creates an observable sequence from a specified cancellable asynchronous Subscribe method.
            The CancellationToken passed to the asynchronous Subscribe method is tied to the returned disposable subscription, allowing best-effort cancellation.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="subscribeAsync">Asynchronous method used to implemented the resulting sequence's Subscribe method, returning an Action delegate that will be wrapped in an IDisposable.</param>
      <returns>The observable sequence with the specified implementation for the Subscribe method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribeAsync" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
      <remarks>When a subscription to the resulting sequence is disposed, the CancellationToken that was fed to the asynchronous subscribe function will be signaled.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Threading.Tasks.Task{System.Action}})">
      <summary>
            Creates an observable sequence from a specified asynchronous Subscribe method.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="subscribeAsync">Asynchronous method used to implemented the resulting sequence's Subscribe method, returning an Action delegate that will be wrapped in an IDisposable.</param>
      <returns>The observable sequence with the specified implementation for the Subscribe method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribeAsync" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Defer``1(System.Func{System.IObservable{``0}})">
      <summary>
            Returns an observable sequence that invokes the specified factory function whenever a new observer subscribes.
            </summary>
      <typeparam name="TResult">The type of the elements in the sequence returned by the factory function, and in the resulting sequence.</typeparam>
      <param name="observableFactory">Observable factory function to invoke for each observer that subscribes to the resulting sequence.</param>
      <returns>An observable sequence whose observers trigger an invocation of the given observable factory function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observableFactory" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Defer``1(System.Func{System.Threading.Tasks.Task{System.IObservable{``0}}})">
      <summary>
            Returns an observable sequence that starts the specified asynchronous factory function whenever a new observer subscribes.
            </summary>
      <typeparam name="TResult">The type of the elements in the sequence returned by the factory function, and in the resulting sequence.</typeparam>
      <param name="observableFactoryAsync">Asynchronous factory function to start for each observer that subscribes to the resulting sequence.</param>
      <returns>An observable sequence whose observers trigger the given asynchronous observable factory function to be started.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observableFactoryAsync" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DeferAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IObservable{``0}}})">
      <summary>
            Returns an observable sequence that starts the specified cancellable asynchronous factory function whenever a new observer subscribes.
            The CancellationToken passed to the asynchronous factory function is tied to the returned disposable subscription, allowing best-effort cancellation.
            </summary>
      <typeparam name="TResult">The type of the elements in the sequence returned by the factory function, and in the resulting sequence.</typeparam>
      <param name="observableFactoryAsync">Asynchronous factory function to start for each observer that subscribes to the resulting sequence.</param>
      <returns>An observable sequence whose observers trigger the given asynchronous observable factory function to be started.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observableFactoryAsync" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
      <remarks>When a subscription to the resulting sequence is disposed, the CancellationToken that was fed to the asynchronous observable factory function will be signaled.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Empty``1">
      <summary>
            Returns an empty observable sequence.
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <returns>An observable sequence with no elements.</returns>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Empty``1(``0)">
      <summary>
            Returns an empty observable sequence.
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <param name="witness">Object solely used to infer the type of the <typeparamref name="TResult" /> type parameter. This parameter is typically used when creating a sequence of anonymously typed elements.</param>
      <returns>An observable sequence with no elements.</returns>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Empty``1(System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an empty observable sequence, using the specified scheduler to send out the single OnCompleted message.
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <param name="scheduler">Scheduler to send the termination call on.</param>
      <returns>An observable sequence with no elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Empty``1(System.Reactive.Concurrency.IScheduler,``0)">
      <summary>
            Returns an empty observable sequence, using the specified scheduler to send out the single OnCompleted message.
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <param name="scheduler">Scheduler to send the termination call on.</param>
      <param name="witness">Object solely used to infer the type of the <typeparamref name="TResult" /> type parameter. This parameter is typically used when creating a sequence of anonymously typed elements.</param>
      <returns>An observable sequence with no elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1})">
      <summary>
            Generates an observable sequence by running a state-driven loop producing the sequence's elements.
            </summary>
      <typeparam name="TState">The type of the state used in the generator loop.</typeparam>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="initialState">Initial state.</param>
      <param name="condition">Condition to terminate generation (upon returning false).</param>
      <param name="iterate">Iteration step function.</param>
      <param name="resultSelector">Selector function for results produced in the sequence.</param>
      <returns>The generated sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="iterate" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Generates an observable sequence by running a state-driven loop producing the sequence's elements, using the specified scheduler to send out observer messages.
            </summary>
      <typeparam name="TState">The type of the state used in the generator loop.</typeparam>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="initialState">Initial state.</param>
      <param name="condition">Condition to terminate generation (upon returning false).</param>
      <param name="iterate">Iteration step function.</param>
      <param name="resultSelector">Selector function for results produced in the sequence.</param>
      <param name="scheduler">Scheduler on which to run the generator loop.</param>
      <returns>The generated sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="iterate" /> or <paramref name="resultSelector" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Never``1">
      <summary>
            Returns a non-terminating observable sequence, which can be used to denote an infinite duration (e.g. when using reactive joins).
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <returns>An observable sequence whose observers will never get called.</returns>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Never``1(``0)">
      <summary>
            Returns a non-terminating observable sequence, which can be used to denote an infinite duration (e.g. when using reactive joins).
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <param name="witness">Object solely used to infer the type of the <typeparamref name="TResult" /> type parameter. This parameter is typically used when creating a sequence of anonymously typed elements.</param>
      <returns>An observable sequence whose observers will never get called.</returns>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Range(System.Int32,System.Int32)">
      <summary>
            Generates an observable sequence of integral numbers within a specified range.
            </summary>
      <param name="start">The value of the first integer in the sequence.</param>
      <param name="count">The number of sequential integers to generate.</param>
      <returns>An observable sequence that contains a range of sequential integral numbers.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero. -or- <paramref name="start" /> + <paramref name="count" /> - 1 is larger than <see cref="M:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Range(System.Int32,System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Generates an observable sequence of integral numbers within a specified range, using the specified scheduler to send out observer messages.
            </summary>
      <param name="start">The value of the first integer in the sequence.</param>
      <param name="count">The number of sequential integers to generate.</param>
      <param name="scheduler">Scheduler to run the generator loop on.</param>
      <returns>An observable sequence that contains a range of sequential integral numbers.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero. -or- <paramref name="start" /> + <paramref name="count" /> - 1 is larger than <see cref="M:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Repeat``1(``0)">
      <summary>
            Generates an observable sequence that repeats the given element infinitely.
            </summary>
      <typeparam name="TResult">The type of the element that will be repeated in the produced sequence.</typeparam>
      <param name="value">Element to repeat.</param>
      <returns>An observable sequence that repeats the given element infinitely.</returns>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Repeat``1(``0,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Generates an observable sequence that repeats the given element infinitely, using the specified scheduler to send out observer messages.
            </summary>
      <typeparam name="TResult">The type of the element that will be repeated in the produced sequence.</typeparam>
      <param name="value">Element to repeat.</param>
      <param name="scheduler">Scheduler to run the producer loop on.</param>
      <returns>An observable sequence that repeats the given element infinitely.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Repeat``1(``0,System.Int32)">
      <summary>
            Generates an observable sequence that repeats the given element the specified number of times.
            </summary>
      <typeparam name="TResult">The type of the element that will be repeated in the produced sequence.</typeparam>
      <param name="value">Element to repeat.</param>
      <param name="repeatCount">Number of times to repeat the element.</param>
      <returns>An observable sequence that repeats the given element the specified number of times.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="repeatCount" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Repeat``1(``0,System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Generates an observable sequence that repeats the given element the specified number of times, using the specified scheduler to send out observer messages.
            </summary>
      <typeparam name="TResult">The type of the element that will be repeated in the produced sequence.</typeparam>
      <param name="value">Element to repeat.</param>
      <param name="repeatCount">Number of times to repeat the element.</param>
      <param name="scheduler">Scheduler to run the producer loop on.</param>
      <returns>An observable sequence that repeats the given element the specified number of times.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="repeatCount" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Return``1(``0)">
      <summary>
            Returns an observable sequence that contains a single element.
            </summary>
      <typeparam name="TResult">The type of the element that will be returned in the produced sequence.</typeparam>
      <param name="value">Single element in the resulting observable sequence.</param>
      <returns>An observable sequence containing the single specified element.</returns>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Return``1(``0,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that contains a single element, using the specified scheduler to send out observer messages.
            </summary>
      <typeparam name="TResult">The type of the element that will be returned in the produced sequence.</typeparam>
      <param name="value">Single element in the resulting observable sequence.</param>
      <param name="scheduler">Scheduler to send the single element on.</param>
      <returns>An observable sequence containing the single specified element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)">
      <summary>
            Returns an observable sequence that terminates with an exception.
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <param name="exception">Exception object used for the sequence's termination.</param>
      <returns>The observable sequence that terminates exceptionally with the specified exception object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Throw``1(System.Exception,``0)">
      <summary>
            Returns an observable sequence that terminates with an exception.
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <param name="exception">Exception object used for the sequence's termination.</param>
      <param name="witness">Object solely used to infer the type of the <typeparamref name="TResult" /> type parameter. This parameter is typically used when creating a sequence of anonymously typed elements.</param>
      <returns>The observable sequence that terminates exceptionally with the specified exception object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Throw``1(System.Exception,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that terminates with an exception, using the specified scheduler to send out the single OnError message.
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <param name="exception">Exception object used for the sequence's termination.</param>
      <param name="scheduler">Scheduler to send the exceptional termination call on.</param>
      <returns>The observable sequence that terminates exceptionally with the specified exception object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Throw``1(System.Exception,System.Reactive.Concurrency.IScheduler,``0)">
      <summary>
            Returns an observable sequence that terminates with an exception, using the specified scheduler to send out the single OnError message.
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <param name="exception">Exception object used for the sequence's termination.</param>
      <param name="scheduler">Scheduler to send the exceptional termination call on.</param>
      <param name="witness">Object solely used to infer the type of the <typeparamref name="TResult" /> type parameter. This parameter is typically used when creating a sequence of anonymously typed elements.</param>
      <returns>The observable sequence that terminates exceptionally with the specified exception object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Using``2(System.Func{``1},System.Func{``1,System.IObservable{``0}})">
      <summary>
            Constructs an observable sequence that depends on a resource object, whose lifetime is tied to the resulting observable sequence's lifetime.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <typeparam name="TResource">The type of the resource used during the generation of the resulting sequence. Needs to implement <see cref="T:System.IDisposable" />.</typeparam>
      <param name="resourceFactory">Factory function to obtain a resource object.</param>
      <param name="observableFactory">Factory function to obtain an observable sequence that depends on the obtained resource.</param>
      <returns>An observable sequence whose lifetime controls the lifetime of the dependent resource object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceFactory" /> or <paramref name="observableFactory" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Using``2(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IObservable{``0}}})">
      <summary>
            Constructs an observable sequence that depends on a resource object, whose lifetime is tied to the resulting observable sequence's lifetime. The resource is obtained and used through asynchronous methods.
            The CancellationToken passed to the asynchronous methods is tied to the returned disposable subscription, allowing best-effort cancellation at any stage of the resource acquisition or usage.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <typeparam name="TResource">The type of the resource used during the generation of the resulting sequence. Needs to implement <see cref="T:System.IDisposable" />.</typeparam>
      <param name="resourceFactoryAsync">Asynchronous factory function to obtain a resource object.</param>
      <param name="observableFactoryAsync">Asynchronous factory function to obtain an observable sequence that depends on the obtained resource.</param>
      <returns>An observable sequence whose lifetime controls the lifetime of the dependent resource object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceFactoryAsync" /> or <paramref name="observableFactoryAsync" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
      <remarks>When a subscription to the resulting sequence is disposed, the CancellationToken that was fed to the asynchronous resource factory and observable factory functions will be signaled.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.And``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>
            Creates a pattern that matches when both observable sequences have an available element.
            </summary>
      <typeparam name="TLeft">The type of the elements in the left sequence.</typeparam>
      <typeparam name="TRight">The type of the elements in the right sequence.</typeparam>
      <param name="left">Observable sequence to match with the right sequence.</param>
      <param name="right">Observable sequence to match with the left sequence.</param>
      <returns>Pattern object that matches when both observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Then``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Matches when the observable sequence has an available element and projects the element by invoking the selector function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source">Observable sequence to apply the selector on.</param>
      <param name="selector">Selector that will be invoked for elements in the source sequence.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.When``1(System.Reactive.Joins.Plan{``0}[])">
      <summary>
            Joins together the results from several patterns.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained from the specified patterns.</typeparam>
      <param name="plans">A series of plans created by use of the Then operator on patterns.</param>
      <returns>An observable sequence with the results from matching several patterns.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="plans" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.When``1(System.Collections.Generic.IEnumerable{System.Reactive.Joins.Plan{``0}})">
      <summary>
            Joins together the results from several patterns.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained from the specified patterns.</typeparam>
      <param name="plans">A series of plans created by use of the Then operator on patterns.</param>
      <returns>An observable sequence with the results form matching several patterns.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="plans" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>
            Propagates the observable sequence that reacts first.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="first">First observable sequence.</param>
      <param name="second">Second observable sequence.</param>
      <returns>An observable sequence that surfaces either of the given sequences, whichever reacted first.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0}[])">
      <summary>
            Propagates the observable sequence that reacts first.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sources competing to react first.</param>
      <returns>An observable sequence that surfaces any of the given sequences, whichever reacted first.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Amb``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Propagates the observable sequence that reacts first.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sources competing to react first.</param>
      <returns>An observable sequence that surfaces any of the given sequences, whichever reacted first.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``2(System.IObservable{``0},System.Func{System.IObservable{``1}})">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <typeparam name="TBufferClosing">The type of the elements in the sequences indicating buffer closing events.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="bufferClosingSelector">A function invoked to define the boundaries of the produced buffers. A new buffer is started when the previous one is closed.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="bufferClosingSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``3(System.IObservable{``0},System.IObservable{``1},System.Func{``1,System.IObservable{``2}})">
      <summary>
            Projects each element of an observable sequence into zero or more buffers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <typeparam name="TBufferOpening">The type of the elements in the sequence indicating buffer opening events, also passed to the closing selector to obtain a sequence of buffer closing events.</typeparam>
      <typeparam name="TBufferClosing">The type of the elements in the sequences indicating buffer closing events.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="bufferOpenings">Observable sequence whose elements denote the creation of new buffers.</param>
      <param name="bufferClosingSelector">A function invoked to define the closing of each produced buffer.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="bufferOpenings" /> or <paramref name="bufferClosingSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <typeparam name="TBufferBoundary">The type of the elements in the sequences indicating buffer boundary events.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="bufferBoundaries">Sequence of buffer boundary markers. The current buffer is closed and a new buffer is opened upon receiving a boundary marker.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="bufferBoundaries" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Catch``2(System.IObservable{``0},System.Func{``1,System.IObservable{``0}})">
      <summary>
            Continues an observable sequence that is terminated by an exception of the specified type with the observable sequence produced by the handler.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and sequences returned by the exception handler function.</typeparam>
      <typeparam name="TException">The type of the exception to catch and handle. Needs to derive from <see cref="T:System.Exception" />.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="handler">Exception handler function, producing another observable sequence.</param>
      <returns>An observable sequence containing the source sequence's elements, followed by the elements produced by the handler's resulting observable sequence in case an exception occurred.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Catch``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and handler sequence.</typeparam>
      <param name="first">First observable sequence whose exception (if any) is caught.</param>
      <param name="second">Second observable sequence used to produce results when an error occurred in the first sequence.</param>
      <returns>An observable sequence containing the first sequence's elements, followed by the elements of the second sequence in case an exception occurred.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Catch``1(System.IObservable{``0}[])">
      <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source and handler sequences.</typeparam>
      <param name="sources">Observable sequences to catch exceptions for.</param>
      <returns>An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Catch``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source and handler sequences.</typeparam>
      <param name="sources">Observable sequences to catch exceptions for.</param>
      <returns>An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
      <summary>
            Merges two observable sequences into one observable sequence by using the selector function whenever one of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="first">First observable source.</param>
      <param name="second">Second observable source.</param>
      <param name="resultSelector">Function to invoke whenever either of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of both sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``4(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.Func{``0,``1,``2,``3})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``5(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.Func{``0,``1,``2,``3,``4})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``6(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.Func{``0,``1,``2,``3,``4,``5})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``7(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.Func{``0,``1,``2,``3,``4,``5,``6})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``8(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``9(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``10(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``11(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``12(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``13(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``14(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="source13">Thirteenth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="source13" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``15(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TSource14">The type of the elements in the fourteenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="source13">Thirteenth observable source.</param>
      <param name="source14">Fourteenth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="source13" /> or <paramref name="source14" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``16(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.IObservable{``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TSource14">The type of the elements in the fourteenth source sequence.</typeparam>
      <typeparam name="TSource15">The type of the elements in the fifteenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="source13">Thirteenth observable source.</param>
      <param name="source14">Fourteenth observable source.</param>
      <param name="source15">Fifteenth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="source13" /> or <paramref name="source14" /> or <paramref name="source15" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``17(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.IObservable{``14},System.IObservable{``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TSource14">The type of the elements in the fourteenth source sequence.</typeparam>
      <typeparam name="TSource15">The type of the elements in the fifteenth source sequence.</typeparam>
      <typeparam name="TSource16">The type of the elements in the sixteenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="source13">Thirteenth observable source.</param>
      <param name="source14">Fourteenth observable source.</param>
      <param name="source15">Fifteenth observable source.</param>
      <param name="source16">Sixteenth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="source13" /> or <paramref name="source14" /> or <paramref name="source15" /> or <paramref name="source16" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``2(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Func{System.Collections.Generic.IList{``0},``1})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="sources">Observable sources.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element. For efficiency, the input list is reused after the selector returns. Either aggregate or copy the values during the function call.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Merges the specified observable sequences into one observable sequence by emitting a list with the latest source elements whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences, and in the lists in the result sequence.</typeparam>
      <param name="sources">Observable sources.</param>
      <returns>An observable sequence containing lists of the latest elements of the sources.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``1(System.IObservable{``0}[])">
      <summary>
            Merges the specified observable sequences into one observable sequence by emitting a list with the latest source elements whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences, and in the lists in the result sequence.</typeparam>
      <param name="sources">Observable sources.</param>
      <returns>An observable sequence containing lists of the latest elements of the sources.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Concat``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>
            Concatenates the second observable sequence to the first observable sequence upon successful termination of the first.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="first">First observable sequence.</param>
      <param name="second">Second observable sequence.</param>
      <returns>An observable sequence that contains the elements of the first sequence, followed by those of the second the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Concat``1(System.IObservable{``0}[])">
      <summary>
            Concatenates all of the specified observable sequences, as long as the previous observable sequence terminated successfully.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequences to concatenate.</param>
      <returns>An observable sequence that contains the elements of each given sequence, in sequential order.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Concat``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Concatenates all observable sequences in the given enumerable sequence, as long as the previous observable sequence terminated successfully.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequences to concatenate.</param>
      <returns>An observable sequence that contains the elements of each given sequence, in sequential order.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Concat``1(System.IObservable{System.IObservable{``0}})">
      <summary>
            Concatenates all inner observable sequences, as long as the previous observable sequence terminated successfully.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequence of inner observable sequences.</param>
      <returns>An observable sequence that contains the elements of each observed inner sequence, in sequential order.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Concat``1(System.IObservable{System.Threading.Tasks.Task{``0}})">
      <summary>
            Concatenates all task results, as long as the previous task terminated successfully.
            </summary>
      <typeparam name="TSource">The type of the results produced by the tasks.</typeparam>
      <param name="sources">Observable sequence of tasks.</param>
      <returns>An observable sequence that contains the results of each task, in sequential order.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
      <remarks>If the tasks support cancellation, consider manual conversion of the tasks using <see cref="M:System.Reactive.Linq.Observable.FromAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})" />, followed by a concatenation operation using <see cref="M:System.Reactive.Linq.Observable.Concat``1(System.IObservable{System.IObservable{``0}})" />.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{System.IObservable{``0}})">
      <summary>
            Merges elements from all inner observable sequences into a single observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequence of inner observable sequences.</param>
      <returns>The observable sequence that merges the elements of the inner sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{System.Threading.Tasks.Task{``0}})">
      <summary>
            Merges results from all source tasks into a single observable sequence.
            </summary>
      <typeparam name="TSource">The type of the results produced by the source tasks.</typeparam>
      <param name="sources">Observable sequence of tasks.</param>
      <returns>The observable sequence that merges the results of the source tasks.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
      <remarks>If the tasks support cancellation, consider manual conversion of the tasks using <see cref="M:System.Reactive.Linq.Observable.FromAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})" />, followed by a merge operation using <see cref="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{System.IObservable{``0}})" />.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{System.IObservable{``0}},System.Int32)">
      <summary>
            Merges elements from all inner observable sequences into a single observable sequence, limiting the number of concurrent subscriptions to inner sequences.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequence of inner observable sequences.</param>
      <param name="maxConcurrent">Maximum number of inner observable sequences being subscribed to concurrently.</param>
      <returns>The observable sequence that merges the elements of the inner sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxConcurrent" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Int32)">
      <summary>
            Merges elements from all observable sequences in the given enumerable sequence into a single observable sequence, limiting the number of concurrent subscriptions to inner sequences.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Enumerable sequence of observable sequences.</param>
      <param name="maxConcurrent">Maximum number of observable sequences being subscribed to concurrently.</param>
      <returns>The observable sequence that merges the elements of the observable sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxConcurrent" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Merges elements from all observable sequences in the given enumerable sequence into a single observable sequence, limiting the number of concurrent subscriptions to inner sequences, and using the specified scheduler for enumeration of and subscription to the sources.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Enumerable sequence of observable sequences.</param>
      <param name="maxConcurrent">Maximum number of observable sequences being subscribed to concurrently.</param>
      <param name="scheduler">Scheduler to run the enumeration of the sequence of sources on.</param>
      <returns>The observable sequence that merges the elements of the observable sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxConcurrent" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>
            Merges elements from two observable sequences into a single observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="first">First observable sequence.</param>
      <param name="second">Second observable sequence.</param>
      <returns>The observable sequence that merges the elements of the given sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{``0},System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Merges elements from two observable sequences into a single observable sequence, using the specified scheduler for enumeration of and subscription to the sources.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="first">First observable sequence.</param>
      <param name="second">Second observable sequence.</param>
      <param name="scheduler">Scheduler used to introduce concurrency for making subscriptions to the given sequences.</param>
      <returns>The observable sequence that merges the elements of the given sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{``0}[])">
      <summary>
            Merges elements from all of the specified observable sequences into a single observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequences.</param>
      <returns>The observable sequence that merges the elements of the observable sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Reactive.Concurrency.IScheduler,System.IObservable{``0}[])">
      <summary>
            Merges elements from all of the specified observable sequences into a single observable sequence, using the specified scheduler for enumeration of and subscription to the sources.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequences.</param>
      <param name="scheduler">Scheduler to run the enumeration of the sequence of sources on.</param>
      <returns>The observable sequence that merges the elements of the observable sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Merges elements from all observable sequences in the given enumerable sequence into a single observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Enumerable sequence of observable sequences.</param>
      <returns>The observable sequence that merges the elements of the observable sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Merges elements from all observable sequences in the given enumerable sequence into a single observable sequence, using the specified scheduler for enumeration of and subscription to the sources.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Enumerable sequence of observable sequences.</param>
      <param name="scheduler">Scheduler to run the enumeration of the sequence of sources on.</param>
      <returns>The observable sequence that merges the elements of the observable sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.OnErrorResumeNext``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>
            Concatenates the second observable sequence to the first observable sequence upon successful or exceptional termination of the first.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="first">First observable sequence whose exception (if any) is caught.</param>
      <param name="second">Second observable sequence used to produce results after the first sequence terminates.</param>
      <returns>An observable sequence that concatenates the first and second sequence, even if the first sequence terminates exceptionally.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.OnErrorResumeNext``1(System.IObservable{``0}[])">
      <summary>
            Concatenates all of the specified observable sequences, even if the previous observable sequence terminated exceptionally.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequences to concatenate.</param>
      <returns>An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.OnErrorResumeNext``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Concatenates all observable sequences in the given enumerable sequence, even if the previous observable sequence terminated exceptionally.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequences to concatenate.</param>
      <returns>An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SkipUntil``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>
            Returns the elements from the source observable sequence only after the other observable sequence produces an element.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TOther">The type of the elements in the other sequence that indicates the end of skip behavior.</typeparam>
      <param name="source">Source sequence to propagate elements for.</param>
      <param name="other">Observable sequence that triggers propagation of elements of the source sequence.</param>
      <returns>An observable sequence containing the elements of the source sequence starting from the point the other sequence triggered propagation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Switch``1(System.IObservable{System.IObservable{``0}})">
      <summary>
            Switches between the inner observable sequences such that the resulting sequence always produces elements from the most recently received inner observable sequence.
            Each time a new inner observable sequence is received, the previous inner observable sequence is unsubscribed from.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequence of inner observable sequences.</param>
      <returns>The observable sequence that at any point in time produces the elements of the most recent inner observable sequence that has been received.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Switch``1(System.IObservable{System.Threading.Tasks.Task{``0}})">
      <summary>
            Switches between the tasks such that the resulting sequence always produces results from the most recently received task.
            Each time a new task is received, the previous task's result is ignored.
            </summary>
      <typeparam name="TSource">The type of the results produced by the source tasks.</typeparam>
      <param name="sources">Observable sequence of tasks.</param>
      <returns>The observable sequence that at any point in time produces the result of the most recent task that has been received.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
      <remarks>If the tasks support cancellation, consider manual conversion of the tasks using <see cref="M:System.Reactive.Linq.Observable.FromAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})" />, followed by a switch operation using <see cref="M:System.Reactive.Linq.Observable.Switch``1(System.IObservable{System.IObservable{``0}})" />.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeUntil``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>
            Returns the elements from the source observable sequence until the other observable sequence produces an element.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TOther">The type of the elements in the other sequence that indicates the end of take behavior.</typeparam>
      <param name="source">Source sequence to propagate elements for.</param>
      <param name="other">Observable sequence that terminates propagation of elements of the source sequence.</param>
      <returns>An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``2(System.IObservable{``0},System.Func{System.IObservable{``1}})">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping windows.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <typeparam name="TWindowClosing">The type of the elements in the sequences indicating window closing events.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="windowClosingSelector">A function invoked to define the boundaries of the produced windows. A new window is started when the previous one is closed.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="windowClosingSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``3(System.IObservable{``0},System.IObservable{``1},System.Func{``1,System.IObservable{``2}})">
      <summary>
            Projects each element of an observable sequence into zero or more windows.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <typeparam name="TWindowOpening">The type of the elements in the sequence indicating window opening events, also passed to the closing selector to obtain a sequence of window closing events.</typeparam>
      <typeparam name="TWindowClosing">The type of the elements in the sequences indicating window closing events.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="windowOpenings">Observable sequence whose elements denote the creation of new windows.</param>
      <param name="windowClosingSelector">A function invoked to define the closing of each produced window.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="windowOpenings" /> or <paramref name="windowClosingSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping windows.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <typeparam name="TWindowBoundary">The type of the elements in the sequences indicating window boundary events.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="windowBoundaries">Sequence of window boundary markers. The current window is closed and a new window is opened upon receiving a boundary marker.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="windowBoundaries" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
      <summary>
            Merges two observable sequences into one observable sequence by combining their elements in a pairwise fashion.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="first">First observable source.</param>
      <param name="second">Second observable source.</param>
      <param name="resultSelector">Function to invoke for each consecutive pair of elements from the first and second source.</param>
      <returns>An observable sequence containing the result of pairwise combining the elements of the first and second source using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``4(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.Func{``0,``1,``2,``3})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``5(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.Func{``0,``1,``2,``3,``4})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``6(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.Func{``0,``1,``2,``3,``4,``5})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``7(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.Func{``0,``1,``2,``3,``4,``5,``6})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``8(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``9(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``10(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``11(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``12(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``13(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``14(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="source13">Thirteenth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="source13" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``15(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TSource14">The type of the elements in the fourteenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="source13">Thirteenth observable source.</param>
      <param name="source14">Fourteenth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="source13" /> or <paramref name="source14" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``16(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.IObservable{``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TSource14">The type of the elements in the fourteenth source sequence.</typeparam>
      <typeparam name="TSource15">The type of the elements in the fifteenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="source13">Thirteenth observable source.</param>
      <param name="source14">Fourteenth observable source.</param>
      <param name="source15">Fifteenth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="source13" /> or <paramref name="source14" /> or <paramref name="source15" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``17(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.IObservable{``14},System.IObservable{``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TSource14">The type of the elements in the fourteenth source sequence.</typeparam>
      <typeparam name="TSource15">The type of the elements in the fifteenth source sequence.</typeparam>
      <typeparam name="TSource16">The type of the elements in the sixteenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="source13">Thirteenth observable source.</param>
      <param name="source14">Fourteenth observable source.</param>
      <param name="source15">Fifteenth observable source.</param>
      <param name="source16">Sixteenth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="source13" /> or <paramref name="source14" /> or <paramref name="source15" /> or <paramref name="source16" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``2(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Func{System.Collections.Generic.IList{``0},``1})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="sources">Observable sources.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Merges the specified observable sequences into one observable sequence by emitting a list with the elements of the observable sequences at corresponding indexes.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences, and in the lists in the result sequence.</typeparam>
      <param name="sources">Observable sources.</param>
      <returns>An observable sequence containing lists of elements at corresponding indexes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``1(System.IObservable{``0}[])">
      <summary>
            Merges the specified observable sequences into one observable sequence by emitting a list with the elements of the observable sequences at corresponding indexes.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences, and in the lists in the result sequence.</typeparam>
      <param name="sources">Observable sources.</param>
      <returns>An observable sequence containing lists of elements at corresponding indexes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``3(System.IObservable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>
            Merges an observable sequence and an enumerable sequence into one observable sequence by using the selector function.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first observable source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second enumerable source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="first">First observable source.</param>
      <param name="second">Second enumerable source.</param>
      <param name="resultSelector">Function to invoke for each consecutive pair of elements from the first and second source.</param>
      <returns>An observable sequence containing the result of pairwise combining the elements of the first and second source using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.AsObservable``1(System.IObservable{``0})">
      <summary>
            Hides the identity of an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence whose identity to hide.</param>
      <returns>An observable sequence that hides the identity of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.Int32)">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers which are produced based on element count information.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="count">Length of each buffer.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.Int32,System.Int32)">
      <summary>
            Projects each element of an observable sequence into zero or more buffers which are produced based on element count information.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="count">Length of each buffer.</param>
      <param name="skip">Number of elements to skip between creation of consecutive buffers.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="skip" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Dematerialize``1(System.IObservable{System.Reactive.Notification{``0}})">
      <summary>
            Dematerializes the explicit notification values of an observable sequence as implicit notifications.
            </summary>
      <typeparam name="TSource">The type of the elements materialized in the source sequence notification objects.</typeparam>
      <param name="source">An observable sequence containing explicit notification values which have to be turned into implicit notifications.</param>
      <returns>An observable sequence exhibiting the behavior corresponding to the source sequence's notification values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DistinctUntilChanged``1(System.IObservable{``0})">
      <summary>
            Returns an observable sequence that contains only distinct contiguous elements.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to retain distinct contiguous elements for.</param>
      <returns>An observable sequence only containing the distinct contiguous elements from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DistinctUntilChanged``1(System.IObservable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns an observable sequence that contains only distinct contiguous elements according to the comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to retain distinct contiguous elements for.</param>
      <param name="comparer">Equality comparer for source elements.</param>
      <returns>An observable sequence only containing the distinct contiguous elements from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DistinctUntilChanged``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Returns an observable sequence that contains only distinct contiguous elements according to the keySelector.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the discriminator key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to retain distinct contiguous elements for, based on a computed key value.</param>
      <param name="keySelector">A function to compute the comparison key for each element.</param>
      <returns>An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DistinctUntilChanged``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Returns an observable sequence that contains only distinct contiguous elements according to the keySelector and the comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the discriminator key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to retain distinct contiguous elements for, based on a computed key value.</param>
      <param name="keySelector">A function to compute the comparison key for each element.</param>
      <param name="comparer">Equality comparer for computed key values.</param>
      <returns>An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0})">
      <summary>
            Invokes an action for each element in the observable sequence, and propagates all observer messages through the result sequence.
            This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <returns>The source sequence with the side-effecting behavior applied.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action)">
      <summary>
            Invokes an action for each element in the observable sequence and invokes an action upon graceful termination of the observable sequence.
            This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="onCompleted">Action to invoke upon graceful termination of the observable sequence.</param>
      <returns>The source sequence with the side-effecting behavior applied.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
      <summary>
            Invokes an action for each element in the observable sequence and invokes an action upon exceptional termination of the observable sequence.
            This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="onError">Action to invoke upon exceptional termination of the observable sequence.</param>
      <returns>The source sequence with the side-effecting behavior applied.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onError" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>
            Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.
            This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="onError">Action to invoke upon exceptional termination of the observable sequence.</param>
      <param name="onCompleted">Action to invoke upon graceful termination of the observable sequence.</param>
      <returns>The source sequence with the side-effecting behavior applied.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onError" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.IObserver{``0})">
      <summary>
            Invokes the observer's methods for each message in the source sequence.
            This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="observer">Observer whose methods to invoke as part of the source sequence's observation.</param>
      <returns>The source sequence with the side-effecting behavior applied.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Finally``1(System.IObservable{``0},System.Action)">
      <summary>
            Invokes a specified action after the source observable sequence terminates gracefully or exceptionally.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="finallyAction">Action to invoke after the source observable sequence terminates.</param>
      <returns>Source sequence with the action-invoking termination behavior applied.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="finallyAction" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.IgnoreElements``1(System.IObservable{``0})">
      <summary>
            Ignores all elements in an observable sequence leaving only the termination messages.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <returns>An empty observable sequence that signals termination, successful or exceptional, of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Materialize``1(System.IObservable{``0})">
      <summary>
            Materializes the implicit notifications of an observable sequence as explicit notification values.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to get notification values for.</param>
      <returns>An observable sequence containing the materialized notification values from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Repeat``1(System.IObservable{``0})">
      <summary>
            Repeats the observable sequence indefinitely.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to repeat.</param>
      <returns>The observable sequence producing the elements of the given sequence repeatedly and sequentially.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Repeat``1(System.IObservable{``0},System.Int32)">
      <summary>
            Repeats the observable sequence a specified number of times.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to repeat.</param>
      <param name="repeatCount">Number of times to repeat the sequence.</param>
      <returns>The observable sequence producing the elements of the given sequence repeatedly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="repeatCount" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Retry``1(System.IObservable{``0})">
      <summary>
            Repeats the source observable sequence until it successfully terminates.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to repeat until it successfully terminates.</param>
      <returns>An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Retry``1(System.IObservable{``0},System.Int32)">
      <summary>
            Repeats the source observable sequence the specified number of times or until it successfully terminates.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to repeat until it successfully terminates.</param>
      <param name="retryCount">Number of times to repeat the sequence.</param>
      <returns>An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="retryCount" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Scan``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
      <summary>
            Applies an accumulator function over an observable sequence and returns each intermediate result. The specified seed value is used as the initial accumulator value.
            For aggregation behavior with no intermediate results, see <see cref="M:System.Reactive.Linq.Observable.Aggregate``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TAccumulate">The type of the result of the aggregation.</typeparam>
      <param name="source">An observable sequence to accumulate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="accumulator">An accumulator function to be invoked on each element.</param>
      <returns>An observable sequence containing the accumulated values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="accumulator" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Scan``1(System.IObservable{``0},System.Func{``0,``0,``0})">
      <summary>
            Applies an accumulator function over an observable sequence and returns each intermediate result.
            For aggregation behavior with no intermediate results, see <see cref="M:System.Reactive.Linq.Observable.Aggregate``1(System.IObservable{``0},System.Func{``0,``0,``0})" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and the result of the aggregation.</typeparam>
      <param name="source">An observable sequence to accumulate over.</param>
      <param name="accumulator">An accumulator function to be invoked on each element.</param>
      <returns>An observable sequence containing the accumulated values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="accumulator" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SkipLast``1(System.IObservable{``0},System.Int32)">
      <summary>
            Bypasses a specified number of elements at the end of an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="count">Number of elements to bypass at the end of the source sequence.</param>
      <returns>An observable sequence containing the source sequence elements except for the bypassed ones at the end.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
      <remarks>
            This operator accumulates a queue with a length enough to store the first <paramref name="count" /> elements. As more elements are
            received, elements are taken from the front of the queue and produced on the result sequence. This causes elements to be delayed.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.StartWith``1(System.IObservable{``0},``0[])">
      <summary>
            Prepends a sequence of values to an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to prepend values to.</param>
      <param name="values">Values to prepend to the specified sequence.</param>
      <returns>The source sequence prepended with the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="values" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.StartWith``1(System.IObservable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Prepends a sequence of values to an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to prepend values to.</param>
      <param name="values">Values to prepend to the specified sequence.</param>
      <returns>The source sequence prepended with the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="values" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.StartWith``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler,``0[])">
      <summary>
            Prepends a sequence of values to an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to prepend values to.</param>
      <param name="scheduler">Scheduler to emit the prepended values on.</param>
      <param name="values">Values to prepend to the specified sequence.</param>
      <returns>The source sequence prepended with the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> or <paramref name="values" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.StartWith``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Prepends a sequence of values to an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to prepend values to.</param>
      <param name="scheduler">Scheduler to emit the prepended values on.</param>
      <param name="values">Values to prepend to the specified sequence.</param>
      <returns>The source sequence prepended with the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> or <paramref name="values" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeLast``1(System.IObservable{``0},System.Int32)">
      <summary>
            Returns a specified number of contiguous elements from the end of an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="count">Number of elements to take from the end of the source sequence.</param>
      <returns>An observable sequence containing the specified number of elements from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
      <remarks>
            This operator accumulates a buffer with a length enough to store elements <paramref name="count" /> elements. Upon completion of
            the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeLast``1(System.IObservable{``0},System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns a specified number of contiguous elements from the end of an observable sequence, using the specified scheduler to drain the queue.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="count">Number of elements to take from the end of the source sequence.</param>
      <param name="scheduler">Scheduler used to drain the queue upon completion of the source sequence.</param>
      <returns>An observable sequence containing the specified number of elements from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
      <remarks>
            This operator accumulates a buffer with a length enough to store elements <paramref name="count" /> elements. Upon completion of
            the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeLastBuffer``1(System.IObservable{``0},System.Int32)">
      <summary>
            Returns a list with the specified number of contiguous elements from the end of an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="count">Number of elements to take from the end of the source sequence.</param>
      <returns>An observable sequence containing a single list with the specified number of elements from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
      <remarks>
            This operator accumulates a buffer with a length enough to store <paramref name="count" /> elements. Upon completion of the
            source sequence, this buffer is produced on the result sequence.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.Int32)">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping windows which are produced based on element count information.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="count">Length of each window.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.Int32,System.Int32)">
      <summary>
            Projects each element of an observable sequence into zero or more windows which are produced based on element count information.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="count">Length of each window.</param>
      <param name="skip">Number of elements to skip between creation of consecutive windows.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="skip" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Cast``1(System.IObservable{System.Object})">
      <summary>
            Converts the elements of an observable sequence to the specified type.
            </summary>
      <typeparam name="TResult">The type to convert the elements in the source sequence to.</typeparam>
      <param name="source">The observable sequence that contains the elements to be converted.</param>
      <returns>An observable sequence that contains each element of the source sequence converted to the specified type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DefaultIfEmpty``1(System.IObservable{``0})">
      <summary>
            Returns the elements of the specified sequence or the type parameter's default value in a singleton sequence if the sequence is empty.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence (if any), whose default value will be taken if the sequence is empty.</typeparam>
      <param name="source">The sequence to return a default value for if it is empty.</param>
      <returns>An observable sequence that contains the default value for the TSource type if the source is empty; otherwise, the elements of the source itself.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DefaultIfEmpty``1(System.IObservable{``0},``0)">
      <summary>
            Returns the elements of the specified sequence or the specified value in a singleton sequence if the sequence is empty.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence (if any), and the specified default value which will be taken if the sequence is empty.</typeparam>
      <param name="source">The sequence to return the specified value for if it is empty.</param>
      <param name="defaultValue">The value to return if the sequence is empty.</param>
      <returns>An observable sequence that contains the specified default value if the source is empty; otherwise, the elements of the source itself.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Distinct``1(System.IObservable{``0})">
      <summary>
            Returns an observable sequence that contains only distinct elements.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to retain distinct elements for.</param>
      <returns>An observable sequence only containing the distinct elements from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Distinct``1(System.IObservable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns an observable sequence that contains only distinct elements according to the comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to retain distinct elements for.</param>
      <param name="comparer">Equality comparer for source elements.</param>
      <returns>An observable sequence only containing the distinct elements from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Distinct``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Returns an observable sequence that contains only distinct elements according to the keySelector.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the discriminator key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to retain distinct elements for.</param>
      <param name="keySelector">A function to compute the comparison key for each element.</param>
      <returns>An observable sequence only containing the distinct elements, based on a computed key value, from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
      <remarks>Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Distinct``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Returns an observable sequence that contains only distinct elements according to the keySelector and the comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the discriminator key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to retain distinct elements for.</param>
      <param name="keySelector">A function to compute the comparison key for each element.</param>
      <param name="comparer">Equality comparer for source elements.</param>
      <returns>An observable sequence only containing the distinct elements, based on a computed key value, from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GroupBy``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Groups the elements of an observable sequence according to a specified key selector function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GroupBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="comparer">An equality comparer to compare keys with.</param>
      <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GroupBy``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
            Groups the elements of an observable sequence and selects the resulting elements by using a specified function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
      <typeparam name="TElement">The type of the elements within the groups computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an observable group.</param>
      <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GroupBy``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
      <typeparam name="TElement">The type of the elements within the groups computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an observable group.</param>
      <param name="comparer">An equality comparer to compare keys with.</param>
      <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GroupByUntil``4(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``2},System.IObservable{``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
            A duration selector function is used to control the lifetime of groups. When a group expires, it receives an OnCompleted notification. When a new element with the same
            key value as a reclaimed group occurs, the group will be reborn with a new lifetime request.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
      <typeparam name="TElement">The type of the elements within the groups computed for each element in the source sequence.</typeparam>
      <typeparam name="TDuration">The type of the elements in the duration sequences obtained for each group to denote its lifetime.</typeparam>
      <param name="source">An observable sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an observable group.</param>
      <param name="durationSelector">A function to signal the expiration of a group.</param>
      <param name="comparer">An equality comparer to compare keys with.</param>
      <returns>
            A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
            If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encountered.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="durationSelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GroupByUntil``4(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``2},System.IObservable{``3}})">
      <summary>
            Groups the elements of an observable sequence according to a specified key selector function and selects the resulting elements by using a specified function.
            A duration selector function is used to control the lifetime of groups. When a group expires, it receives an OnCompleted notification. When a new element with the same
            key value as a reclaimed group occurs, the group will be reborn with a new lifetime request.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
      <typeparam name="TElement">The type of the elements within the groups computed for each element in the source sequence.</typeparam>
      <typeparam name="TDuration">The type of the elements in the duration sequences obtained for each group to denote its lifetime.</typeparam>
      <param name="source">An observable sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an observable group.</param>
      <param name="durationSelector">A function to signal the expiration of a group.</param>
      <returns>
            A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
            If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="durationSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GroupByUntil``3(System.IObservable{``0},System.Func{``0,``1},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``0},System.IObservable{``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer.
            A duration selector function is used to control the lifetime of groups. When a group expires, it receives an OnCompleted notification. When a new element with the same
            key value as a reclaimed group occurs, the group will be reborn with a new lifetime request.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
      <typeparam name="TDuration">The type of the elements in the duration sequences obtained for each group to denote its lifetime.</typeparam>
      <param name="source">An observable sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="durationSelector">A function to signal the expiration of a group.</param>
      <param name="comparer">An equality comparer to compare keys with.</param>
      <returns>
            A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
            If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="durationSelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GroupByUntil``3(System.IObservable{``0},System.Func{``0,``1},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``0},System.IObservable{``2}})">
      <summary>
            Groups the elements of an observable sequence according to a specified key selector function.
            A duration selector function is used to control the lifetime of groups. When a group expires, it receives an OnCompleted notification. When a new element with the same
            key value as a reclaimed group occurs, the group will be reborn with a new lifetime request.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
      <typeparam name="TDuration">The type of the elements in the duration sequences obtained for each group to denote its lifetime.</typeparam>
      <param name="source">An observable sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="durationSelector">A function to signal the expiration of a group.</param>
      <returns>
            A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
            If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="durationSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GroupJoin``5(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``2}},System.Func{``1,System.IObservable{``3}},System.Func{``0,System.IObservable{``1},``4})">
      <summary>
            Correlates the elements of two sequences based on overlapping durations, and groups the results.
            </summary>
      <typeparam name="TLeft">The type of the elements in the left source sequence.</typeparam>
      <typeparam name="TRight">The type of the elements in the right source sequence.</typeparam>
      <typeparam name="TLeftDuration">The type of the elements in the duration sequence denoting the computed duration of each element in the left source sequence.</typeparam>
      <typeparam name="TRightDuration">The type of the elements in the duration sequence denoting the computed duration of each element in the right source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by invoking the result selector function for source elements with overlapping duration.</typeparam>
      <param name="left">The left observable sequence to join elements for.</param>
      <param name="right">The right observable sequence to join elements for.</param>
      <param name="leftDurationSelector">A function to select the duration of each element of the left observable sequence, used to determine overlap.</param>
      <param name="rightDurationSelector">A function to select the duration of each element of the right observable sequence, used to determine overlap.</param>
      <param name="resultSelector">A function invoked to compute a result element for any element of the left sequence with overlapping elements from the right observable sequence.</param>
      <returns>An observable sequence that contains result elements computed from source elements that have an overlapping duration.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> or <paramref name="leftDurationSelector" /> or <paramref name="rightDurationSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Join``5(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``2}},System.Func{``1,System.IObservable{``3}},System.Func{``0,``1,``4})">
      <summary>
            Correlates the elements of two sequences based on overlapping durations.
            </summary>
      <typeparam name="TLeft">The type of the elements in the left source sequence.</typeparam>
      <typeparam name="TRight">The type of the elements in the right source sequence.</typeparam>
      <typeparam name="TLeftDuration">The type of the elements in the duration sequence denoting the computed duration of each element in the left source sequence.</typeparam>
      <typeparam name="TRightDuration">The type of the elements in the duration sequence denoting the computed duration of each element in the right source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by invoking the result selector function for source elements with overlapping duration.</typeparam>
      <param name="left">The left observable sequence to join elements for.</param>
      <param name="right">The right observable sequence to join elements for.</param>
      <param name="leftDurationSelector">A function to select the duration of each element of the left observable sequence, used to determine overlap.</param>
      <param name="rightDurationSelector">A function to select the duration of each element of the right observable sequence, used to determine overlap.</param>
      <param name="resultSelector">A function invoked to compute a result element for any two overlapping elements of the left and right observable sequences.</param>
      <returns>An observable sequence that contains result elements computed from source elements that have an overlapping duration.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> or <paramref name="leftDurationSelector" /> or <paramref name="rightDurationSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.OfType``1(System.IObservable{System.Object})">
      <summary>
            Filters the elements of an observable sequence based on the specified type.
            </summary>
      <typeparam name="TResult">The type to filter the elements in the source sequence on.</typeparam>
      <param name="source">The observable sequence that contains the elements to be filtered.</param>
      <returns>An observable sequence that contains elements from the input sequence of type TResult.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Select``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Projects each element of an observable sequence into a new form.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by running the selector function for each element in the source sequence.</typeparam>
      <param name="source">A sequence of elements to invoke a transform function on.</param>
      <param name="selector">A transform function to apply to each source element.</param>
      <returns>An observable sequence whose elements are the result of invoking the transform function on each element of source.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Select``2(System.IObservable{``0},System.Func{``0,System.Int32,``1})">
      <summary>
            Projects each element of an observable sequence into a new form by incorporating the element's index.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by running the selector function for each element in the source sequence.</typeparam>
      <param name="source">A sequence of elements to invoke a transform function on.</param>
      <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <returns>An observable sequence whose elements are the result of invoking the transform function on each element of source.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>
            Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TOther">The type of the elements in the other sequence and the elements in the result sequence.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="other">An observable sequence to project each element from the source sequence onto.</param>
      <returns>An observable sequence whose elements are the result of projecting each source element onto the other sequence and merging all the resulting sequences together.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}})">
      <summary>
            Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the projected inner sequences and the elements in the merged result sequence.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Int32,System.IObservable{``1}})">
      <summary>
            Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the projected inner sequences and the elements in the merged result sequence.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
      <summary>
            Projects each element of an observable sequence to a task and merges all of the task results into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the result produced by the projected tasks and the elements in the merged result sequence.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence whose elements are the result of the tasks executed for each element of the input sequence.</returns>
      <remarks>This overload supports composition of observable sequences and tasks, without requiring manual conversion of the tasks to observable sequences using <see cref="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable``1(System.Threading.Tasks.Task{``0})" />.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}})">
      <summary>
            Projects each element of an observable sequence to a task with cancellation support and merges all of the task results into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the result produced by the projected tasks and the elements in the merged result sequence.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence whose elements are the result of the tasks executed for each element of the input sequence.</returns>
      <remarks>This overload supports composition of observable sequences and tasks, without requiring manual conversion of the tasks to observable sequences using <see cref="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable``1(System.Threading.Tasks.Task{``0})" />.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.Func{``0,``1,``2})">
      <summary>
            Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TCollection">The type of the elements in the projected intermediate sequences.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by using the selector to combine source sequence elements with their corresponding intermediate sequence elements.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="collectionSelector">A transform function to apply to each element.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.Int32,System.IObservable{``1}},System.Func{``0,System.Int32,``1,System.Int32,``2})">
      <summary>
            Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TCollection">The type of the elements in the projected intermediate sequences.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by using the selector to combine source sequence elements with their corresponding intermediate sequence elements.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="collectionSelector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
      <summary>
            Projects each element of an observable sequence to a task, invokes the result selector for the source element and the task result, and merges the results into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TTaskResult">The type of the results produced by the projected intermediate tasks.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by using the selector to combine source sequence elements with their corresponding intermediate task results.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="taskSelector">A transform function to apply to each element.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <returns>An observable sequence whose elements are the result of obtaining a task for each element of the input sequence and then mapping the task's result and its corresponding source element to a result element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="taskSelector" /> or <paramref name="resultSelector" /> is null.</exception>
      <remarks>This overload supports using LINQ query comprehension syntax in C# and Visual Basic to compose observable sequences and tasks, without requiring manual conversion of the tasks to observable sequences using <see cref="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable``1(System.Threading.Tasks.Task{``0})" />.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
      <summary>
            Projects each element of an observable sequence to a task with cancellation support, invokes the result selector for the source element and the task result, and merges the results into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TTaskResult">The type of the results produced by the projected intermediate tasks.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by using the selector to combine source sequence elements with their corresponding intermediate task results.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="taskSelector">A transform function to apply to each element.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <returns>An observable sequence whose elements are the result of obtaining a task for each element of the input sequence and then mapping the task's result and its corresponding source element to a result element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="taskSelector" /> or <paramref name="resultSelector" /> is null.</exception>
      <remarks>This overload supports using LINQ query comprehension syntax in C# and Visual Basic to compose observable sequences and tasks, without requiring manual conversion of the tasks to observable sequences using <see cref="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable``1(System.Threading.Tasks.Task{``0})" />.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.Func{System.Exception,System.IObservable{``1}},System.Func{System.IObservable{``1}})">
      <summary>
            Projects each notification of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the projected inner sequences and the elements in the merged result sequence.</typeparam>
      <param name="source">An observable sequence of notifications to project.</param>
      <param name="onNext">A transform function to apply to each element.</param>
      <param name="onError">A transform function to apply when an error occurs in the source sequence.</param>
      <param name="onCompleted">A transform function to apply when the end of the source sequence is reached.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onError" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Int32,System.IObservable{``1}},System.Func{System.Exception,System.Int32,System.IObservable{``1}},System.Func{System.Int32,System.IObservable{``1}})">
      <summary>
            Projects each notification of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the projected inner sequences and the elements in the merged result sequence.</typeparam>
      <param name="source">An observable sequence of notifications to project.</param>
      <param name="onNext">A transform function to apply to each element; the second parameter represents the index of the source element.</param>
      <param name="onError">A transform function to apply when an error occurs in the source sequence; the second parameter represents the index of the source element.</param>
      <param name="onCompleted">A transform function to apply when the end of the source sequence is reached; the second parameter represents the number of elements observed.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onError" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Projects each element of an observable sequence to an enumerable sequence and concatenates the resulting enumerable sequences into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the projected inner enumerable sequences and the elements in the merged result sequence.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The projected sequences are enumerated synchonously within the OnNext call of the source sequence. In order to do a concurrent, non-blocking merge, change the selector to return an observable sequence obtained using the <see cref="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})" /> conversion.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Projects each element of an observable sequence to an enumerable sequence and concatenates the resulting enumerable sequences into one observable sequence.
            The index of each source element is used in the projected form of that element. 
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the projected inner enumerable sequences and the elements in the merged result sequence.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The projected sequences are enumerated synchonously within the OnNext call of the source sequence. In order to do a concurrent, non-blocking merge, change the selector to return an observable sequence obtained using the <see cref="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})" /> conversion.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>
            Projects each element of an observable sequence to an enumerable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TCollection">The type of the elements in the projected intermediate enumerable sequences.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by using the selector to combine source sequence elements with their corresponding intermediate sequence elements.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="collectionSelector">A transform function to apply to each element.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
      <remarks>The projected sequences are enumerated synchonously within the OnNext call of the source sequence. In order to do a concurrent, non-blocking merge, change the selector to return an observable sequence obtained using the <see cref="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})" /> conversion.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,System.Int32,``1,System.Int32,``2})">
      <summary>
            Projects each element of an observable sequence to an enumerable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TCollection">The type of the elements in the projected intermediate enumerable sequences.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by using the selector to combine source sequence elements with their corresponding intermediate sequence elements.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="collectionSelector">A transform function to apply to each element; the second parameter of the function represents the index of the source element.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
      <remarks>The projected sequences are enumerated synchonously within the OnNext call of the source sequence. In order to do a concurrent, non-blocking merge, change the selector to return an observable sequence obtained using the <see cref="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})" /> conversion.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Skip``1(System.IObservable{``0},System.Int32)">
      <summary>
            Bypasses a specified number of elements in an observable sequence and then returns the remaining elements.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">The sequence to take elements from.</param>
      <param name="count">The number of elements to skip before returning the remaining elements.</param>
      <returns>An observable sequence that contains the elements that occur after the specified index in the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SkipWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <returns>An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SkipWhile``1(System.IObservable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
            Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements.
            The element's index is used in the logic of the predicate function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the source element.</param>
      <returns>An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Take``1(System.IObservable{``0},System.Int32)">
      <summary>
            Returns a specified number of contiguous elements from the start of an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">The sequence to take elements from.</param>
      <param name="count">The number of elements to return.</param>
      <returns>An observable sequence that contains the specified number of elements from the start of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Take``1(System.IObservable{``0},System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns a specified number of contiguous elements from the start of an observable sequence, using the specified scheduler for the edge case of Take(0).
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">The sequence to take elements from.</param>
      <param name="count">The number of elements to return.</param>
      <param name="scheduler">Scheduler used to produce an OnCompleted message in case <paramref name="count">count</paramref> is set to 0.</param>
      <returns>An observable sequence that contains the specified number of elements from the start of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns elements from an observable sequence as long as a specified condition is true.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <returns>An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeWhile``1(System.IObservable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
            Returns elements from an observable sequence as long as a specified condition is true.
            The element's index is used in the logic of the predicate function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the source element.</param>
      <returns>An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Where``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Filters the elements of an observable sequence based on a predicate.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence whose elements to filter.</param>
      <param name="predicate">A function to test each source element for a condition.</param>
      <returns>An observable sequence that contains elements from the input sequence that satisfy the condition.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Where``1(System.IObservable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
            Filters the elements of an observable sequence based on a predicate by incorporating the element's index.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence whose elements to filter.</param>
      <param name="predicate">A function to test each source element for a conditio; the second parameter of the function represents the index of the source element.</param>
      <returns>An observable sequence that contains elements from the input sequence that satisfy the condition.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers which are produced based on timing information.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="timeSpan">Length of each buffer.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create buffers as fast as it can.
            Because all source sequence elements end up in one of the buffers, some buffers won't have a zero time span. This is a side-effect of the asynchrony introduced
            by the scheduler, where the action to close the current buffer and to create a new buffer may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers which are produced based on timing information, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="timeSpan">Length of each buffer.</param>
      <param name="scheduler">Scheduler to run buffering timers on.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create buffers as fast as it can.
            Because all source sequence elements end up in one of the buffers, some buffers won't have a zero time span. This is a side-effect of the asynchrony introduced
            by the scheduler, where the action to close the current buffer and to create a new buffer may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan)">
      <summary>
            Projects each element of an observable sequence into zero or more buffers which are produced based on timing information.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="timeSpan">Length of each buffer.</param>
      <param name="timeShift">Interval between creation of consecutive buffers.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> or <paramref name="timeSpan" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create buffers with minimum duration
            length. However, some buffers won't have a zero time span. This is a side-effect of the asynchrony introduced by the scheduler, where the action to close the
            current buffer may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="timeShift" /> is not recommended but supported, causing the scheduler to create buffers as fast as it can.
            However, this doesn't mean all buffers will start at the beginning of the source sequence. This is a side-effect of the asynchrony introduced by the scheduler,
            where the action to create a new buffer may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Projects each element of an observable sequence into zero or more buffers which are produced based on timing information, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="timeSpan">Length of each buffer.</param>
      <param name="timeShift">Interval between creation of consecutive buffers.</param>
      <param name="scheduler">Scheduler to run buffering timers on.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> or <paramref name="timeSpan" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create buffers with minimum duration
            length. However, some buffers won't have a zero time span. This is a side-effect of the asynchrony introduced by the scheduler, where the action to close the
            current buffer may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="timeShift" /> is not recommended but supported, causing the scheduler to create buffers as fast as it can.
            However, this doesn't mean all buffers will start at the beginning of the source sequence. This is a side-effect of the asynchrony introduced by the scheduler,
            where the action to create a new buffer may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.Int32)">
      <summary>
            Projects each element of an observable sequence into a buffer that's sent out when either it's full or a given amount of time has elapsed.
            A useful real-world analogy of this overload is the behavior of a ferry leaving the dock when all seats are taken, or at the scheduled time of departure, whichever event occurs first.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="timeSpan">Maximum time length of a window.</param>
      <param name="count">Maximum element count of a window.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> is less than TimeSpan.Zero. -or- <paramref name="count" /> is less than or equal to zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create buffers as fast as it can.
            Because all source sequence elements end up in one of the buffers, some buffers won't have a zero time span. This is a side-effect of the asynchrony introduced
            by the scheduler, where the action to close the current buffer and to create a new buffer may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Projects each element of an observable sequence into a buffer that's sent out when either it's full or a given amount of time has elapsed, using the specified scheduler to run timers.
            A useful real-world analogy of this overload is the behavior of a ferry leaving the dock when all seats are taken, or at the scheduled time of departure, whichever event occurs first.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="timeSpan">Maximum time length of a buffer.</param>
      <param name="count">Maximum element count of a buffer.</param>
      <param name="scheduler">Scheduler to run buffering timers on.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> is less than TimeSpan.Zero. -or- <paramref name="count" /> is less than or equal to zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create buffers as fast as it can.
            Because all source sequence elements end up in one of the buffers, some buffers won't have a zero time span. This is a side-effect of the asynchrony introduced
            by the scheduler, where the action to close the current buffer and to create a new buffer may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Time shifts the observable sequence by the specified relative time duration.
            The relative time intervals between the values are preserved.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to delay values for.</param>
      <param name="dueTime">Relative time by which to shift the observable sequence. If this value is equal to TimeSpan.Zero, the scheduler will dispatch observer callbacks as soon as possible.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            This operator is less efficient than <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.TimeSpan)">DelaySubscription</see> because it records all notifications and time-delays those. This allows for immediate propagation of errors.
            </para>
        <para>
            Observer callbacks for the resulting sequence will be run on the default scheduler. This effect is similar to using ObserveOn.
            </para>
        <para>
            Exceptions signaled by the source sequence through an OnError callback are forwarded immediately to the result sequence. Any OnNext notifications that were in the queue at the point of the OnError callback will be dropped.
            In order to delay error propagation, consider using the <see cref="M:System.Reactive.Linq.Observable.Materialize``1(System.IObservable{``0})">Observable.Materialize</see> and <see cref="M:System.Reactive.Linq.Observable.Dematerialize``1(System.IObservable{System.Reactive.Notification{``0}})">Observable.Dematerialize</see> operators, or use <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.TimeSpan)">DelaySubscription</see>.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Time shifts the observable sequence by the specified relative time duration, using the specified scheduler to run timers.
            The relative time intervals between the values are preserved.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to delay values for.</param>
      <param name="dueTime">Relative time by which to shift the observable sequence. If this value is equal to TimeSpan.Zero, the scheduler will dispatch observer callbacks as soon as possible.</param>
      <param name="scheduler">Scheduler to run the delay timers on.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            This operator is less efficient than <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">DelaySubscription</see> because it records all notifications and time-delays those. This allows for immediate propagation of errors.
            </para>
        <para>
            Observer callbacks for the resulting sequence will be run on the specified scheduler. This effect is similar to using ObserveOn.
            </para>
        <para>
            Exceptions signaled by the source sequence through an OnError callback are forwarded immediately to the result sequence. Any OnNext notifications that were in the queue at the point of the OnError callback will be dropped.
            </para>
        <para>
            Exceptions signaled by the source sequence through an OnError callback are forwarded immediately to the result sequence. Any OnNext notifications that were in the queue at the point of the OnError callback will be dropped.
            In order to delay error propagation, consider using the <see cref="M:System.Reactive.Linq.Observable.Materialize``1(System.IObservable{``0})">Observable.Materialize</see> and <see cref="M:System.Reactive.Linq.Observable.Dematerialize``1(System.IObservable{System.Reactive.Notification{``0}})">Observable.Dematerialize</see> operators, or use <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">DelaySubscription</see>.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset)">
      <summary>
            Time shifts the observable sequence to start propagating notifications at the specified absolute time.
            The relative time intervals between the values are preserved.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to delay values for.</param>
      <param name="dueTime">Absolute time used to shift the observable sequence; the relative time shift gets computed upon subscription. If this value is less than or equal to DateTimeOffset.UtcNow, the scheduler will dispatch observer callbacks as soon as possible.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>
        <para>
            This operator is less efficient than <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.DateTimeOffset)">DelaySubscription</see> because it records all notifications and time-delays those. This allows for immediate propagation of errors.
            </para>
        <para>
            Observer callbacks for the resulting sequence will be run on the default scheduler. This effect is similar to using ObserveOn.
            </para>
        <para>
            Exceptions signaled by the source sequence through an OnError callback are forwarded immediately to the result sequence. Any OnNext notifications that were in the queue at the point of the OnError callback will be dropped.
            In order to delay error propagation, consider using the <see cref="M:System.Reactive.Linq.Observable.Materialize``1(System.IObservable{``0})">Observable.Materialize</see> and <see cref="M:System.Reactive.Linq.Observable.Dematerialize``1(System.IObservable{System.Reactive.Notification{``0}})">Observable.Dematerialize</see> operators, or use <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.DateTimeOffset)">DelaySubscription</see>.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Time shifts the observable sequence to start propagating notifications at the specified absolute time, using the specified scheduler to run timers.
            The relative time intervals between the values are preserved.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to delay values for.</param>
      <param name="dueTime">Absolute time used to shift the observable sequence; the relative time shift gets computed upon subscription. If this value is less than or equal to DateTimeOffset.UtcNow, the scheduler will dispatch observer callbacks as soon as possible.</param>
      <param name="scheduler">Scheduler to run the delay timers on.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            This operator is less efficient than <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">DelaySubscription</see> because it records all notifications and time-delays those. This allows for immediate propagation of errors.
            </para>
        <para>
            Observer callbacks for the resulting sequence will be run on the specified scheduler. This effect is similar to using ObserveOn.
            </para>
        <para>
            Exceptions signaled by the source sequence through an OnError callback are forwarded immediately to the result sequence. Any OnNext notifications that were in the queue at the point of the OnError callback will be dropped.
            In order to delay error propagation, consider using the <see cref="M:System.Reactive.Linq.Observable.Materialize``1(System.IObservable{``0})">Observable.Materialize</see> and <see cref="M:System.Reactive.Linq.Observable.Dematerialize``1(System.IObservable{System.Reactive.Notification{``0}})">Observable.Dematerialize</see> operators, or use <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">DelaySubscription</see>.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Delay``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}})">
      <summary>
            Time shifts the observable sequence based on a delay selector function for each element.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TDelay">The type of the elements in the delay sequences used to denote the delay duration of each element in the source sequence.</typeparam>
      <param name="source">Source sequence to delay values for.</param>
      <param name="delayDurationSelector">Selector function to retrieve a sequence indicating the delay for each given element.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="delayDurationSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Delay``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})">
      <summary>
            Time shifts the observable sequence based on a subscription delay and a delay selector function for each element.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TDelay">The type of the elements in the delay sequences used to denote the delay duration of each element in the source sequence.</typeparam>
      <param name="source">Source sequence to delay values for.</param>
      <param name="subscriptionDelay">Sequence indicating the delay for the subscription to the source.</param>
      <param name="delayDurationSelector">Selector function to retrieve a sequence indicating the delay for each given element.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="subscriptionDelay" /> or <paramref name="delayDurationSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Time shifts the observable sequence by delaying the subscription with the specified relative time duration.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to delay subscription for.</param>
      <param name="dueTime">Relative time shift of the subscription.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            This operator is more efficient than <see cref="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.TimeSpan)">Delay</see> but postpones all side-effects of subscription and affects error propagation timing.
            </para>
        <para>
            The side-effects of subscribing to the source sequence will be run on the default scheduler. Observer callbacks will not be affected.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Time shifts the observable sequence by delaying the subscription with the specified relative time duration, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to delay subscription for.</param>
      <param name="dueTime">Relative time shift of the subscription.</param>
      <param name="scheduler">Scheduler to run the subscription delay timer on.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            This operator is more efficient than <see cref="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">Delay</see> but postpones all side-effects of subscription and affects error propagation timing.
            </para>
        <para>
            The side-effects of subscribing to the source sequence will be run on the specified scheduler. Observer callbacks will not be affected.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.DateTimeOffset)">
      <summary>
            Time shifts the observable sequence by delaying the subscription to the specified absolute time.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to delay subscription for.</param>
      <param name="dueTime">Absolute time to perform the subscription at.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>
        <para>
            This operator is more efficient than <see cref="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset)">Delay</see> but postpones all side-effects of subscription and affects error propagation timing.
            </para>
        <para>
            The side-effects of subscribing to the source sequence will be run on the default scheduler. Observer callbacks will not be affected.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Time shifts the observable sequence by delaying the subscription to the specified absolute time, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to delay subscription for.</param>
      <param name="dueTime">Absolute time to perform the subscription at.</param>
      <param name="scheduler">Scheduler to run the subscription delay timer on.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            This operator is more efficient than <see cref="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">Delay</see> but postpones all side-effects of subscription and affects error propagation timing.
            </para>
        <para>
            The side-effects of subscribing to the source sequence will be run on the specified scheduler. Observer callbacks will not be affected.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.TimeSpan})">
      <summary>
            Generates an observable sequence by running a state-driven and temporal loop producing the sequence's elements.
            </summary>
      <typeparam name="TState">The type of the state used in the generator loop.</typeparam>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="initialState">Initial state.</param>
      <param name="condition">Condition to terminate generation (upon returning false).</param>
      <param name="iterate">Iteration step function.</param>
      <param name="resultSelector">Selector function for results produced in the sequence.</param>
      <param name="timeSelector">Time selector function to control the speed of values being produced each iteration.</param>
      <returns>The generated sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="iterate" /> or <paramref name="resultSelector" /> or <paramref name="timeSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.TimeSpan},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Generates an observable sequence by running a state-driven and temporal loop producing the sequence's elements, using the specified scheduler to run timers and to send out observer messages.
            </summary>
      <typeparam name="TState">The type of the state used in the generator loop.</typeparam>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="initialState">Initial state.</param>
      <param name="condition">Condition to terminate generation (upon returning false).</param>
      <param name="iterate">Iteration step function.</param>
      <param name="resultSelector">Selector function for results produced in the sequence.</param>
      <param name="timeSelector">Time selector function to control the speed of values being produced each iteration.</param>
      <param name="scheduler">Scheduler on which to run the generator loop.</param>
      <returns>The generated sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="iterate" /> or <paramref name="resultSelector" /> or <paramref name="timeSelector" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.DateTimeOffset})">
      <summary>
            Generates an observable sequence by running a state-driven and temporal loop producing the sequence's elements.
            </summary>
      <typeparam name="TState">The type of the state used in the generator loop.</typeparam>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="initialState">Initial state.</param>
      <param name="condition">Condition to terminate generation (upon returning false).</param>
      <param name="iterate">Iteration step function.</param>
      <param name="resultSelector">Selector function for results produced in the sequence.</param>
      <param name="timeSelector">Time selector function to control the speed of values being produced each iteration.</param>
      <returns>The generated sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="iterate" /> or <paramref name="resultSelector" /> or <paramref name="timeSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.DateTimeOffset},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Generates an observable sequence by running a state-driven and temporal loop producing the sequence's elements, using the specified scheduler to run timers and to send out observer messages.
            </summary>
      <typeparam name="TState">The type of the state used in the generator loop.</typeparam>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="initialState">Initial state.</param>
      <param name="condition">Condition to terminate generation (upon returning false).</param>
      <param name="iterate">Iteration step function.</param>
      <param name="resultSelector">Selector function for results produced in the sequence.</param>
      <param name="timeSelector">Time selector function to control the speed of values being produced each iteration.</param>
      <param name="scheduler">Scheduler on which to run the generator loop.</param>
      <returns>The generated sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="iterate" /> or <paramref name="resultSelector" /> or <paramref name="timeSelector" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Interval(System.TimeSpan)">
      <summary>
            Returns an observable sequence that produces a value after each period.
            </summary>
      <param name="period">Period for producing the values in the resulting sequence. If this value is equal to TimeSpan.Zero, the timer will recur as fast as possible.</param>
      <returns>An observable sequence that produces a value after each period.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            Intervals are measured between the start of subsequent notifications, not between the end of the previous and the start of the next notification.
            If the observer takes longer than the interval period to handle the message, the subsequent notification will be delivered immediately after the
            current one has been handled. In case you need to control the time between the end and the start of consecutive notifications, consider using the
            <see cref="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.TimeSpan})" />
            operator instead.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Interval(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that produces a value after each period, using the specified scheduler to run timers and to send out observer messages.
            </summary>
      <param name="period">Period for producing the values in the resulting sequence. If this value is equal to TimeSpan.Zero, the timer will recur as fast as possible.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence that produces a value after each period.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
      <remarks>
            Intervals are measured between the start of subsequent notifications, not between the end of the previous and the start of the next notification.
            If the observer takes longer than the interval period to handle the message, the subsequent notification will be delivered immediately after the
            current one has been handled. In case you need to control the time between the end and the start of consecutive notifications, consider using the
            <see cref="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.TimeSpan},System.Reactive.Concurrency.IScheduler)" />
            operator instead.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sample``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Samples the observable sequence at each interval.
            Upon each sampling tick, the latest element (if any) in the source sequence during the last sampling interval is sent to the resulting sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to sample.</param>
      <param name="interval">Interval at which to sample. If this value is equal to TimeSpan.Zero, the scheduler will continuously sample the stream.</param>
      <returns>Sampled observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="interval" /> doesn't guarantee all source sequence elements will be preserved. This is a side-effect
            of the asynchrony introduced by the scheduler, where the sampling action may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sample``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Samples the observable sequence at each interval, using the specified scheduler to run sampling timers.
            Upon each sampling tick, the latest element (if any) in the source sequence during the last sampling interval is sent to the resulting sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to sample.</param>
      <param name="interval">Interval at which to sample. If this value is equal to TimeSpan.Zero, the scheduler will continuously sample the stream.</param>
      <param name="scheduler">Scheduler to run the sampling timer on.</param>
      <returns>Sampled observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="interval" /> doesn't guarantee all source sequence elements will be preserved. This is a side-effect
            of the asynchrony introduced by the scheduler, where the sampling action may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sample``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>
            Samples the source observable sequence using a samper observable sequence producing sampling ticks.
            Upon each sampling tick, the latest element (if any) in the source sequence during the last sampling interval is sent to the resulting sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TSample">The type of the elements in the sampling sequence.</typeparam>
      <param name="source">Source sequence to sample.</param>
      <param name="sampler">Sampling tick sequence.</param>
      <returns>Sampled observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="sampler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Skip``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Skips elements for the specified duration from the start of the observable source sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to skip elements for.</param>
      <param name="duration">Duration for skipping elements from the start of the sequence.</param>
      <returns>An observable sequence with the elements skipped during the specified duration from the start of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="duration" /> doesn't guarantee no elements will be dropped from the start of the source sequence.
            This is a side-effect of the asynchrony introduced by the scheduler, where the action that causes callbacks from the source sequence to be forwarded
            may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
        <para>
            Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the <paramref name="duration" />.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Skip``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Skips elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to skip elements for.</param>
      <param name="duration">Duration for skipping elements from the start of the sequence.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence with the elements skipped during the specified duration from the start of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="duration" /> doesn't guarantee no elements will be dropped from the start of the source sequence.
            This is a side-effect of the asynchrony introduced by the scheduler, where the action that causes callbacks from the source sequence to be forwarded
            may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
        <para>
            Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the <paramref name="duration" />.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SkipLast``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Skips elements for the specified duration from the end of the observable source sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to skip elements for.</param>
      <param name="duration">Duration for skipping elements from the end of the sequence.</param>
      <returns>An observable sequence with the elements skipped during the specified duration from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            This operator accumulates a queue with a length enough to store elements received during the initial <paramref name="duration" /> window.
            As more elements are received, elements older than the specified <paramref name="duration" /> are taken from the queue and produced on the
            result sequence. This causes elements to be delayed with <paramref name="duration" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SkipLast``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Skips elements for the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to skip elements for.</param>
      <param name="duration">Duration for skipping elements from the end of the sequence.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence with the elements skipped during the specified duration from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            This operator accumulates a queue with a length enough to store elements received during the initial <paramref name="duration" /> window.
            As more elements are received, elements older than the specified <paramref name="duration" /> are taken from the queue and produced on the
            result sequence. This causes elements to be delayed with <paramref name="duration" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SkipUntil``1(System.IObservable{``0},System.DateTimeOffset)">
      <summary>
            Skips elements from the observable source sequence until the specified start time.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to skip elements for.</param>
      <param name="startTime">Time to start taking elements from the source sequence. If this value is less than or equal to DateTimeOffset.UtcNow, no elements will be skipped.</param>
      <returns>An observable sequence with the elements skipped until the specified start time.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>
            Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the <paramref name="startTime" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SkipUntil``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Skips elements from the observable source sequence until the specified start time, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to skip elements for.</param>
      <param name="startTime">Time to start taking elements from the source sequence. If this value is less than or equal to DateTimeOffset.UtcNow, no elements will be skipped.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence with the elements skipped until the specified start time.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
            Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the <paramref name="startTime" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Take``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Takes elements for the specified duration from the start of the observable source sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to take elements from.</param>
      <param name="duration">Duration for taking elements from the start of the sequence.</param>
      <returns>An observable sequence with the elements taken during the specified duration from the start of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="duration" /> doesn't guarantee an empty sequence will be returned. This is a side-effect
            of the asynchrony introduced by the scheduler, where the action that stops forwarding callbacks from the source sequence may not execute
            immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Take``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Takes elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to take elements from.</param>
      <param name="duration">Duration for taking elements from the start of the sequence.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence with the elements taken during the specified duration from the start of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="duration" /> doesn't guarantee an empty sequence will be returned. This is a side-effect
            of the asynchrony introduced by the scheduler, where the action that stops forwarding callbacks from the source sequence may not execute
            immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeLast``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Returns elements within the specified duration from the end of the observable source sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to take elements from.</param>
      <param name="duration">Duration for taking elements from the end of the sequence.</param>
      <returns>An observable sequence with the elements taken during the specified duration from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            This operator accumulates a buffer with a length enough to store elements for any <paramref name="duration" /> window during the lifetime of
            the source sequence. Upon completion of the source sequence, this buffer is drained on the result sequence. This causes the result elements
            to be delayed with <paramref name="duration" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeLast``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns elements within the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to take elements from.</param>
      <param name="duration">Duration for taking elements from the end of the sequence.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence with the elements taken during the specified duration from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            This operator accumulates a buffer with a length enough to store elements for any <paramref name="duration" /> window during the lifetime of
            the source sequence. Upon completion of the source sequence, this buffer is drained on the result sequence. This causes the result elements
            to be delayed with <paramref name="duration" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeLast``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns elements within the specified duration from the end of the observable source sequence, using the specified schedulers to run timers and to drain the collected elements.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to take elements from.</param>
      <param name="duration">Duration for taking elements from the end of the sequence.</param>
      <param name="timerScheduler">Scheduler to run the timer on.</param>
      <param name="loopScheduler">Scheduler to drain the collected elements.</param>
      <returns>An observable sequence with the elements taken during the specified duration from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="timerScheduler" /> or <paramref name="loopScheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            This operator accumulates a buffer with a length enough to store elements for any <paramref name="duration" /> window during the lifetime of
            the source sequence. Upon completion of the source sequence, this buffer is drained on the result sequence. This causes the result elements
            to be delayed with <paramref name="duration" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeLastBuffer``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Returns a list with the elements within the specified duration from the end of the observable source sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to take elements from.</param>
      <param name="duration">Duration for taking elements from the end of the sequence.</param>
      <returns>An observable sequence containing a single list with the elements taken during the specified duration from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            This operator accumulates a buffer with a length enough to store elements for any <paramref name="duration" /> window during the lifetime of
            the source sequence. Upon completion of the source sequence, this buffer is produced on the result sequence.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeLastBuffer``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns a list with the elements within the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to take elements from.</param>
      <param name="duration">Duration for taking elements from the end of the sequence.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence containing a single list with the elements taken during the specified duration from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            This operator accumulates a buffer with a length enough to store elements for any <paramref name="duration" /> window during the lifetime of
            the source sequence. Upon completion of the source sequence, this buffer is produced on the result sequence.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeUntil``1(System.IObservable{``0},System.DateTimeOffset)">
      <summary>
            Takes elements for the specified duration until the specified end time.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to take elements from.</param>
      <param name="endTime">Time to stop taking elements from the source sequence. If this value is less than or equal to DateTimeOffset.UtcNow, the result stream will complete immediately.</param>
      <returns>An observable sequence with the elements taken until the specified end time.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeUntil``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Takes elements for the specified duration until the specified end time, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to take elements from.</param>
      <param name="endTime">Time to stop taking elements from the source sequence. If this value is less than or equal to DateTimeOffset.UtcNow, the result stream will complete immediately.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence with the elements taken until the specified end time.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Throttle``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Ignores elements from an observable sequence which are followed by another element within a specified relative time duration.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to throttle.</param>
      <param name="dueTime">Throttling duration for each element.</param>
      <returns>The throttled sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            This operator throttles the source sequence by holding on to each element for the duration specified in <paramref name="dueTime" />. If another
            element is produced within this time window, the element is dropped and a new timer is started for the current element, repeating this whole
            process. For streams that never have gaps larger than or equal to <paramref name="dueTime" /> between elements, the resulting stream won't
            produce any elements. In order to reduce the volume of a stream whilst guaranteeing the periodic production of elements, consider using the
            Observable.Sample set of operators.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="dueTime" /> is not recommended but supported, causing throttling timers to be scheduled
            that are due immediately. However, this doesn't guarantee all elements will be retained in the result sequence. This is a side-effect of the
            asynchrony introduced by the scheduler, where the action to forward the current element may not execute immediately, despite the TimeSpan.Zero
            due time. In such cases, the next element may arrive before the scheduler gets a chance to run the throttling action.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Throttle``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Ignores elements from an observable sequence which are followed by another element within a specified relative time duration, using the specified scheduler to run throttling timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to throttle.</param>
      <param name="dueTime">Throttling duration for each element.</param>
      <param name="scheduler">Scheduler to run the throttle timers on.</param>
      <returns>The throttled sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            This operator throttles the source sequence by holding on to each element for the duration specified in <paramref name="dueTime" />. If another
            element is produced within this time window, the element is dropped and a new timer is started for the current element, repeating this whole
            process. For streams that never have gaps larger than or equal to <paramref name="dueTime" /> between elements, the resulting stream won't
            produce any elements. In order to reduce the volume of a stream whilst guaranteeing the periodic production of elements, consider using the
            Observable.Sample set of operators.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="dueTime" /> is not recommended but supported, causing throttling timers to be scheduled
            that are due immediately. However, this doesn't guarantee all elements will be retained in the result sequence. This is a side-effect of the
            asynchrony introduced by the scheduler, where the action to forward the current element may not execute immediately, despite the TimeSpan.Zero
            due time. In such cases, the next element may arrive before the scheduler gets a chance to run the throttling action.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Throttle``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}})">
      <summary>
            Ignores elements from an observable sequence which are followed by another value within a computed throttle duration.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TThrottle">The type of the elements in the throttle sequences selected for each element in the source sequence.</typeparam>
      <param name="source">Source sequence to throttle.</param>
      <param name="throttleDurationSelector">Selector function to retrieve a sequence indicating the throttle duration for each given element.</param>
      <returns>The throttled sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="throttleDurationSelector" /> is null.</exception>
      <remarks>
            This operator throttles the source sequence by holding on to each element for the duration denoted by <paramref name="throttleDurationSelector" />.
            If another element is produced within this time window, the element is dropped and a new timer is started for the current element, repeating this
            whole process. For streams where the duration computed by applying the <paramref name="throttleDurationSelector" /> to each element overlaps with
            the occurrence of the successor element, the resulting stream won't produce any elements. In order to reduce the volume of a stream whilst
            guaranteeing the periodic production of elements, consider using the Observable.Sample set of operators.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TimeInterval``1(System.IObservable{``0})">
      <summary>
            Records the time interval between consecutive elements in an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to record time intervals for.</param>
      <returns>An observable sequence with time interval information on elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TimeInterval``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Records the time interval between consecutive elements in an observable sequence, using the specified scheduler to compute time intervals.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to record time intervals for.</param>
      <param name="scheduler">Scheduler used to compute time intervals.</param>
      <returns>An observable sequence with time interval information on elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Applies a timeout policy for each element in the observable sequence.
            If the next element isn't received within the specified timeout duration starting from its predecessor, a TimeoutException is propagated to the observer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="dueTime">Maximum duration between values before a timeout occurs.</param>
      <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <exception cref="T:System.TimeoutException">(Asynchronous) If no element is produced within <paramref name="dueTime" /> from the previous element.</exception>
      <remarks>
        <para>
            In case you only want to timeout on the first element, consider using the <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})" />
            operator applied to the source sequence and a delayed <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)" /> sequence. Alternatively, the general-purpose overload
            of Timeout, <see cref="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})" /> can be used.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="dueTime" /> is not recommended but supported, causing timeout timers to be scheduled that are due
            immediately. However, this doesn't guarantee a timeout will occur, even for the first element. This is a side-effect of the asynchrony introduced by the
            scheduler, where the action to propagate a timeout may not execute immediately, despite the TimeSpan.Zero due time. In such cases, the next element may
            arrive before the scheduler gets a chance to run the timeout action.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Applies a timeout policy for each element in the observable sequence, using the specified scheduler to run timeout timers.
            If the next element isn't received within the specified timeout duration starting from its predecessor, a TimeoutException is propagated to the observer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="dueTime">Maximum duration between values before a timeout occurs.</param>
      <param name="scheduler">Scheduler to run the timeout timers on.</param>
      <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <exception cref="T:System.TimeoutException">(Asynchronous) If no element is produced within <paramref name="dueTime" /> from the previous element.</exception>
      <remarks>
        <para>
            In case you only want to timeout on the first element, consider using the <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})" />
            operator applied to the source sequence and a delayed <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)" /> sequence. Alternatively, the general-purpose overload
            of Timeout, <see cref="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})" /> can be used.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="dueTime" /> is not recommended but supported, causing timeout timers to be scheduled that are due
            immediately. However, this doesn't guarantee a timeout will occur, even for the first element. This is a side-effect of the asynchrony introduced by the
            scheduler, where the action to propagate a timeout may not execute immediately, despite the TimeSpan.Zero due time. In such cases, the next element may
            arrive before the scheduler gets a chance to run the timeout action.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.IObservable{``0})">
      <summary>
            Applies a timeout policy for each element in the observable sequence.
            If the next element isn't received within the specified timeout duration starting from its predecessor, the other observable sequence is used to produce future messages from that point on.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and the other sequence used upon a timeout.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="dueTime">Maximum duration between values before a timeout occurs.</param>
      <param name="other">Sequence to return in case of a timeout.</param>
      <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="other" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            In case you only want to timeout on the first element, consider using the <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})" />
            operator applied to the source sequence and a delayed <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)" /> sequence. Alternatively, the general-purpose overload
            of Timeout, <see cref="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})" /> can be used.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="dueTime" /> is not recommended but supported, causing timeout timers to be scheduled that are due
            immediately. However, this doesn't guarantee a timeout will occur, even for the first element. This is a side-effect of the asynchrony introduced by the
            scheduler, where the action to propagate a timeout may not execute immediately, despite the TimeSpan.Zero due time. In such cases, the next element may
            arrive before the scheduler gets a chance to run the timeout action.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Applies a timeout policy for each element in the observable sequence, using the specified scheduler to run timeout timers.
            If the next element isn't received within the specified timeout duration starting from its predecessor, the other observable sequence is used to produce future messages from that point on.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and the other sequence used upon a timeout.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="dueTime">Maximum duration between values before a timeout occurs.</param>
      <param name="other">Sequence to return in case of a timeout.</param>
      <param name="scheduler">Scheduler to run the timeout timers on.</param>
      <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="other" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            In case you only want to timeout on the first element, consider using the <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})" />
            operator applied to the source sequence and a delayed <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)" /> sequence. Alternatively, the general-purpose overload
            of Timeout, <see cref="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})" /> can be used.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="dueTime" /> is not recommended but supported, causing timeout timers to be scheduled that are due
            immediately. However, this doesn't guarantee a timeout will occur, even for the first element. This is a side-effect of the asynchrony introduced by the
            scheduler, where the action to propagate a timeout may not execute immediately, despite the TimeSpan.Zero due time. In such cases, the next element may
            arrive before the scheduler gets a chance to run the timeout action.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset)">
      <summary>
            Applies a timeout policy to the observable sequence based on an absolute time.
            If the sequence doesn't terminate before the specified absolute due time, a TimeoutException is propagated to the observer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="dueTime">Time when a timeout occurs. If this value is less than or equal to DateTimeOffset.UtcNow, the timeout occurs immediately.</param>
      <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.TimeoutException">(Asynchronous) If the sequence hasn't terminated before <paramref name="dueTime" />.</exception>
      <remarks>
            In case you only want to timeout on the first element, consider using the <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})" />
            operator applied to the source sequence and a delayed <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)" /> sequence. Alternatively, the general-purpose overload
            of Timeout, <see cref="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})" /> can be used.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Applies a timeout policy to the observable sequence based on an absolute time, using the specified scheduler to run timeout timers.
            If the sequence doesn't terminate before the specified absolute due time, a TimeoutException is propagated to the observer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="dueTime">Time when a timeout occurs. If this value is less than or equal to DateTimeOffset.UtcNow, the timeout occurs immediately.</param>
      <param name="scheduler">Scheduler to run the timeout timers on.</param>
      <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.TimeoutException">(Asynchronous) If the sequence hasn't terminated before <paramref name="dueTime" />.</exception>
      <remarks>
            In case you only want to timeout on the first element, consider using the <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})" />
            operator applied to the source sequence and a delayed <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)" /> sequence. Alternatively, the general-purpose overload
            of Timeout, <see cref="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})" /> can be used.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.IObservable{``0})">
      <summary>
            Applies a timeout policy to the observable sequence based on an absolute time.
            If the sequence doesn't terminate before the specified absolute due time, the other observable sequence is used to produce future messages from that point on.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and the other sequence used upon a timeout.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="dueTime">Time when a timeout occurs. If this value is less than or equal to DateTimeOffset.UtcNow, the timeout occurs immediately.</param>
      <param name="other">Sequence to return in case of a timeout.</param>
      <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="other" /> is null.</exception>
      <remarks>
            In case you only want to timeout on the first element, consider using the <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})" />
            operator applied to the source sequence and a delayed <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)" /> sequence. Alternatively, the general-purpose overload
            of Timeout, <see cref="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})" /> can be used.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Applies a timeout policy to the observable sequence based on an absolute time, using the specified scheduler to run timeout timers.
            If the sequence doesn't terminate before the specified absolute due time, the other observable sequence is used to produce future messages from that point on.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and the other sequence used upon a timeout.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="dueTime">Time when a timeout occurs. If this value is less than or equal to DateTimeOffset.UtcNow, the timeout occurs immediately.</param>
      <param name="other">Sequence to return in case of a timeout.</param>
      <param name="scheduler">Scheduler to run the timeout timers on.</param>
      <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="other" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
            In case you only want to timeout on the first element, consider using the <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})" />
            operator applied to the source sequence and a delayed <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)" /> sequence. Alternatively, the general-purpose overload
            of Timeout, <see cref="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})" /> can be used.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}})">
      <summary>
            Applies a timeout policy to the observable sequence based on a timeout duration computed for each element.
            If the next element isn't received within the computed duration starting from its predecessor, a TimeoutException is propagated to the observer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TTimeout">The type of the elements in the timeout sequences used to indicate the timeout duration for each element in the source sequence.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="timeoutDurationSelector">Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.</param>
      <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="timeoutDurationSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.IObservable{``0})">
      <summary>
            Applies a timeout policy to the observable sequence based on a timeout duration computed for each element.
            If the next element isn't received within the computed duration starting from its predecessor, the other observable sequence is used to produce future messages from that point on.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and the other sequence used upon a timeout.</typeparam>
      <typeparam name="TTimeout">The type of the elements in the timeout sequences used to indicate the timeout duration for each element in the source sequence.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="timeoutDurationSelector">Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.</param>
      <param name="other">Sequence to return in case of a timeout.</param>
      <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="timeoutDurationSelector" /> or <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})">
      <summary>
            Applies a timeout policy to the observable sequence based on an initial timeout duration for the first element, and a timeout duration computed for each subsequent element.
            If the next element isn't received within the computed duration starting from its predecessor, a TimeoutException is propagated to the observer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TTimeout">The type of the elements in the timeout sequences used to indicate the timeout duration for each element in the source sequence.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="firstTimeout">Observable sequence that represents the timeout for the first element.</param>
      <param name="timeoutDurationSelector">Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.</param>
      <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="firstTimeout" /> or <paramref name="timeoutDurationSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}},System.IObservable{``0})">
      <summary>
            Applies a timeout policy to the observable sequence based on an initial timeout duration for the first element, and a timeout duration computed for each subsequent element.
            If the next element isn't received within the computed duration starting from its predecessor, the other observable sequence is used to produce future messages from that point on.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and the other sequence used upon a timeout.</typeparam>
      <typeparam name="TTimeout">The type of the elements in the timeout sequences used to indicate the timeout duration for each element in the source sequence.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="firstTimeout">Observable sequence that represents the timeout for the first element.</param>
      <param name="timeoutDurationSelector">Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.</param>
      <param name="other">Sequence to return in case of a timeout.</param>
      <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="firstTimeout" /> or <paramref name="timeoutDurationSelector" /> or <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timer(System.TimeSpan)">
      <summary>
            Returns an observable sequence that produces a single value after the specified relative due time has elapsed.
            </summary>
      <param name="dueTime">Relative time at which to produce the value. If this value is less than or equal to TimeSpan.Zero, the timer will fire as soon as possible.</param>
      <returns>An observable sequence that produces a value after the due time has elapsed.</returns>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timer(System.DateTimeOffset)">
      <summary>
            Returns an observable sequence that produces a single value at the specified absolute due time.
            </summary>
      <param name="dueTime">Absolute time at which to produce the value. If this value is less than or equal to DateTimeOffset.UtcNow, the timer will fire as soon as possible.</param>
      <returns>An observable sequence that produces a value at due time.</returns>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timer(System.TimeSpan,System.TimeSpan)">
      <summary>
            Returns an observable sequence that periodically produces a value after the specified initial relative due time has elapsed.
            </summary>
      <param name="dueTime">Relative time at which to produce the first value. If this value is less than or equal to TimeSpan.Zero, the timer will fire as soon as possible.</param>
      <param name="period">Period to produce subsequent values. If this value is equal to TimeSpan.Zero, the timer will recur as fast as possible.</param>
      <returns>An observable sequence that produces a value after due time has elapsed and then after each period.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timer(System.DateTimeOffset,System.TimeSpan)">
      <summary>
            Returns an observable sequence that periodically produces a value starting at the specified initial absolute due time.
            </summary>
      <param name="dueTime">Absolute time at which to produce the first value. If this value is less than or equal to DateTimeOffset.UtcNow, the timer will fire as soon as possible.</param>
      <param name="period">Period to produce subsequent values. If this value is equal to TimeSpan.Zero, the timer will recur as fast as possible.</param>
      <returns>An observable sequence that produces a value at due time and then after each period.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timer(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that produces a single value after the specified relative due time has elapsed, using the specified scheduler to run the timer.
            </summary>
      <param name="dueTime">Relative time at which to produce the value. If this value is less than or equal to TimeSpan.Zero, the timer will fire as soon as possible.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence that produces a value after the due time has elapsed.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timer(System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that produces a single value at the specified absolute due time, using the specified scheduler to run the timer.
            </summary>
      <param name="dueTime">Absolute time at which to produce the value. If this value is less than or equal to DateTimeOffset.UtcNow, the timer will fire as soon as possible.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence that produces a value at due time.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timer(System.TimeSpan,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that periodically produces a value after the specified initial relative due time has elapsed, using the specified scheduler to run timers.
            </summary>
      <param name="dueTime">Relative time at which to produce the first value. If this value is less than or equal to TimeSpan.Zero, the timer will fire as soon as possible.</param>
      <param name="period">Period to produce subsequent values. If this value is equal to TimeSpan.Zero, the timer will recur as fast as possible.</param>
      <param name="scheduler">Scheduler to run timers on.</param>
      <returns>An observable sequence that produces a value after due time has elapsed and then each period.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timer(System.DateTimeOffset,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that periodically produces a value starting at the specified initial absolute due time, using the specified scheduler to run timers.
            </summary>
      <param name="dueTime">Absolute time at which to produce the first value. If this value is less than or equal to DateTimeOffset.UtcNow, the timer will fire as soon as possible.</param>
      <param name="period">Period to produce subsequent values. If this value is equal to TimeSpan.Zero, the timer will recur as fast as possible.</param>
      <param name="scheduler">Scheduler to run timers on.</param>
      <returns>An observable sequence that produces a value at due time and then after each period.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timestamp``1(System.IObservable{``0})">
      <summary>
            Timestamps each element in an observable sequence using the local system clock.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to timestamp elements for.</param>
      <returns>An observable sequence with timestamp information on elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timestamp``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Timestamp each element in an observable sequence using the clock of the specified scheduler.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to timestamp elements for.</param>
      <param name="scheduler">Scheduler used to compute timestamps.</param>
      <returns>An observable sequence with timestamp information on elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping windows which are produced based on timing information.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="timeSpan">Length of each window.</param>
      <returns>The sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create windows as fast as it can.
            Because all source sequence elements end up in one of the windows, some windows won't have a zero time span. This is a side-effect of the asynchrony introduced
            by the scheduler, where the action to close the current window and to create a new window may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping windows which are produced based on timing information, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="timeSpan">Length of each window.</param>
      <param name="scheduler">Scheduler to run windowing timers on.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create windows as fast as it can.
            Because all source sequence elements end up in one of the windows, some windows won't have a zero time span. This is a side-effect of the asynchrony introduced
            by the scheduler, where the action to close the current window and to create a new window may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan)">
      <summary>
            Projects each element of an observable sequence into zero or more windows which are produced based on timing information.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="timeSpan">Length of each window.</param>
      <param name="timeShift">Interval between creation of consecutive windows.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> or <paramref name="timeSpan" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create windows with minimum duration
            length. However, some windows won't have a zero time span. This is a side-effect of the asynchrony introduced by the scheduler, where the action to close the
            current window may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="timeShift" /> is not recommended but supported, causing the scheduler to create windows as fast as it can.
            However, this doesn't mean all windows will start at the beginning of the source sequence. This is a side-effect of the asynchrony introduced by the scheduler,
            where the action to create a new window may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Projects each element of an observable sequence into zero or more windows which are produced based on timing information, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="timeSpan">Length of each window.</param>
      <param name="timeShift">Interval between creation of consecutive windows.</param>
      <param name="scheduler">Scheduler to run windowing timers on.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> or <paramref name="timeSpan" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create windows with minimum duration
            length. However, some windows won't have a zero time span. This is a side-effect of the asynchrony introduced by the scheduler, where the action to close the
            current window may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="timeShift" /> is not recommended but supported, causing the scheduler to create windows as fast as it can.
            However, this doesn't mean all windows will start at the beginning of the source sequence. This is a side-effect of the asynchrony introduced by the scheduler,
            where the action to create a new window may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.Int32)">
      <summary>
            Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed.
            A useful real-world analogy of this overload is the behavior of a ferry leaving the dock when all seats are taken, or at the scheduled time of departure, whichever event occurs first.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="timeSpan">Maximum time length of a window.</param>
      <param name="count">Maximum element count of a window.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> is less than TimeSpan.Zero. -or- <paramref name="count" /> is less than or equal to zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create windows as fast as it can.
            Because all source sequence elements end up in one of the windows, some windows won't have a zero time span. This is a side-effect of the asynchrony introduced
            by the scheduler, where the action to close the current window and to create a new window may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed, using the specified scheduler to run timers.
            A useful real-world analogy of this overload is the behavior of a ferry leaving the dock when all seats are taken, or at the scheduled time of departure, whichever event occurs first.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="timeSpan">Maximum time length of a window.</param>
      <param name="count">Maximum element count of a window.</param>
      <param name="scheduler">Scheduler to run windowing timers on.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> is less than TimeSpan.Zero. -or- <paramref name="count" /> is less than or equal to zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create windows as fast as it can.
            Because all source sequence elements end up in one of the windows, some windows won't have a zero time span. This is a side-effect of the asynchrony introduced
            by the scheduler, where the action to close the current window and to create a new window may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="T:System.Reactive.Linq.IQueryLanguage">
      <summary>
            Internal interface describing the LINQ to Events query language.
            </summary>
    </member>
    <member name="T:System.Reactive.EventPatternSourceBase`2">
      <summary>
            Base class for classes that expose an observable sequence as a well-known event pattern (sender, event arguments).
            Contains functionality to maintain a map of event handler delegates to observable sequence subscriptions. Subclasses
            should only add an event with custom add and remove methods calling into the base class's operations.
            </summary>
      <typeparam name="TSender">The type of the sender that raises the event.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    </member>
    <member name="M:System.Reactive.EventPatternSourceBase`2.#ctor(System.IObservable{System.Reactive.EventPattern{`0,`1}},System.Action{System.Action{`0,`1},System.Reactive.EventPattern{`0,`1}})">
      <summary>
            Creates a new event pattern source.
            </summary>
      <param name="source">Source sequence to expose as an event.</param>
      <param name="invokeHandler">Delegate used to invoke the event for each element of the sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="invokeHandler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.EventPatternSourceBase`2.Add(System.Delegate,System.Action{`0,`1})">
      <summary>
            Adds the specified event handler, causing a subscription to the underlying source.
            </summary>
      <param name="handler">Event handler to add. The same delegate should be passed to the Remove operation in order to remove the event handler.</param>
      <param name="invoke">Invocation delegate to raise the event in the derived class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> or <paramref name="invoke" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.EventPatternSourceBase`2.Remove(System.Delegate)">
      <summary>
            Removes the specified event handler, causing a disposal of the corresponding subscription to the underlying source that was created during the Add operation.
            </summary>
      <param name="handler">Event handler to remove. This should be the same delegate as one that was passed to the Add operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.EventPattern`2">
      <summary>
            Represents a .NET event invocation consisting of the strongly typed object that raised the event and the data that was generated by the event.
            </summary>
      <typeparam name="TSender">The type of the sender that raised the event.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    </member>
    <member name="M:System.Reactive.EventPattern`2.#ctor(`0,`1)">
      <summary>
            Creates a new data representation instance of a .NET event invocation with the given sender and event data.
            </summary>
      <param name="sender">The sender object that raised the event.</param>
      <param name="e">The event data that was generated by the event.</param>
    </member>
    <member name="M:System.Reactive.EventPattern`2.Equals(System.Reactive.EventPattern{`0,`1})">
      <summary>
            Determines whether the current EventPattern&lt;TSender, TEventArgs&gt; object represents the same event as a specified EventPattern&lt;TSender, TEventArgs&gt; object.
            </summary>
      <param name="other">An object to compare to the current EventPattern&lt;TSender, TEventArgs&gt; object.</param>
      <returns>true if both EventPattern&lt;TSender, TEventArgs&gt; objects represent the same event; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.EventPattern`2.Equals(System.Object)">
      <summary>
            Determines whether the specified System.Object is equal to the current EventPattern&lt;TSender, TEventArgs&gt;.
            </summary>
      <param name="obj">The System.Object to compare with the current EventPattern&lt;TSender, TEventArgs&gt;.</param>
      <returns>true if the specified System.Object is equal to the current EventPattern&lt;TSender, TEventArgs&gt;; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.EventPattern`2.GetHashCode">
      <summary>
            Returns the hash code for the current EventPattern&lt;TSender, TEventArgs&gt; instance.
            </summary>
      <returns>A hash code for the current EventPattern&lt;TSender, TEventArgs&gt; instance.</returns>
    </member>
    <member name="M:System.Reactive.EventPattern`2.op_Equality(System.Reactive.EventPattern{`0,`1},System.Reactive.EventPattern{`0,`1})">
      <summary>
            Determines whether two specified EventPattern&lt;TSender, TEventArgs&gt; objects represent the same event.
            </summary>
      <param name="first">The first EventPattern&lt;TSender, TEventArgs&gt; to compare, or null.</param>
      <param name="second">The second EventPattern&lt;TSender, TEventArgs&gt; to compare, or null.</param>
      <returns>true if both EventPattern&lt;TSender, TEventArgs&gt; objects represent the same event; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.EventPattern`2.op_Inequality(System.Reactive.EventPattern{`0,`1},System.Reactive.EventPattern{`0,`1})">
      <summary>
            Determines whether two specified EventPattern&lt;TSender, TEventArgs&gt; objects represent a different event.
            </summary>
      <param name="first">The first EventPattern&lt;TSender, TEventArgs&gt; to compare, or null.</param>
      <param name="second">The second EventPattern&lt;TSender, TEventArgs&gt; to compare, or null.</param>
      <returns>true if both EventPattern&lt;TSender, TEventArgs&gt; objects don't represent the same event; otherwise, false.</returns>
    </member>
    <member name="P:System.Reactive.EventPattern`2.Sender">
      <summary>
            Gets the sender object that raised the event.
            </summary>
    </member>
    <member name="P:System.Reactive.EventPattern`2.EventArgs">
      <summary>
            Gets the event data that was generated by the event.
            </summary>
    </member>
    <member name="T:System.Reactive.EventPattern`1">
      <summary>
            Represents a .NET event invocation consisting of the weakly typed object that raised the event and the data that was generated by the event.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    </member>
    <member name="M:System.Reactive.EventPattern`1.#ctor(System.Object,`0)">
      <summary>
            Creates a new data representation instance of a .NET event invocation with the given sender and event data.
            </summary>
      <param name="sender">The sender object that raised the event.</param>
      <param name="e">The event data that was generated by the event.</param>
    </member>
    <member name="T:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2">
      <summary>
            Base class for virtual time schedulers.
            </summary>
      <typeparam name="TAbsolute">Absolute time representation type.</typeparam>
      <typeparam name="TRelative">Relative time representation type.</typeparam>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.#ctor">
      <summary>
            Creates a new virtual time scheduler with the default value of TAbsolute as the initial clock value.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.#ctor(`0,System.Collections.Generic.IComparer{`0})">
      <summary>
            Creates a new virtual time scheduler with the specified initial clock value and absolute time comparer.
            </summary>
      <param name="initialClock">Initial value for the clock.</param>
      <param name="comparer">Comparer to determine causality of events based on absolute time.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Add(`0,`1)">
      <summary>
            Adds a relative time value to an absolute time value.
            </summary>
      <param name="absolute">Absolute time value.</param>
      <param name="relative">Relative time value to add.</param>
      <returns>The resulting absolute time sum value.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.ToDateTimeOffset(`0)">
      <summary>
            Converts the absolute time value to a DateTimeOffset value.
            </summary>
      <param name="absolute">Absolute time value to convert.</param>
      <returns>The corresponding DateTimeOffset value.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.ToRelative(System.TimeSpan)">
      <summary>
            Converts the TimeSpan value to a relative time value.
            </summary>
      <param name="timeSpan">TimeSpan value to convert.</param>
      <returns>The corresponding relative time value.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.ScheduleAbsolute``1(``0,`0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed at dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="dueTime">Absolute time at which to execute the action.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.ScheduleRelative``1(``0,`1,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed at dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed after dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed at dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="dueTime">Absolute time at which to execute the action.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Start">
      <summary>
            Starts the virtual time scheduler.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Stop">
      <summary>
            Stops the virtual time scheduler.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.AdvanceTo(`0)">
      <summary>
            Advances the scheduler's clock to the specified time, running all work till that point.
            </summary>
      <param name="time">Absolute time to advance the scheduler's clock to.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is in the past.</exception>
      <exception cref="T:System.InvalidOperationException">The scheduler is already running. VirtualTimeScheduler doesn't support running nested work dispatch loops. To simulate time slippage while running work on the scheduler, use <see cref="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Sleep(`1)" />.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.AdvanceBy(`1)">
      <summary>
            Advances the scheduler's clock by the specified relative time, running all work scheduled for that timespan.
            </summary>
      <param name="time">Relative time to advance the scheduler's clock by.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is negative.</exception>
      <exception cref="T:System.InvalidOperationException">The scheduler is already running. VirtualTimeScheduler doesn't support running nested work dispatch loops. To simulate time slippage while running work on the scheduler, use <see cref="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Sleep(`1)" />.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Sleep(`1)">
      <summary>
            Advances the scheduler's clock by the specified relative time.
            </summary>
      <param name="time">Relative time to advance the scheduler's clock by.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is negative.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.GetNext">
      <summary>
            Gets the next scheduled item to be executed.
            </summary>
      <returns>The next scheduled item.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.GetService(System.Type)">
      <summary>
            Discovers scheduler services by interface type. The base class implementation supports
            only the IStopwatchProvider service. To influence service discovery - such as adding
            support for other scheduler services - derived types can override this method.
            </summary>
      <param name="serviceType">Scheduler service interface type to discover.</param>
      <returns>Object implementing the requested service, if available; null otherwise.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.StartStopwatch">
      <summary>
            Starts a new stopwatch object.
            </summary>
      <returns>New stopwatch object; started at the time of the request.</returns>
    </member>
    <member name="P:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.IsEnabled">
      <summary>
            Gets whether the scheduler is enabled to run work.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Comparer">
      <summary>
            Gets the comparer used to compare absolute time values.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Clock">
      <summary>
            Gets the scheduler's absolute time clock value.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.HistoricalSchedulerBase">
      <summary>
            Base class for historical schedulers, which are virtual time schedulers that use DateTimeOffset for absolute time and TimeSpan for relative time.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.#ctor">
      <summary>
            Creates a new historical scheduler with the minimum value of DateTimeOffset as the initial clock value.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.#ctor(System.DateTimeOffset)">
      <summary>
            Creates a new historical scheduler with the specified initial clock value.
            </summary>
      <param name="initialClock">Initial clock value.</param>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.#ctor(System.DateTimeOffset,System.Collections.Generic.IComparer{System.DateTimeOffset})">
      <summary>
            Creates a new historical scheduler with the specified initial clock value and absolute time comparer.
            </summary>
      <param name="initialClock">Initial value for the clock.</param>
      <param name="comparer">Comparer to determine causality of events based on absolute time.</param>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.Add(System.DateTimeOffset,System.TimeSpan)">
      <summary>
            Adds a relative time value to an absolute time value.
            </summary>
      <param name="absolute">Absolute time value.</param>
      <param name="relative">Relative time value to add.</param>
      <returns>The resulting absolute time sum value.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.ToDateTimeOffset(System.DateTimeOffset)">
      <summary>
            Converts the absolute time value to a DateTimeOffset value.
            </summary>
      <param name="absolute">Absolute time value to convert.</param>
      <returns>The corresponding DateTimeOffset value.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.ToRelative(System.TimeSpan)">
      <summary>
            Converts the TimeSpan value to a relative time value.
            </summary>
      <param name="timeSpan">TimeSpan value to convert.</param>
      <returns>The corresponding relative time value.</returns>
    </member>
    <member name="T:System.Reactive.Concurrency.HistoricalScheduler">
      <summary>
            Provides a virtual time scheduler that uses DateTimeOffset for absolute time and TimeSpan for relative time.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalScheduler.#ctor">
      <summary>
            Creates a new historical scheduler with the minimum value of DateTimeOffset as the initial clock value.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalScheduler.#ctor(System.DateTimeOffset)">
      <summary>
            Creates a new historical scheduler with the specified initial clock value.
            </summary>
      <param name="initialClock">Initial value for the clock.</param>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalScheduler.#ctor(System.DateTimeOffset,System.Collections.Generic.IComparer{System.DateTimeOffset})">
      <summary>
            Creates a new historical scheduler with the specified initial clock value.
            </summary>
      <param name="initialClock">Initial value for the clock.</param>
      <param name="comparer">Comparer to determine causality of events based on absolute time.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalScheduler.GetNext">
      <summary>
            Gets the next scheduled item to be executed.
            </summary>
      <returns>The next scheduled item.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalScheduler.ScheduleAbsolute``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed at dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Absolute time at which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Concurrency.VirtualTimeScheduler`2">
      <summary>
            Base class for virtual time schedulers using a priority queue for scheduled items.
            </summary>
      <typeparam name="TAbsolute">Absolute time representation type.</typeparam>
      <typeparam name="TRelative">Relative time representation type.</typeparam>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeScheduler`2.#ctor">
      <summary>
            Creates a new virtual time scheduler with the default value of TAbsolute as the initial clock value.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeScheduler`2.#ctor(`0,System.Collections.Generic.IComparer{`0})">
      <summary>
            Creates a new virtual time scheduler.
            </summary>
      <param name="initialClock">Initial value for the clock.</param>
      <param name="comparer">Comparer to determine causality of events based on absolute time.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeScheduler`2.GetNext">
      <summary>
            Gets the next scheduled item to be executed.
            </summary>
      <returns>The next scheduled item.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeScheduler`2.ScheduleAbsolute``1(``0,`0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed at dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Absolute time at which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Subjects.ConnectableObservable`2">
      <summary>
            Represents an observable wrapper that can be connected and disconnected from its underlying observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the resulting sequence, after transformation through the subject.</typeparam>
    </member>
    <member name="M:System.Reactive.Subjects.ConnectableObservable`2.#ctor(System.IObservable{`0},System.Reactive.Subjects.ISubject{`0,`1})">
      <summary>
            Creates an observable that can be connected and disconnected from its source.
            </summary>
      <param name="source">Underlying observable source sequence that can be connected and disconnected from the wrapper.</param>
      <param name="subject">Subject exposed by the connectable observable, receiving data from the underlying source sequence upon connection.</param>
    </member>
    <member name="M:System.Reactive.Subjects.ConnectableObservable`2.Connect">
      <summary>
            Connects the observable wrapper to its source. All subscribed observers will receive values from the underlying observable sequence as long as the connection is established.
            </summary>
      <returns>Disposable object used to disconnect the observable wrapper from its source, causing subscribed observer to stop receiving values from the underlying observable sequence.</returns>
    </member>
    <member name="M:System.Reactive.Subjects.ConnectableObservable`2.Subscribe(System.IObserver{`1})">
      <summary>
            Subscribes an observer to the observable sequence. No values from the underlying observable source will be received unless a connection was established through the Connect method.
            </summary>
      <param name="observer">Observer that will receive values from the underlying observable source when the current ConnectableObservable instance is connected through a call to Connect.</param>
      <returns>Disposable used to unsubscribe from the observable sequence.</returns>
    </member>
    <member name="T:System.Reactive.Subjects.Subject">
      <summary>
            Provides a set of static methods for creating subjects.
            </summary>
    </member>
    <member name="M:System.Reactive.Subjects.Subject.Create``2(System.IObserver{``0},System.IObservable{``1})">
      <summary>
            Creates a subject from the specified observer and observable.
            </summary>
      <typeparam name="TSource">The type of the elements received by the observer.</typeparam>
      <typeparam name="TResult">The type of the elements produced by the observable sequence.</typeparam>
      <param name="observer">The observer used to send messages to the subject.</param>
      <param name="observable">The observable used to subscribe to messages sent from the subject.</param>
      <returns>Subject implemented using the given observer and observable.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> or <paramref name="observable" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.Subject.Synchronize``2(System.Reactive.Subjects.ISubject{``0,``1})">
      <summary>
            Synchronizes the messages sent to the subject.
            </summary>
      <typeparam name="TSource">The type of the elements received by the subject.</typeparam>
      <typeparam name="TResult">The type of the elements produced by the subject.</typeparam>
      <param name="subject">The subject to synchronize.</param>
      <returns>Subject whose messages are synchronized.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subject" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.Subject.Synchronize``2(System.Reactive.Subjects.ISubject{``0,``1},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Synchronizes the messages sent to the subject and notifies observers on the specified scheduler.
            </summary>
      <typeparam name="TSource">The type of the elements received by the subject.</typeparam>
      <typeparam name="TResult">The type of the elements produced by the subject.</typeparam>
      <param name="subject">The subject to synchronize.</param>
      <param name="scheduler">Scheduler to notify observers on.</param>
      <returns>Subject whose messages are synchronized and whose observers are notified on the given scheduler.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subject" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Subjects.AsyncSubject`1">
      <summary>
            Represents the result of an asynchronous operation.
            The last value before the OnCompleted notification, or the error received through OnError, is sent to all subscribed observers.
            </summary>
      <typeparam name="T">The type of the elements processed by the subject.</typeparam>
    </member>
    <member name="M:System.Reactive.Subjects.AsyncSubject`1.#ctor">
      <summary>
            Creates a subject that can only receive one value and that value is cached for all future observations.
            </summary>
    </member>
    <member name="M:System.Reactive.Subjects.AsyncSubject`1.OnCompleted">
      <summary>
            Notifies all subscribed observers about the end of the sequence, also causing the last received value to be sent out (if any).
            </summary>
    </member>
    <member name="M:System.Reactive.Subjects.AsyncSubject`1.OnError(System.Exception)">
      <summary>
            Notifies all subscribed observers about the exception.
            </summary>
      <param name="error">The exception to send to all observers.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="error" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.AsyncSubject`1.OnNext(`0)">
      <summary>
            Sends a value to the subject. The last value received before successful termination will be sent to all subscribed and future observers.
            </summary>
      <param name="value">The value to store in the subject.</param>
    </member>
    <member name="M:System.Reactive.Subjects.AsyncSubject`1.Subscribe(System.IObserver{`0})">
      <summary>
            Subscribes an observer to the subject.
            </summary>
      <param name="observer">Observer to subscribe to the subject.</param>
      <returns>Disposable object that can be used to unsubscribe the observer from the subject.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.AsyncSubject`1.Dispose">
      <summary>
            Unsubscribe all observers and release resources.
            </summary>
    </member>
    <member name="M:System.Reactive.Subjects.AsyncSubject`1.GetResult">
      <summary>
            Gets the last element of the subject, potentially blocking until the subject completes successfully or exceptionally.
            </summary>
      <returns>The last element of the subject. Throws an InvalidOperationException if no element was received.</returns>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
    </member>
    <member name="P:System.Reactive.Subjects.AsyncSubject`1.HasObservers">
      <summary>
            Indicates whether the subject has observers subscribed to it.
            </summary>
    </member>
    <member name="P:System.Reactive.Subjects.AsyncSubject`1.IsCompleted">
      <summary>
            Gets whether the AsyncSubject has completed.
            </summary>
    </member>
    <member name="T:System.Reactive.Subjects.BehaviorSubject`1">
      <summary>
            Represents a value that changes over time.
            Observers can subscribe to the subject to receive the last (or initial) value and all subsequent notifications.
            </summary>
      <typeparam name="T">The type of the elements processed by the subject.</typeparam>
    </member>
    <member name="M:System.Reactive.Subjects.BehaviorSubject`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.BehaviorSubject`1" /> class which creates a subject that caches its last value and starts with the specified value.
            </summary>
      <param name="value">Initial value sent to observers when no other value has been received by the subject yet.</param>
    </member>
    <member name="M:System.Reactive.Subjects.BehaviorSubject`1.OnCompleted">
      <summary>
            Notifies all subscribed observers about the end of the sequence.
            </summary>
    </member>
    <member name="M:System.Reactive.Subjects.BehaviorSubject`1.OnError(System.Exception)">
      <summary>
            Notifies all subscribed observers about the exception.
            </summary>
      <param name="error">The exception to send to all observers.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="error" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.BehaviorSubject`1.OnNext(`0)">
      <summary>
            Notifies all subscribed observers about the arrival of the specified element in the sequence.
            </summary>
      <param name="value">The value to send to all observers.</param>
    </member>
    <member name="M:System.Reactive.Subjects.BehaviorSubject`1.Subscribe(System.IObserver{`0})">
      <summary>
            Subscribes an observer to the subject.
            </summary>
      <param name="observer">Observer to subscribe to the subject.</param>
      <returns>Disposable object that can be used to unsubscribe the observer from the subject.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.BehaviorSubject`1.Dispose">
      <summary>
            Unsubscribe all observers and release resources.
            </summary>
    </member>
    <member name="P:System.Reactive.Subjects.BehaviorSubject`1.HasObservers">
      <summary>
            Indicates whether the subject has observers subscribed to it.
            </summary>
    </member>
    <member name="T:System.Reactive.Subjects.Subject`1">
      <summary>
            Represents an object that is both an observable sequence as well as an observer.
            Each notification is broadcasted to all subscribed observers.
            </summary>
      <typeparam name="T">The type of the elements processed by the subject.</typeparam>
    </member>
    <member name="M:System.Reactive.Subjects.Subject`1.#ctor">
      <summary>
            Creates a subject.
            </summary>
    </member>
    <member name="M:System.Reactive.Subjects.Subject`1.OnCompleted">
      <summary>
            Notifies all subscribed observers about the end of the sequence.
            </summary>
    </member>
    <member name="M:System.Reactive.Subjects.Subject`1.OnError(System.Exception)">
      <summary>
            Notifies all subscribed observers about the specified exception.
            </summary>
      <param name="error">The exception to send to all currently subscribed observers.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="error" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.Subject`1.OnNext(`0)">
      <summary>
            Notifies all subscribed observers about the arrival of the specified element in the sequence.
            </summary>
      <param name="value">The value to send to all currently subscribed observers.</param>
    </member>
    <member name="M:System.Reactive.Subjects.Subject`1.Subscribe(System.IObserver{`0})">
      <summary>
            Subscribes an observer to the subject.
            </summary>
      <param name="observer">Observer to subscribe to the subject.</param>
      <returns>Disposable object that can be used to unsubscribe the observer from the subject.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.Subject`1.Dispose">
      <summary>
            Releases all resources used by the current instance of the <see cref="T:System.Reactive.Subjects.Subject`1" /> class and unsubscribes all observers.
            </summary>
    </member>
    <member name="P:System.Reactive.Subjects.Subject`1.HasObservers">
      <summary>
            Indicates whether the subject has observers subscribed to it.
            </summary>
    </member>
    <member name="T:System.Reactive.Joins.Pattern">
      <summary>
            Abstract base class for join patterns.
            </summary>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`1">
      <summary>
            Represents a join pattern over one observable sequence.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`1.Then``1(System.Func{`0,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`2">
      <summary>
            Represents a join pattern over two observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`2.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all three observable sequences have an available element.
            </summary>
      <typeparam name="TSource3">The type of the elements in the third observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the two previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`2.Then``1(System.Func{`0,`1,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`3">
      <summary>
            Represents a join pattern over three observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`3.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all four observable sequences have an available element.
            </summary>
      <typeparam name="TSource4">The type of the elements in the fourth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the three previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`3.Then``1(System.Func{`0,`1,`2,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`4">
      <summary>
            Represents a join pattern over four observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`4.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all five observable sequences have an available element.
            </summary>
      <typeparam name="TSource5">The type of the elements in the fifth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the four previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`4.Then``1(System.Func{`0,`1,`2,`3,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`5">
      <summary>
            Represents a join pattern over five observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`5.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all six observable sequences have an available element.
            </summary>
      <typeparam name="TSource6">The type of the elements in the sixth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the five previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`5.Then``1(System.Func{`0,`1,`2,`3,`4,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`6">
      <summary>
            Represents a join pattern over six observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`6.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all seven observable sequences have an available element.
            </summary>
      <typeparam name="TSource7">The type of the elements in the seventh observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the six previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`6.Then``1(System.Func{`0,`1,`2,`3,`4,`5,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`7">
      <summary>
            Represents a join pattern over seven observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`7.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all eight observable sequences have an available element.
            </summary>
      <typeparam name="TSource8">The type of the elements in the eighth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the seven previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`7.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`8">
      <summary>
            Represents a join pattern over eight observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`8.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all nine observable sequences have an available element.
            </summary>
      <typeparam name="TSource9">The type of the elements in the ninth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the eight previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`8.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`9">
      <summary>
            Represents a join pattern over nine observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`9.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all ten observable sequences have an available element.
            </summary>
      <typeparam name="TSource10">The type of the elements in the tenth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the nine previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`9.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`10">
      <summary>
            Represents a join pattern over ten observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`10.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all eleven observable sequences have an available element.
            </summary>
      <typeparam name="TSource11">The type of the elements in the eleventh observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the ten previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`10.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`11">
      <summary>
            Represents a join pattern over eleven observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`11.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all twelve observable sequences have an available element.
            </summary>
      <typeparam name="TSource12">The type of the elements in the twelfth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the eleven previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`11.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`12">
      <summary>
            Represents a join pattern over twelve observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`12.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all thirteen observable sequences have an available element.
            </summary>
      <typeparam name="TSource13">The type of the elements in the thirteenth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the twelve previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`12.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`13">
      <summary>
            Represents a join pattern over thirteen observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`13.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all fourteen observable sequences have an available element.
            </summary>
      <typeparam name="TSource14">The type of the elements in the fourteenth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the thirteen previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`13.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`14">
      <summary>
            Represents a join pattern over fourteen observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TSource14">The type of the elements in the fourteenth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`14.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all fifteen observable sequences have an available element.
            </summary>
      <typeparam name="TSource15">The type of the elements in the fifteenth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the fourteen previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`14.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`15">
      <summary>
            Represents a join pattern over fifteen observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TSource14">The type of the elements in the fourteenth source sequence.</typeparam>
      <typeparam name="TSource15">The type of the elements in the fifteenth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`15.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all sixteen observable sequences have an available element.
            </summary>
      <typeparam name="TSource16">The type of the elements in the sixteenth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the fifteen previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`15.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`16">
      <summary>
            Represents a join pattern over sixteen observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TSource14">The type of the elements in the fourteenth source sequence.</typeparam>
      <typeparam name="TSource15">The type of the elements in the fifteenth source sequence.</typeparam>
      <typeparam name="TSource16">The type of the elements in the sixteenth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`16.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Plan`1">
      <summary>
            Represents an execution plan for join patterns.
            </summary>
      <typeparam name="TResult">The type of the results produced by the plan.</typeparam>
    </member>
    <member name="T:System.Reactive.Subjects.ReplaySubject`1">
      <summary>
            Represents an object that is both an observable sequence as well as an observer.
            Each notification is broadcasted to all subscribed and future observers, subject to buffer trimming policies.
            </summary>
      <typeparam name="T">The type of the elements processed by the subject.</typeparam>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Int32,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified buffer size, window and scheduler.
            </summary>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <param name="scheduler">Scheduler the observers are invoked on.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero. -or- <paramref name="window" /> is less than TimeSpan.Zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Int32,System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified buffer size and window.
            </summary>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero. -or- <paramref name="window" /> is less than TimeSpan.Zero.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class.
            </summary>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Reactive.Concurrency.IScheduler)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified scheduler.
            </summary>
      <param name="scheduler">Scheduler the observers are invoked on.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified buffer size and scheduler.
            </summary>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <param name="scheduler">Scheduler the observers are invoked on.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified buffer size.
            </summary>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified window and scheduler.
            </summary>
      <param name="window">Maximum time length of the replay buffer.</param>
      <param name="scheduler">Scheduler the observers are invoked on.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified window.
            </summary>
      <param name="window">Maximum time length of the replay buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.OnNext(`0)">
      <summary>
            Notifies all subscribed and future observers about the arrival of the specified element in the sequence.
            </summary>
      <param name="value">The value to send to all observers.</param>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.OnError(System.Exception)">
      <summary>
            Notifies all subscribed and future observers about the specified exception.
            </summary>
      <param name="error">The exception to send to all observers.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="error" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.OnCompleted">
      <summary>
            Notifies all subscribed and future observers about the end of the sequence.
            </summary>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.Subscribe(System.IObserver{`0})">
      <summary>
            Subscribes an observer to the subject.
            </summary>
      <param name="observer">Observer to subscribe to the subject.</param>
      <returns>Disposable object that can be used to unsubscribe the observer from the subject.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.Dispose">
      <summary>
            Releases all resources used by the current instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class and unsubscribe all observers.
            </summary>
    </member>
    <member name="P:System.Reactive.Subjects.ReplaySubject`1.HasObservers">
      <summary>
            Indicates whether the subject has observers subscribed to it.
            </summary>
    </member>
    <member name="T:System.Reactive.Threading.Tasks.NamespaceDoc">
      <summary>
            The <b>System.Reactive.Threading.Tasks</b> namespace contains helpers for the conversion between tasks and observable sequences.
            </summary>
    </member>
    <member name="T:System.Reactive.Threading.Tasks.TaskObservableExtensions">
      <summary>
            Provides a set of static methods for converting tasks to observable sequences.
            </summary>
    </member>
    <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable(System.Threading.Tasks.Task)">
      <summary>
            Returns an observable sequence that signals when the task completes.
            </summary>
      <param name="task">Task to convert to an observable sequence.</param>
      <returns>An observable sequence that produces a unit value when the task completes, or propagates the exception produced by the task.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> is null.</exception>
      <remarks>If the specified task object supports cancellation, consider using <see cref="M:System.Reactive.Linq.Observable.FromAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})" /> instead.</remarks>
    </member>
    <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable``1(System.Threading.Tasks.Task{``0})">
      <summary>
            Returns an observable sequence that propagates the result of the task.
            </summary>
      <typeparam name="TResult">The type of the result produced by the task.</typeparam>
      <param name="task">Task to convert to an observable sequence.</param>
      <returns>An observable sequence that produces the task's result, or propagates the exception produced by the task.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> is null.</exception>
      <remarks>If the specified task object supports cancellation, consider using <see cref="M:System.Reactive.Linq.Observable.FromAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})" /> instead.</remarks>
    </member>
    <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0})">
      <summary>
            Returns a task that will receive the last value or the exception produced by the observable sequence.
            </summary>
      <typeparam name="TResult">The type of the elements in the source sequence.</typeparam>
      <param name="observable">Observable sequence to convert to a task.</param>
      <returns>A task that will receive the last element or the exception produced by the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observable" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0},System.Object)">
      <summary>
            Returns a task that will receive the last value or the exception produced by the observable sequence.
            </summary>
      <typeparam name="TResult">The type of the elements in the source sequence.</typeparam>
      <param name="observable">Observable sequence to convert to a task.</param>
      <param name="state">The state to use as the underlying task's AsyncState.</param>
      <returns>A task that will receive the last element or the exception produced by the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observable" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0},System.Threading.CancellationToken)">
      <summary>
            Returns a task that will receive the last value or the exception produced by the observable sequence.
            </summary>
      <typeparam name="TResult">The type of the elements in the source sequence.</typeparam>
      <param name="observable">Observable sequence to convert to a task.</param>
      <param name="cancellationToken">Cancellation token that can be used to cancel the task, causing unsubscription from the observable sequence.</param>
      <returns>A task that will receive the last element or the exception produced by the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observable" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0},System.Threading.CancellationToken,System.Object)">
      <summary>
            Returns a task that will receive the last value or the exception produced by the observable sequence.
            </summary>
      <typeparam name="TResult">The type of the elements in the source sequence.</typeparam>
      <param name="observable">Observable sequence to convert to a task.</param>
      <param name="cancellationToken">Cancellation token that can be used to cancel the task, causing unsubscription from the observable sequence.</param>
      <param name="state">The state to use as the underlying task's AsyncState.</param>
      <returns>A task that will receive the last element or the exception produced by the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observable" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.TimeInterval`1">
      <summary>
            Represents a value associated with time interval information.
            The time interval can represent the time it took to produce the value, the interval relative to a previous value, the value's delivery time relative to a base, etc.
            </summary>
      <typeparam name="T">The type of the value being annotated with time interval information.</typeparam>
    </member>
    <member name="M:System.Reactive.TimeInterval`1.#ctor(`0,System.TimeSpan)">
      <summary>
            Constructs a time interval value.
            </summary>
      <param name="value">The value to be annotated with a time interval.</param>
      <param name="interval">Time interval associated with the value.</param>
    </member>
    <member name="M:System.Reactive.TimeInterval`1.Equals(System.Reactive.TimeInterval{`0})">
      <summary>
            Determines whether the current TimeInterval&lt;T&gt; value has the same Value and Interval as a specified TimeInterval&lt;T&gt; value.
            </summary>
      <param name="other">An object to compare to the current TimeInterval&lt;T&gt; value.</param>
      <returns>true if both TimeInterval&lt;T&gt; values have the same Value and Interval; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.TimeInterval`1.op_Equality(System.Reactive.TimeInterval{`0},System.Reactive.TimeInterval{`0})">
      <summary>
            Determines whether the two specified TimeInterval&lt;T&gt; values have the same Value and Interval.
            </summary>
      <param name="first">The first TimeInterval&lt;T&gt; value to compare.</param>
      <param name="second">The second TimeInterval&lt;T&gt; value to compare.</param>
      <returns>true if the first TimeInterval&lt;T&gt; value has the same Value and Interval as the second TimeInterval&lt;T&gt; value; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.TimeInterval`1.op_Inequality(System.Reactive.TimeInterval{`0},System.Reactive.TimeInterval{`0})">
      <summary>
            Determines whether the two specified TimeInterval&lt;T&gt; values don't have the same Value and Interval.
            </summary>
      <param name="first">The first TimeInterval&lt;T&gt; value to compare.</param>
      <param name="second">The second TimeInterval&lt;T&gt; value to compare.</param>
      <returns>true if the first TimeInterval&lt;T&gt; value has a different Value or Interval as the second TimeInterval&lt;T&gt; value; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.TimeInterval`1.Equals(System.Object)">
      <summary>
            Determines whether the specified System.Object is equal to the current TimeInterval&lt;T&gt;.
            </summary>
      <param name="obj">The System.Object to compare with the current TimeInterval&lt;T&gt;.</param>
      <returns>true if the specified System.Object is equal to the current TimeInterval&lt;T&gt;; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.TimeInterval`1.GetHashCode">
      <summary>
            Returns the hash code for the current TimeInterval&lt;T&gt; value.
            </summary>
      <returns>A hash code for the current TimeInterval&lt;T&gt; value.</returns>
    </member>
    <member name="M:System.Reactive.TimeInterval`1.ToString">
      <summary>
            Returns a string representation of the current TimeInterval&lt;T&gt; value.
            </summary>
      <returns>String representation of the current TimeInterval&lt;T&gt; value.</returns>
    </member>
    <member name="P:System.Reactive.TimeInterval`1.Value">
      <summary>
            Gets the value.
            </summary>
    </member>
    <member name="P:System.Reactive.TimeInterval`1.Interval">
      <summary>
            Gets the interval.
            </summary>
    </member>
    <member name="T:System.Reactive.Timestamped`1">
      <summary>
            Represents value with a timestamp on it.
            The timestamp typically represents the time the value was received, using an IScheduler's clock to obtain the current time.
            </summary>
      <typeparam name="T">The type of the value being timestamped.</typeparam>
    </member>
    <member name="M:System.Reactive.Timestamped`1.#ctor(`0,System.DateTimeOffset)">
      <summary>
            Constructs a timestamped value.
            </summary>
      <param name="value">The value to be annotated with a timestamp.</param>
      <param name="timestamp">Timestamp associated with the value.</param>
    </member>
    <member name="M:System.Reactive.Timestamped`1.Equals(System.Reactive.Timestamped{`0})">
      <summary>
            Determines whether the current Timestamped&lt;T&gt; value has the same Value and Timestamp as a specified Timestamped&lt;T&gt; value.
            </summary>
      <param name="other">An object to compare to the current Timestamped&lt;T&gt; value.</param>
      <returns>true if both Timestamped&lt;T&gt; values have the same Value and Timestamp; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.Timestamped`1.op_Equality(System.Reactive.Timestamped{`0},System.Reactive.Timestamped{`0})">
      <summary>
            Determines whether the two specified Timestamped&lt;T&gt; values have the same Value and Timestamp.
            </summary>
      <param name="first">The first Timestamped&lt;T&gt; value to compare.</param>
      <param name="second">The second Timestamped&lt;T&gt; value to compare.</param>
      <returns>true if the first Timestamped&lt;T&gt; value has the same Value and Timestamp as the second Timestamped&lt;T&gt; value; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.Timestamped`1.op_Inequality(System.Reactive.Timestamped{`0},System.Reactive.Timestamped{`0})">
      <summary>
            Determines whether the two specified Timestamped&lt;T&gt; values don't have the same Value and Timestamp.
            </summary>
      <param name="first">The first Timestamped&lt;T&gt; value to compare.</param>
      <param name="second">The second Timestamped&lt;T&gt; value to compare.</param>
      <returns>true if the first Timestamped&lt;T&gt; value has a different Value or Timestamp as the second Timestamped&lt;T&gt; value; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.Timestamped`1.Equals(System.Object)">
      <summary>
            Determines whether the specified System.Object is equal to the current Timestamped&lt;T&gt;.
            </summary>
      <param name="obj">The System.Object to compare with the current Timestamped&lt;T&gt;.</param>
      <returns>true if the specified System.Object is equal to the current Timestamped&lt;T&gt;; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.Timestamped`1.GetHashCode">
      <summary>
            Returns the hash code for the current Timestamped&lt;T&gt; value.
            </summary>
      <returns>A hash code for the current Timestamped&lt;T&gt; value.</returns>
    </member>
    <member name="M:System.Reactive.Timestamped`1.ToString">
      <summary>
            Returns a string representation of the current Timestamped&lt;T&gt; value.
            </summary>
      <returns>String representation of the current Timestamped&lt;T&gt; value.</returns>
    </member>
    <member name="P:System.Reactive.Timestamped`1.Value">
      <summary>
            Gets the value.
            </summary>
    </member>
    <member name="P:System.Reactive.Timestamped`1.Timestamp">
      <summary>
            Gets the timestamp.
            </summary>
    </member>
    <member name="T:System.Reactive.Timestamped">
      <summary>
            A helper class with a factory method for creating Timestamped&lt;T&gt; instances.
            </summary>
    </member>
    <member name="M:System.Reactive.Timestamped.Create``1(``0,System.DateTimeOffset)">
      <summary>
            Creates an instance of a Timestamped&lt;T&gt;.  This is syntactic sugar that uses type inference
            to avoid specifying a type in a constructor call, which is very useful when using anonymous types.
            </summary>
      <param name="value">The value to be annotated with a timestamp.</param>
      <param name="timestamp">Timestamp associated with the value.</param>
      <returns>Creates a new timestamped value.</returns>
    </member>
    <member name="T:System.Reactive.Strings_Linq">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.COULD_NOT_FIND_INSTANCE_EVENT">
      <summary>
              Looks up a localized string similar to Could not find event '{0}' on object of type '{1}'..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.COULD_NOT_FIND_STATIC_EVENT">
      <summary>
              Looks up a localized string similar to Could not find event '{0}' on type '{1}'..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.EVENT_ADD_METHOD_SHOULD_TAKE_ONE_PARAMETER">
      <summary>
              Looks up a localized string similar to Add method should take 1 parameter..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.EVENT_ARGS_NOT_ASSIGNABLE">
      <summary>
              Looks up a localized string similar to The second parameter of the event delegate must be assignable to '{0}'..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.EVENT_MISSING_ADD_METHOD">
      <summary>
              Looks up a localized string similar to Event is missing the add method..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.EVENT_MISSING_REMOVE_METHOD">
      <summary>
              Looks up a localized string similar to Event is missing the remove method..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.EVENT_MUST_RETURN_VOID">
      <summary>
              Looks up a localized string similar to The event delegate must have a void return type..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.EVENT_PATTERN_REQUIRES_TWO_PARAMETERS">
      <summary>
              Looks up a localized string similar to The event delegate must have exactly two parameters..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.EVENT_REMOVE_METHOD_SHOULD_TAKE_ONE_PARAMETER">
      <summary>
              Looks up a localized string similar to Remove method should take 1 parameter..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.EVENT_SENDER_NOT_ASSIGNABLE">
      <summary>
              Looks up a localized string similar to The first parameter of the event delegate must be assignable to '{0}'..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.EVENT_WINRT_REMOVE_METHOD_SHOULD_TAKE_ERT">
      <summary>
              Looks up a localized string similar to Remove method of a WinRT event should take an EventRegistrationToken..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.MORE_THAN_ONE_ELEMENT">
      <summary>
              Looks up a localized string similar to Sequence contains more than one element..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.MORE_THAN_ONE_MATCHING_ELEMENT">
      <summary>
              Looks up a localized string similar to Sequence contains more than one matching element..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.NO_ELEMENTS">
      <summary>
              Looks up a localized string similar to Sequence contains no elements..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.NO_MATCHING_ELEMENTS">
      <summary>
              Looks up a localized string similar to Sequence contains no matching element..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.CANT_ADVANCE_WHILE_RUNNING">
      <summary>
              Looks up a localized string similar to {0} cannot be called when the scheduler is already running. Try using Sleep instead..
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader.State">
      <summary>
            Specifies the state of the reader.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>true if the next token was read successfully; false if there are no more tokens to read.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Skip">
      <summary>
            Skips the children of the current token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)">
      <summary>
            Sets the current token.
            </summary>
      <param name="newToken">The new token.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)">
      <summary>
            Sets the current token and value.
            </summary>
      <param name="newToken">The new token.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
      <summary>
            Sets the state based on current token type.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Close">
      <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CurrentState">
      <summary>
            Gets the current reader state.
            </summary>
      <value>The current reader state.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CloseInput">
      <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader" /> should be closed when the reader is closed.
            </summary>
      <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when
            the reader is closed; otherwise false. The default is true.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.SupportMultipleContent">
      <summary>
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            </summary>
      <value>
            true to support reading multiple pieces of JSON content; otherwise false. The default is false.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateParseHandling">
      <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.FloatParseHandling">
      <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.TokenType">
      <summary>
            Gets the type of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Value">
      <summary>
            Gets the text value of the current JSON token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.ValueType">
      <summary>
            Gets The Common Language Runtime (CLR) type for the current JSON token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Path">
      <summary>
            Gets the path of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
      <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
      <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="reader">The reader.</param>
      <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
      <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>
            A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Close">
      <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
      <summary>
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </summary>
      <value>
        <c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
      <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
      <value>
        <c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.#ctor">
      <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
      <summary>
            Writes the end of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
      <summary>
            Writes the end of an array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor">
      <summary>
            Writes the end constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
      <summary>
            Writes the end of the current Json object or array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)">
      <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token and its children.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader,System.Boolean)">
      <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
      <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
      <summary>
            Writes out the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.SetWriteState(Newtonsoft.Json.JsonToken,System.Object)">
      <summary>
            Sets the state of the JsonWriter,
            </summary>
      <param name="token">The JsonToken being written.</param>
      <param name="value">The value being written.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.CloseOutput">
      <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader" /> should be closed when the writer is closed.
            </summary>
      <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when
            the writer is closed; otherwise false. The default is true.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Top">
      <summary>
            Gets the top.
            </summary>
      <value>The top.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
      <summary>
            Gets the state of the writer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Path">
      <summary>
            Gets the path of the writer. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateFormatHandling">
      <summary>
            Get or set how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.StringEscapeHandling">
      <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.FloatFormatHandling">
      <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateFormatString">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Culture">
      <summary>
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value that represents a BSON object id.
            </summary>
      <param name="value">The Object ID value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
      <summary>
            Writes a BSON regex.
            </summary>
      <param name="pattern">The regex pattern.</param>
      <param name="options">The regex options.</param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonObjectId">
      <summary>
            Represents a BSON Oid (object id).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> class.
            </summary>
      <param name="value">The Oid value.</param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonObjectId.Value">
      <summary>
            Gets or sets the value of the Oid.
            </summary>
      <value>The value of the Oid.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverter">
      <summary>
            Converts an object to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.GetSchema">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.
            </summary>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.</returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanRead">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BinaryConverter">
      <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataSetConverter">
      <summary>
            Converts a <see cref="T:System.Data.DataSet" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataTableConverter">
      <summary>
            Converts a <see cref="T:System.Data.DataTable" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1">
      <summary>
            Create a custom object
            </summary>
      <typeparam name="T">The object type to convert.</typeparam>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
      <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>The created object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase">
      <summary>
            Provides a base class for converting a <see cref="T:System.DateTime" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DiscriminatedUnionConverter">
      <summary>
            Converts a F# discriminated union type to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.EntityKeyMemberConverter">
      <summary>
            Converts an Entity Framework EntityKey to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.ExpandoObjectConverter">
      <summary>
            Converts an ExpandoObject to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.KeyValuePairConverter">
      <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BsonObjectIdConverter">
      <summary>
            Converts a <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> to and from JSON and BSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.RegexConverter">
      <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex" /> to and from JSON and BSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.StringEnumConverter">
      <summary>
            Converts an <see cref="T:System.Enum" /> to and from its name string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
      <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            </summary>
      <value>
        <c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.AllowIntegerValues">
      <summary>
            Gets or sets a value indicating whether integer values are allowed.
            </summary>
      <value>
        <c>true</c> if integers are allowed; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.ConstructorHandling">
      <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.Default">
      <summary>
            First attempt to use the public default constructor, then fall back to single paramatized constructor, then the non-public default constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
      <summary>
            Json.NET will use a non-public default constructor before falling back to a paramatized constructor.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Converters.VersionConverter">
      <summary>
            Converts a <see cref="T:System.Version" /> to and from a string (e.g. "1.2.3.4").
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing property value of the JSON that is being converted.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.FloatFormatHandling">
      <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" /> with <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.String">
      <summary>
            Write special floating point values as strings in JSON, e.g. "NaN", "Infinity", "-Infinity".
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.Symbol">
      <summary>
            Write special floating point values as symbols in JSON, e.g. NaN, Infinity, -Infinity.
            Note that this will produce non-valid JSON.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.DefaultValue">
      <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double" /> property, null for a <see cref="T:System.Nullable`1" /> property.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.FloatParseHandling">
      <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatParseHandling.Double">
      <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatParseHandling.Decimal">
      <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Decimal" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonContainerAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id">
      <summary>
            Gets or sets the id.
            </summary>
      <value>The id.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title">
      <summary>
            Gets or sets the title.
            </summary>
      <value>The title.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description">
      <summary>
            Gets or sets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
      <summary>
            Gets the collection's items converter.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference">
      <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
      <value>
        <c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
      <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
      <value>
        <c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
      <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonDictionaryAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="T:Newtonsoft.Json.JsonException">
      <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Newtonsoft.Json.DateFormatHandling">
      <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
      <summary>
            Dates are written in the ISO 8601 format, e.g. "2012-03-21T05:40Z".
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
      <summary>
            Dates are written in the Microsoft JSON format, e.g. "\/Date(1198908717056)\/".
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DateParseHandling">
      <summary>
            Specifies how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.None">
      <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.DateTime">
      <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset">
      <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DateTimeZoneHandling">
      <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Local">
      <summary>
            Treat as local time. If the <see cref="T:System.DateTime" /> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Utc">
      <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime" /> object represents a local time, it is converted to a UTC.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
      <summary>
            Treat as a local time if a <see cref="T:System.DateTime" /> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime" />, convert to a local time if a time zone is specified.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
      <summary>
            Time zone information should be preserved when converting.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Formatting">
      <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonTextWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.None">
      <summary>
            No special formatting is applied. This is the default.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.Indented">
      <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation" /> and <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar" /> settings.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConstructorAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified constructor when deserializing that object.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonExtensionDataAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonExtensionDataAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonExtensionDataAttribute" /> class.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.WriteData">
      <summary>
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            </summary>
      <value>
        <c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.ReadData">
      <summary>
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            </summary>
      <value>
        <c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ITraceWriter">
      <summary>
            Represents a trace writer.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
      <value>The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter">
      <summary>
            Represents a trace writer that writes to the application's <see cref="T:System.Diagnostics.TraceListener" /> instances.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
      <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IValueProvider">
      <summary>
            Provides methods to get and set values.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ExpressionValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ExpressionValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
      <summary>
            Gets the underlying type for the contract.
            </summary>
      <value>The underlying type for the contract.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType">
      <summary>
            Gets or sets the type created during deserialization.
            </summary>
      <value>The type created during deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference">
      <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
      <value>Whether this type contract is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter">
      <summary>
            Gets or sets the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for this contract.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks">
      <summary>
            Gets or sets all methods called immediately after deserialization of the object.
            </summary>
      <value>The methods called immediately after deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks">
      <summary>
            Gets or sets all methods called during deserialization of the object.
            </summary>
      <value>The methods called during deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks">
      <summary>
            Gets or sets all methods called after serialization of the object graph.
            </summary>
      <value>The methods called after serialization of the object graph.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks">
      <summary>
            Gets or sets all methods called before serialization of the object.
            </summary>
      <value>The methods called before serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks">
      <summary>
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </summary>
      <value>The methods called when an error is thrown during the serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserialized">
      <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
      <value>The method called immediately after deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializing">
      <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
      <value>The method called during deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerialized">
      <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
      <value>The method called after serialization of the object graph.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializing">
      <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
      <value>The method called before serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnError">
      <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
      <value>The method called when an error is thrown during the serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
      <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
      <value>The default creator method used to create the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
      <summary>
            Gets or sets a value indicating whether the default creator is non public.
            </summary>
      <value>
        <c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContainerContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonContainerContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
      <summary>
            Gets or sets the default collection items <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
      <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
      <value>
        <c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
      <summary>
            Gets or sets the collection item type name handling.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.MemoryTraceWriter">
      <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.MemoryTraceWriter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
      <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
      <returns>An enumeration of the most recent trace messages.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> of the most recent trace messages.
            </summary>
      <returns>
            A <see cref="T:System.String" /> of the most recent trace messages.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
      <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.IJsonLineInfo">
      <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
    </member>
    <member name="T:Newtonsoft.Json.StringEscapeHandling">
      <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.Default">
      <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
      <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
      <summary>
            HTML (&lt;, &gt;, &amp;, ', ") and control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token</typeparam>
    </member>
    <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JToken">
      <summary>
            Represents an abstract JSON token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
      <param name="t1">The first <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="t2">The second <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>true if the tokens are equal; otherwise false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
      <summary>
            Adds the specified content immediately after this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
      <summary>
            Adds the specified content immediately before this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors">
      <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
      <returns>A collection of the ancestor tokens of this token.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf">
      <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf">
      <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens before this token, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key converted to the specified type.
            </summary>
      <typeparam name="T">The type to convert the token to.</typeparam>
      <param name="key">The token key.</param>
      <returns>The converted token value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children``1">
      <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
      <typeparam name="T">The type to filter the child tokens on.</typeparam>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Remove">
      <summary>
            Removes this token from its parent.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Replaces this token with the specified token.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString">
      <summary>
            Returns the indented JSON for this token.
            </summary>
      <returns>
            The indented JSON for this token.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
      <returns>The JSON for this token using the given formatting and converters.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Boolean" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTimeOffset" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Char">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Char" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.SByte">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.SByte" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTime" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Decimal" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Double" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Single" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.String" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte[]" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Guid">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Uri">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Uri" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Byte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.SByte)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.SByte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Single" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Byte[]" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Uri" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Guid" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader">
      <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonReader" /> for this token.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.JsonReader" /> that can be used to read this token and its descendants.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when reading the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="objectType">The object type that the token will be deserialized to.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1(Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="objectType">The object type that the token will be deserialized to.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
      <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JPath expression. Selects the token that matches the object path.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" />, or null.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
      <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JPath expression. Selects the token that matches the object path.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String)">
      <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the selected elements.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
      <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the selected elements.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepClone">
      <summary>
            Creates a new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />. All child tokens are recursively cloned.
            </summary>
      <returns>A new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer">
      <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer" /> that can compare two nodes for value equality.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Parent">
      <summary>
            Gets or sets the parent.
            </summary>
      <value>The parent.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Root">
      <summary>
            Gets the root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.HasValues">
      <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Next">
      <summary>
            Gets the next sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the next sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Previous">
      <summary>
            Gets the previous sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the previous sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Path">
      <summary>
            Gets the path of the JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JValue">
      <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class from another <see cref="T:Newtonsoft.Json.Linq.JValue" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JValue" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Decimal)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTimeOffset)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format.</param>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance.
            </exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.HasValues">
      <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Value">
      <summary>
            Gets or sets the underlying token value.
            </summary>
      <value>The underlying token value.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JRaw">
      <summary>
            Represents a raw JSON string.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class from another <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class.
            </summary>
      <param name="rawJson">The raw json.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.
            </summary>
      <param name="reader">The reader.</param>
      <returns>An instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Required">
      <summary>
            Indicating whether a property is required.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Default">
      <summary>
            The property is not required. The default state.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.AllowNull">
      <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Always">
      <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDynamicContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
      <summary>
            Gets or sets the property name resolver.
            </summary>
      <value>The property name resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonISerializableContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
      <summary>
            Gets or sets the ISerializable object constructor.
            </summary>
      <value>The ISerializable object constructor.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DynamicValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DynamicValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs">
      <summary>
            Provides data for the Error event.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs" /> class.
            </summary>
      <param name="currentObject">The current object.</param>
      <param name="errorContext">The error context.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
      <summary>
            Gets the current object the error event is being raised against.
            </summary>
      <value>The current object the error event is being raised against.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
      <summary>
            Gets the error context.
            </summary>
      <value>The error context.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JPropertyDescriptor">
      <summary>
            Represents a view of a <see cref="T:Newtonsoft.Json.Linq.JProperty" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JPropertyDescriptor" /> class.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
      <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
      <param name="component">The component to test for reset capability. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
      <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
      <returns>
            The value of a property for a given component.
            </returns>
      <param name="component">The component with the property for which to retrieve the value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
      <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
      <param name="component">The component with the property value that is to be reset to the default value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
      <param name="component">The component with the property value that is to be set. 
                            </param>
      <param name="value">The new value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
      <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
      <param name="component">The component with the property to be examined for persistence. 
                            </param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType">
      <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> methods are invoked, the object specified might be an instance of this type.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly">
      <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
      <returns>
            true if the property is read-only; otherwise, false.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType">
      <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of the property.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode">
      <summary>
            Gets the hash code for the name of the member.
            </summary>
      <value>
      </value>
      <returns>
            The hash code for the name of the member.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver">
      <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
      <summary>
            Resolves a reference to its object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="reference">The reference to resolve.</param>
      <returns>The object that</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
      <summary>
            Gets the reference for the sepecified object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="value">The object to get a reference for.</param>
      <returns>The reference to the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
      <summary>
            Determines whether the specified object is referenced.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="value">The object to test for a reference.</param>
      <returns>
        <c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
      <summary>
            Adds a reference to the specified object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="reference">The reference.</param>
      <param name="value">The object to reference.</param>
    </member>
    <member name="T:Newtonsoft.Json.PreserveReferencesHandling">
      <summary>
            Specifies reference handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement ISerializable.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None">
      <summary>
            Do not preserve references when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects">
      <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays">
      <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All">
      <summary>
            Preserve references when serializing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonArrayAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with a flag indicating whether the array can contain null items
            </summary>
      <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
      <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
      <value>
        <c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.DefaultValueHandling">
      <summary>
            Specifies default value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Include">
      <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore">
      <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that is is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable typesl; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> on the property.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Populate">
      <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
      <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and sets members to their default value when deserializing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified <see cref="T:Newtonsoft.Json.JsonConverter" /> when serializing the member or class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </summary>
      <param name="converterType">Type of the converter.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType">
      <summary>
            Gets the type of the converter.
            </summary>
      <value>The type of the converter.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonObjectAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified member serialization.
            </summary>
      <param name="memberSerialization">The member serialization.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
      <summary>
            Gets or sets the member serialization.
            </summary>
      <value>The member serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
      <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
      <value>
            	A value indicating whether the object's properties are required.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializerSettings">
      <summary>
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer" /> object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> class.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
      <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
      <value>Reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
      <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
      <value>Missing member handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
      <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
      <value>Null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
      <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters">
      <summary>
            Gets or sets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>The converters.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
      <value>The preserve references handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
      <value>The reference resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
      <value>The trace writer.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
      <value>The binder.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error">
      <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
      <value>The error handler called during serialization and deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatString">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
      <summary>
            Get or set how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
      <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling">
      <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling">
      <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling">
      <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
      <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            </summary>
      <value>
        <c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonValidatingReader">
      <summary>
            Represents a reader that provides <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> validation.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonValidatingReader" /> class that
            validates the content returned from the given <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from while validating.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Value">
      <summary>
            Gets the text value of the current JSON token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Path">
      <summary>
            Gets the path of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType">
      <summary>
            Gets the type of the current JSON token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType">
      <summary>
            Gets the Common Language Runtime (CLR) type for the current JSON token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema">
      <summary>
            Gets or sets the schema.
            </summary>
      <value>The schema.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonReader" /> used to construct this <see cref="T:Newtonsoft.Json.JsonValidatingReader" />.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.JsonReader" /> specified in the constructor.</value>
    </member>
    <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
      <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer">
      <summary>
            Compares tokens to determine whether they are equal.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the specified objects are equal.
            </summary>
      <param name="x">The first object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="y">The second object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Returns a hash code for the specified object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>A hash code for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
    </member>
    <member name="T:Newtonsoft.Json.MemberSerialization">
      <summary>
            Specifies the member serialization options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptOut">
      <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This is the default member serialization mode.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptIn">
      <summary>
            Only members must be marked with <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute" /> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.Fields">
      <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute" />
            and setting IgnoreSerializableAttribute on <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> to false.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ObjectCreationHandling">
      <summary>
            Specifies how object creation is handled by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto">
      <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse">
      <summary>
            Only reuse existing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace">
      <summary>
            Always create new objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
      <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
      <value>The date time styles used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
      <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
      <value>The date time format used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
      <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
      <value>The culture used when converting a date to and from JSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing property value of the JSON that is being converted.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.XmlNodeConverter">
      <summary>
            Converts XML to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="serializer">The calling serializer.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
      <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
      <param name="attributeName">Attribute name to test.</param>
      <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
      <returns>True if attribute name is for a namespace attribute, otherwise false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
      <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produces multiple root elements.
            </summary>
      <value>The name of the deserialize root element.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
      <summary>
            Gets or sets a flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
      <value>
        <c>true</c> if the array attibute is written to the XML; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
      <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
      <value>
        <c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
      <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.DateTimeOffset" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Close">
      <summary>
            Changes the state to closed. 
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonPropertyAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to always serialize the member with the specified name.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
      <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
      <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
      <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
      <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
      <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference">
      <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
      <value>Whether this property's value is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Order">
      <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
      <value>The numeric order of serialization or deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required">
      <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
      <value>
            	A value indicating whether this property is required.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
      <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
      <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
      <value>Whether this property's collection items are serialized as a reference.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonIgnoreAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> not to serialize the public field or public read/write property value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <c>TextWriter</c> to write to.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
      <summary>
            Writes out the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation">
      <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar">
      <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar">
      <summary>
            Gets or sets which character to use for indenting when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName">
      <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriterException">
      <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriterException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonReaderException">
      <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterCollection">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConvert">
      <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.True">
      <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.False">
      <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Null">
      <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Undefined">
      <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity">
      <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity">
      <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NaN">
      <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
      <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Newtonsoft.Json.DateFormatHandling,Newtonsoft.Json.DateTimeZoneHandling)">
      <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="format">The format the date will be converted to.</param>
      <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
      <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Newtonsoft.Json.DateFormatHandling)">
      <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="format">The format the date will be converted to.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
      <summary>
            Converts the <see cref="T:System.Boolean" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)">
      <summary>
            Converts the <see cref="T:System.Char" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
      <summary>
            Converts the <see cref="T:System.Enum" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Enum" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
      <summary>
            Converts the <see cref="T:System.Int32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
      <summary>
            Converts the <see cref="T:System.Int16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
      <summary>
            Converts the <see cref="T:System.UInt16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
      <summary>
            Converts the <see cref="T:System.UInt32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
      <summary>
            Converts the <see cref="T:System.Int64" />  to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
      <summary>
            Converts the <see cref="T:System.UInt64" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)">
      <summary>
            Converts the <see cref="T:System.Single" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)">
      <summary>
            Converts the <see cref="T:System.Double" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
      <summary>
            Converts the <see cref="T:System.Byte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
      <summary>
            Converts the <see cref="T:System.SByte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
      <summary>
            Converts the <see cref="T:System.Decimal" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
      <summary>
            Converts the <see cref="T:System.Guid" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
      <summary>
            Converts the <see cref="T:System.TimeSpan" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
      <summary>
            Converts the <see cref="T:System.Uri" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="delimiter">The string delimiter character.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)">
      <summary>
            Converts the <see cref="T:System.Object" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
      <summary>
            Serializes the specified object to a JSON string.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="converters">A collection converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:Newtonsoft.Json.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:Newtonsoft.Json.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object)">
      <summary>
            Asynchronously serializes the specified object to a JSON string.
            Serialization will happen on a new thread.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting)">
      <summary>
            Asynchronously serializes the specified object to a JSON string using formatting.
            Serialization will happen on a new thread.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            Serialization will happen on a new thread.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
      <summary>
            Deserializes the JSON to a .NET object.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to a .NET object using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
      <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
      <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="anonymousTypeObject">The anonymous type object.</param>
      <returns>The deserialized anonymous type from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="anonymousTypeObject">The anonymous type object.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized anonymous type from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The object to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize to.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            Deserialization will happen on a new thread.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            Deserialization will happen on a new thread.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            Deserialization will happen on a new thread.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            Deserialization will happen on a new thread.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize to.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
      <summary>
            Populates the object with values from the JSON string.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Populates the object with values from the JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObjectAsync(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously populates the object with values from the JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>
            A task that represents the asynchronous populate operation.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
      <summary>
            Serializes the XML node to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the XML node to a JSON string using formatting.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting,System.Boolean)">
      <summary>
            Serializes the XML node to a JSON string using formatting and omits the root object if <paramref name="omitRootObject" /> is <c>true</c>.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="omitRootObject">Omits writing the root object.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
      <summary>
            Deserializes the XmlNode from a JSON string.
            </summary>
      <param name="value">The JSON string.</param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
      <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
      <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />
            and writes a .NET array attribute for collections.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
      <param name="node">The node to convert to JSON.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string using formatting.
            </summary>
      <param name="node">The node to convert to JSON.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting,System.Boolean)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string using formatting and omits the root object if <paramref name="omitRootObject" /> is <c>true</c>.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="omitRootObject">Omits writing the root object.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string.
            </summary>
      <param name="value">The JSON string.</param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />
            and writes a .NET array attribute for collections.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonConvert.DefaultSettings">
      <summary>
            Gets or sets a function that creates default <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            Default settings are automatically used by serialization methods on <see cref="T:Newtonsoft.Json.JsonConvert" />,
            and <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject``1" /> and <see cref="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)" /> on <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            To serialize without using any default settings create a <see cref="T:Newtonsoft.Json.JsonSerializer" /> with
            <see cref="M:Newtonsoft.Json.JsonSerializer.Create" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializationException">
      <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializer">
      <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> enables you to control how objects are encoded into JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Create">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
            </summary>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
            </summary>
      <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
            </summary>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
            </summary>
      <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to deserialize.</param>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:System.IO.StringReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <typeparam name="T">The type of the object to deserialize.</typeparam>
      <returns>The instance of <typeparamref name="T" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object,System.Type)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
      <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
      <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:Newtonsoft.Json.JsonWriter" />. 
            </summary>
      <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Binder">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TraceWriter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
      <value>The trace writer.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
      <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
      <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling">
      <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
      <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Converters">
      <summary>
            Gets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>Collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatHandling">
      <summary>
            Get or set how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateParseHandling">
      <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.FloatParseHandling">
      <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.FloatFormatHandling">
      <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.StringEscapeHandling">
      <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatString">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
      <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            </summary>
      <value>
        <c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="E:Newtonsoft.Json.JsonSerializer.Error">
      <summary>
            Occurs when the <see cref="T:Newtonsoft.Json.JsonSerializer" /> errors during serialization and deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.Extensions">
      <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the ancestors of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the descendants of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
      <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the properties of every object in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <typeparam name="T">The source collection type.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JContainer">
      <summary>
            Represents a token that can contain other tokens.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants">
      <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
      <summary>
            Adds the specified content as children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
      <summary>
            Adds the specified content as the first children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter">
      <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonWriter" /> that can be used to add tokens to the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.JsonWriter" /> that is ready to have content written to it.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
      <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
      <param name="content">The content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll">
      <summary>
            Removes the child nodes from this token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues">
      <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Count">
      <summary>
            Gets the count of child JSON tokens.
            </summary>
      <value>The count of child JSON tokens</value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.ListChanged">
      <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.AddingNew">
      <summary>
            Occurs before an item is added to the collection.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged">
      <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JConstructor">
      <summary>
            Represents a JSON constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class from another <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name.
            </summary>
      <param name="name">The constructor name.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Name">
      <summary>
            Gets or sets the name of this constructor.
            </summary>
      <value>The constructor name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token</typeparam>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty">
      <summary>
            An empty collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> struct.
            </summary>
      <param name="enumerable">The enumerable.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JObject">
      <summary>
            Represents a JSON object.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class from another <see cref="T:Newtonsoft.Json.Linq.JObject" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JObject" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Properties">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> the specified name.
            </summary>
      <param name="name">The property name.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> with the specified name or null.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues">
      <summary>
            Gets an <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> populated from the string that contains JSON.</returns>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Newtonsoft.Json.Linq.JToken@)">
      <summary>
            Tries to get the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
      <returns>true if a value was successfully retrieved; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)">
      <summary>
            Removes the property with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>true if item was successfully removed; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)">
      <summary>
            Tries the get value.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <returns>true if a value was successfully retrieved; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
      <value>
      </value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanging">
      <summary>
            Occurs when a property value is changing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JArray">
      <summary>
            Represents a JSON array.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class from another <see cref="T:Newtonsoft.Json.Linq.JArray" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JArray" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> populated from the string that contains JSON.</returns>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.CopyTo(Newtonsoft.Json.Linq.JToken[],System.Int32)">
      <summary>
            Copies to.
            </summary>
      <param name="array">The array.</param>
      <param name="arrayIndex">Index of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenReader" /> class.
            </summary>
      <param name="token">The token to read from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class writing to the given <see cref="T:Newtonsoft.Json.Linq.JContainer" />.
            </summary>
      <param name="container">The container being written to.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token">
      <summary>
            Gets the token being writen.
            </summary>
      <value>The token being writen.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JProperty">
      <summary>
            Represents a JSON property.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class from another <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Name">
      <summary>
            Gets the property name.
            </summary>
      <value>The property name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Value">
      <summary>
            Gets or sets the property value.
            </summary>
      <value>The property value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenType">
      <summary>
            Specifies the type of token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
      <summary>
            No token type has been set.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
      <summary>
            A JSON object.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
      <summary>
            A JSON array.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
      <summary>
            A JSON constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
      <summary>
            A JSON object property.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
      <summary>
            An integer value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
      <summary>
            A float value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
      <summary>
            A string value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
      <summary>
            A boolean value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
      <summary>
            A null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
      <summary>
            An undefined value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
      <summary>
            A date value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
      <summary>
            A raw JSON value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
      <summary>
            A collection of bytes value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Guid">
      <summary>
            A Guid value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Uri">
      <summary>
            A Uri value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.TimeSpan">
      <summary>
            A TimeSpan value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.Extensions">
      <summary>
            Contains the JSON schema extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
      <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)">
      <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <param name="validationEventHandler">The validation event handler.</param>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
      <summary>
            Returns detailed information about the schema exception.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver">
      <summary>
            Resolves <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from an id.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified reference.
            </summary>
      <param name="reference">The id.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified reference.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
      <summary>
            Gets or sets the loaded schemas.
            </summary>
      <value>The loaded schemas.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
      <summary>
            Specifies undefined schema Id handling options for the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
      <summary>
            Do not infer a schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
      <summary>
            Use the .NET type name as the schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
      <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs">
      <summary>
            Returns detailed information related to the <see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> associated with the validation error.
            </summary>
      <value>The JsonSchemaException associated with the validation error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Path">
      <summary>
            Gets the path of the JSON location where the validation error occurred.
            </summary>
      <value>The path of the JSON location where the validation error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message">
      <summary>
            Gets the text description corresponding to the validation error.
            </summary>
      <value>The text description.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler">
      <summary>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
      <param name="shareCache">
            If set to <c>true</c> the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> instances with the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
      <summary>
            Gets the serializable members for the type.
            </summary>
      <param name="objectType">The type to get serializable members for.</param>
      <returns>The serializable members for the type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
      <summary>
            Creates the constructor parameters.
            </summary>
      <param name="constructor">The constructor to create properties for.</param>
      <param name="memberProperties">The type's member properties.</param>
      <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
            </summary>
      <param name="matchingMemberProperty">The matching member property.</param>
      <param name="parameterInfo">The constructor parameter.</param>
      <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
      <summary>
            Resolves the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for the contract.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>The contract's default <see cref="T:Newtonsoft.Json.JsonConverter" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
      <summary>
            Determines which contract type is created for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
            </summary>
      <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param><returns>Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.</returns></member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
      <summary>
            Creates the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.
            </summary>
      <param name="member">The member.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
      <param name="memberSerialization">The member's parent <see cref="T:Newtonsoft.Json.MemberSerialization" />.</param>
      <param name="member">The member to create a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for.</param>
      <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>Name of the property.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
      <summary>
            Gets the resolved name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>Name of the property.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
      <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
      <value>
        <c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
      <summary>
            Gets or sets the default members search flags.
            </summary>
      <value>The default members search flags.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
      <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
      <value>
        <c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
      <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface when serializing and deserializing types.
            </summary>
      <value>
        <c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
      <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.SerializableAttribute" /> attribute when serializing and deserializing types.
            </summary>
      <value>
        <c>true</c> if the <see cref="T:System.SerializableAttribute" /> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
      <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The property name camel cased.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder">
      <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
      <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object. </param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object. </param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorContext">
      <summary>
            Provides information surrounding an error.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error">
      <summary>
            Gets the error.
            </summary>
      <value>The error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
      <summary>
            Gets the original object that caused the error.
            </summary>
      <value>The original object that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member">
      <summary>
            Gets the member that caused the error.
            </summary>
      <value>The member that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Path">
      <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
      <value>The path of the JSON location where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.ErrorContext" /> is handled.
            </summary>
      <value>
        <c>true</c> if handled; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the collection items.
            </summary>
      <value>The <see cref="T:System.Type" /> of the collection items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
      <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
      <value>
        <c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.SerializationCallback">
      <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization callback events.
            </summary>
      <param name="o">The object that raised the callback event.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.SerializationErrorCallback">
      <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization error callback events.
            </summary>
      <param name="o">The object that raised the callback event.</param>
      <param name="context">The streaming context.</param>
      <param name="errorContext">The error context.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ExtensionDataSetter">
      <summary>
            Sets extension data for an object during deserialization.
            </summary>
      <param name="o">The object to set extension data on.</param>
      <param name="key">The extension data key.</param>
      <param name="value">The extension data value.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ExtensionDataGetter">
      <summary>
            Gets extension data for an object during serialization.
            </summary>
      <param name="o">The object to set extension data on.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
      <summary>
            Gets or sets the property name resolver.
            </summary>
      <value>The property name resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary keys.
            </summary>
      <value>The <see cref="T:System.Type" /> of the dictionary keys.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary values.
            </summary>
      <value>The <see cref="T:System.Type" /> of the dictionary values.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonProperty">
      <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonProperty.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
      <summary>
            Gets or sets the type that declared this property.
            </summary>
      <value>The type that declared this property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Order">
      <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
      <value>The numeric order of serialization or deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
      <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
      <value>The name of the underlying member or parameter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
      <summary>
            Gets or sets the type of the property.
            </summary>
      <value>The type of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
      <summary>
            Gets or sets the member converter.
            </summary>
      <value>The member converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is ignored.
            </summary>
      <value>
        <c>true</c> if ignored; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is readable.
            </summary>
      <value>
        <c>true</c> if readable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is writable.
            </summary>
      <value>
        <c>true</c> if writable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> has a member attribute.
            </summary>
      <value>
        <c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
      <summary>
            Gets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.
            </summary>
      <value>A value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference">
      <summary>
            Gets or sets a value indicating whether this property preserves object references.
            </summary>
      <value>
        <c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
      <summary>
            Gets or sets the property null value handling.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
      <summary>
            Gets or sets the property default value handling.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
      <summary>
            Gets or sets the property reference loop handling.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
      <summary>
            Gets or sets the property object creation handling.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
      <summary>
            Gets or sets or sets the type name handling.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
      <summary>
            Gets or sets a predicate used to determine whether the property should be serialize.
            </summary>
      <value>A predicate used to determine whether the property should be serialize.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
      <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
      <value>A predicate used to determine whether the property should be serialized.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
      <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
      <value>An action used to set whether the property has been deserialized.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
      <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
      <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
      <value>Whether this property's collection items are serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
      <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items reference loop handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection">
      <summary>
            A collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection" /> class.
            </summary>
      <param name="type">The type.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            Adds a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            </summary>
      <param name="property">The property to add to the collection.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
      <summary>
            Gets the closest matching <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
      <summary>
            Gets a property by property name.
            </summary>
      <param name="propertyName">The name of the property to get.</param>
      <param name="comparisonType">Type property name string comparison.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="T:Newtonsoft.Json.MissingMemberHandling">
      <summary>
            Specifies missing member handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore">
      <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a missing member is encountered during deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.NullValueHandling">
      <summary>
            Specifies null value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Include">
      <summary>
            Include null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Ignore">
      <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
      <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a loop is encountered.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
      <summary>
            Ignore loop references and do not serialize.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
      <summary>
            Serialize loop references.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchema">
      <summary>
            An in-memory representation of a JSON Schema.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> to use when resolving schema references.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a string that contains schema JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Parses the specified json.
            </summary>
      <param name="json">The json.</param>
      <param name="resolver">The resolver.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" /> using the specified <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="resolver">The resolver used.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id">
      <summary>
            Gets or sets the id.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title">
      <summary>
            Gets or sets the title.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Required">
      <summary>
            Gets or sets whether the object is required.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
      <summary>
            Gets or sets whether the object is read only.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden">
      <summary>
            Gets or sets whether the object is visible to users.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient">
      <summary>
            Gets or sets whether the object is transient.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description">
      <summary>
            Gets or sets the description of the object.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type">
      <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern">
      <summary>
            Gets or sets the pattern.
            </summary>
      <value>The pattern.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
      <summary>
            Gets or sets the minimum length.
            </summary>
      <value>The minimum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
      <summary>
            Gets or sets the maximum length.
            </summary>
      <value>The maximum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
      <summary>
            Gets or sets a number that the value should be divisble by.
            </summary>
      <value>A number that the value should be divisble by.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum">
      <summary>
            Gets or sets the minimum.
            </summary>
      <value>The minimum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum">
      <summary>
            Gets or sets the maximum.
            </summary>
      <value>The maximum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
      <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
            </summary>
      <value>A flag indicating whether the value can not equal the number defined by the "minimum" attribute.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
      <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
            </summary>
      <value>A flag indicating whether the value can not equal the number defined by the "maximum" attribute.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
      <summary>
            Gets or sets the minimum number of items.
            </summary>
      <value>The minimum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
      <summary>
            Gets or sets the maximum number of items.
            </summary>
      <value>The maximum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
      <summary>
            Gets or sets a value indicating whether items in an array are validated using the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> instance at their array position from <see cref="P:Newtonsoft.Json.Schema.JsonSchema.Items" />.
            </summary>
      <value>
        <c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional items.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
      <summary>
            Gets or sets a value indicating whether additional items are allowed.
            </summary>
      <value>
        <c>true</c> if additional items are allowed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
      <summary>
            Gets or sets whether the array items must be unique.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
      <summary>
            Gets or sets the pattern properties.
            </summary>
      <value>The pattern properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
      <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
      <value>
        <c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires">
      <summary>
            Gets or sets the required property if this property is present.
            </summary>
      <value>The required property if this property is present.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum">
      <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
      <value>A collection of valid enum values allowed.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow">
      <summary>
            Gets or sets disallowed types.
            </summary>
      <value>The disallow types.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default">
      <summary>
            Gets or sets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends">
      <summary>
            Gets or sets the collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> that this schema extends.
            </summary>
      <value>The collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> that this schema extends.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format">
      <summary>
            Gets or sets the format.
            </summary>
      <value>The format.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator">
      <summary>
            Generates a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a specified <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
      <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
      <summary>
            Gets or sets the contract resolver.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
      <summary>
            The value types allowed by the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
      <summary>
            No type specified.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
      <summary>
            String type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
      <summary>
            Float type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
      <summary>
            Integer type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
      <summary>
            Boolean type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
      <summary>
            Object type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
      <summary>
            Array type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
      <summary>
            Null type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
      <summary>
            Any type.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
      <summary>
            Gets or sets the object member serialization.
            </summary>
      <value>The member object serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
      <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
      <value>
            	A value indicating whether the object's properties are required.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ConstructorParameters">
      <summary>
            Gets the constructor parameters required for any non-default constructor
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideConstructor">
      <summary>
            Gets or sets the override constructor used to create the object.
            This is set when a constructor is marked up using the
            JsonConstructor attribute.
            </summary>
      <value>The override constructor.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
      <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
      <value>The parametrized constructor.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
      <summary>
            Gets or sets the extension data setter.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
      <summary>
            Gets or sets the extension data getter.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonStringContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using reflection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute">
      <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
      <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ObjectConstructor`1">
      <summary>
            Represents a method that constructs an object.
            </summary>
      <typeparam name="T">The object type to create.</typeparam>
    </member>
    <member name="T:Newtonsoft.Json.TypeNameHandling">
      <summary>
            Specifies type name handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.None">
      <summary>
            Do not include the .NET type name when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Objects">
      <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays">
      <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.All">
      <summary>
            Always include the .NET type name when serializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Auto">
      <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.Convert(System.Object,System.Globalization.CultureInfo,System.Type)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert the value to.</param>
      <returns>The converted type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(System.Object,System.Globalization.CultureInfo,System.Type,System.Object@)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert the value to.</param>
      <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
      <returns>
        <c>true</c> if <c>initialValue</c> was converted successfully; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert or cast the value to.</param>
      <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <param name="enumType">The enum type to get names and values for.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Newtonsoft.Json.JsonToken">
      <summary>
            Specifies the type of Json token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.None">
      <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader" /> if a <see cref="M:Newtonsoft.Json.JsonReader.Read" /> method has not been called. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartObject">
      <summary>
            An object start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartArray">
      <summary>
            An array start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
      <summary>
            A constructor start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
      <summary>
            An object property name.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Raw">
      <summary>
            Raw JSON.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Integer">
      <summary>
            An integer.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Float">
      <summary>
            A float.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.String">
      <summary>
            A string.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Boolean">
      <summary>
            A boolean.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Null">
      <summary>
            A null token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Undefined">
      <summary>
            An undefined token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndObject">
      <summary>
            An object end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndArray">
      <summary>
            An array end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
      <summary>
            A constructor end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Date">
      <summary>
            A Date.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Bytes">
      <summary>
            Byte data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Utilities.StringBuffer">
      <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
      <summary>
            Determines whether the collection is null or empty.
            </summary>
      <param name="collection">The collection.</param>
      <returns>
        <c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
      <param name="initial">The list to add to.</param>
      <param name="collection">The collection of elements to add.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns the index of the first occurrence in a sequence by using a specified IEqualityComparer.
            </summary>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <param name="list">A sequence in which to locate a value.</param>
      <param name="value">The object to locate in the sequence</param>
      <param name="comparer">An equality comparer to compare values.</param>
      <returns>The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
      <summary>
            Gets the type of the typed collection's items.
            </summary>
      <param name="type">The type.</param>
      <returns>The type of the typed collection's items.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
      <summary>
            Gets the member's underlying type.
            </summary>
      <param name="member">The member.</param>
      <returns>The underlying type of the member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
      <summary>
            Determines whether the member is an indexed property.
            </summary>
      <param name="member">The member.</param>
      <returns>
        <c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
      <summary>
            Determines whether the property is an indexed property.
            </summary>
      <param name="property">The property.</param>
      <returns>
        <c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
      <summary>
            Gets the member's value on the object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target object.</param>
      <returns>The member's value on the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
      <summary>
            Sets the member's value on the target object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
      <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
      <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param><returns><c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns></member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
      <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
      <param name="member">The MemberInfo to determine whether can be set.</param>
      <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
      <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
      <returns>
        <c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
      <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
      <param name="s">The string to test whether it is all white space.</param>
      <returns>
        <c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.NullEmptyString(System.String)">
      <summary>
            Nulls an empty string.
            </summary>
      <param name="s">The string.</param>
      <returns>Null if the string was null, otherwise the string unchanged.</returns>
    </member>
    <member name="T:Newtonsoft.Json.WriteState">
      <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Error">
      <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter" /> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method to put the <see cref="T:Newtonsoft.Json.JsonWriter" /> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter" /> method calls results in an <see cref="T:System.InvalidOperationException" /> being thrown. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Closed">
      <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method has been called. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Object">
      <summary>
            An object is being written. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Array">
      <summary>
            A array is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Constructor">
      <summary>
            A constructor is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Property">
      <summary>
            A property is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Start">
      <summary>
            A write method has not been called.
            </summary>
    </member>
  </members>
</doc>